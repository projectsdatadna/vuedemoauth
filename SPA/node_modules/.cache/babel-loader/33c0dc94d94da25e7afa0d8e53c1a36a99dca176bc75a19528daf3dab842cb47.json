{"ast":null,"code":"/*! @azure/msal-common v8.0.0 2022-11-07 */\n'use strict';\n\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { StringUtils } from '../utils/StringUtils.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * JWT Token representation class. Parses token string and generates claims object.\r\n */\nvar AuthToken = /** @class */function () {\n  function AuthToken(rawToken, crypto) {\n    if (StringUtils.isEmpty(rawToken)) {\n      throw ClientAuthError.createTokenNullOrEmptyError(rawToken);\n    }\n    this.rawToken = rawToken;\n    this.claims = AuthToken.extractTokenClaims(rawToken, crypto);\n  }\n  /**\r\n   * Extract token by decoding the rawToken\r\n   *\r\n   * @param encodedToken\r\n   */\n  AuthToken.extractTokenClaims = function (encodedToken, crypto) {\n    var decodedToken = StringUtils.decodeAuthToken(encodedToken);\n    // token will be decoded to get the username\n    try {\n      var base64TokenPayload = decodedToken.JWSPayload;\n      // base64Decode() should throw an error if there is an issue\n      var base64Decoded = crypto.base64Decode(base64TokenPayload);\n      return JSON.parse(base64Decoded);\n    } catch (err) {\n      throw ClientAuthError.createTokenParsingError(err);\n    }\n  };\n  /**\r\n   * Determine if the token's max_age has transpired\r\n   */\n  AuthToken.checkMaxAge = function (authTime, maxAge) {\n    /*\r\n     * per https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest\r\n     * To force an immediate re-authentication: If an app requires that a user re-authenticate prior to access,\r\n     * provide a value of 0 for the max_age parameter and the AS will force a fresh login.\r\n     */\n    var fiveMinuteSkew = 300000; // five minutes in milliseconds\n    if (maxAge === 0 || Date.now() - fiveMinuteSkew > authTime + maxAge) {\n      throw ClientAuthError.createMaxAgeTranspiredError();\n    }\n  };\n  return AuthToken;\n}();\nexport { AuthToken };","map":{"version":3,"mappings":";;;;;;AAAA;;;AAGG;AAQH;;AAEG;AACH;EAMI,SAAYA,kBAAgB,EAAEC,MAAe;IACzC,IAAIC,WAAW,CAACC,OAAO,CAACC,QAAQ,CAAC,EAAE;MAC/B,MAAMC,eAAe,CAACC,2BAA2B,CAACF,QAAQ,CAAC;IAC9D;IAED,IAAI,CAACA,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACG,MAAM,GAAGP,SAAS,CAACQ,kBAAkB,CAACJ,QAAQ,EAAEH,MAAM,CAAC;;EAGhE;;;;AAIG;EACID,4BAAkB,GAAzB,UAA0BS,YAAoB,EAAER,MAAe;IAE3D,IAAMS,YAAY,GAAqBR,WAAW,CAACS,eAAe,CAACF,YAAY,CAAC;;IAGhF,IAAI;MACA,IAAMG,kBAAkB,GAAGF,YAAY,CAACG,UAAU;;MAGlD,IAAMC,aAAa,GAAGb,MAAM,CAACc,YAAY,CAACH,kBAAkB,CAAC;MAC7D,OAAOI,IAAI,CAACC,KAAK,CAACH,aAAa,CAAgB;IAClD,EAAC,OAAOI,GAAG,EAAE;MACV,MAAMb,eAAe,CAACc,uBAAuB,CAACD,GAAG,CAAC;IACrD;GACJ;EAED;;AAEG;EACIlB,qBAAW,GAAlB,UAAmBoB,QAAgB,EAAEC,MAAc;IAC/C;;;;AAIG;IACH,IAAMC,cAAc,GAAG,MAAM,CAAC;IAC9B,IAAKD,MAAM,KAAK,CAAC,IAAOE,IAAI,CAACC,GAAG,EAAE,GAAGF,cAAc,GAAKF,QAAQ,GAAGC,MAAQ,EAAE;MACzE,MAAMhB,eAAe,CAACoB,2BAA2B,EAAE;IACtD;GACJ;EACL,OAACzB;AAAD,CAAC","names":["AuthToken","crypto","StringUtils","isEmpty","rawToken","ClientAuthError","createTokenNullOrEmptyError","claims","extractTokenClaims","encodedToken","decodedToken","decodeAuthToken","base64TokenPayload","JWSPayload","base64Decoded","base64Decode","JSON","parse","err","createTokenParsingError","authTime","maxAge","fiveMinuteSkew","Date","now","createMaxAgeTranspiredError"],"sources":["C:\\Azure\\gitauthdemo\\ms-identity-javascript-react-tutorial\\3-Authorization-II\\2-call-api-b2c\\SPA\\node_modules\\@azure\\msal-common\\src\\account\\AuthToken.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { TokenClaims } from \"./TokenClaims\";\nimport { DecodedAuthToken } from \"./DecodedAuthToken\";\nimport { ClientAuthError } from \"../error/ClientAuthError\";\nimport { StringUtils } from \"../utils/StringUtils\";\nimport { ICrypto } from \"../crypto/ICrypto\";\n\n/**\n * JWT Token representation class. Parses token string and generates claims object.\n */\nexport class AuthToken {\n\n    // Raw Token string\n    rawToken: string;\n    // Claims inside token\n    claims: TokenClaims;\n    constructor(rawToken: string, crypto: ICrypto) {\n        if (StringUtils.isEmpty(rawToken)) {\n            throw ClientAuthError.createTokenNullOrEmptyError(rawToken);\n        }\n\n        this.rawToken = rawToken;\n        this.claims = AuthToken.extractTokenClaims(rawToken, crypto);\n    }\n\n    /**\n     * Extract token by decoding the rawToken\n     *\n     * @param encodedToken\n     */\n    static extractTokenClaims(encodedToken: string, crypto: ICrypto): TokenClaims {\n\n        const decodedToken: DecodedAuthToken = StringUtils.decodeAuthToken(encodedToken);\n\n        // token will be decoded to get the username\n        try {\n            const base64TokenPayload = decodedToken.JWSPayload;\n\n            // base64Decode() should throw an error if there is an issue\n            const base64Decoded = crypto.base64Decode(base64TokenPayload);\n            return JSON.parse(base64Decoded) as TokenClaims;\n        } catch (err) {\n            throw ClientAuthError.createTokenParsingError(err);\n        }\n    }\n\n    /**\n     * Determine if the token's max_age has transpired\n     */\n    static checkMaxAge(authTime: number, maxAge: number): void {\n        /*\n         * per https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest\n         * To force an immediate re-authentication: If an app requires that a user re-authenticate prior to access,\n         * provide a value of 0 for the max_age parameter and the AS will force a fresh login.\n         */\n        const fiveMinuteSkew = 300000; // five minutes in milliseconds\n        if ((maxAge === 0) || ((Date.now() - fiveMinuteSkew) > (authTime + maxAge))) {\n            throw ClientAuthError.createMaxAgeTranspiredError();\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}