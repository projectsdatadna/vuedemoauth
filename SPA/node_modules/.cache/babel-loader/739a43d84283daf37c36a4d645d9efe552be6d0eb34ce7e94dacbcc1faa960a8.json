{"ast":null,"code":"/*! @azure/msal-browser v2.31.0 2022-11-07 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { StringUtils, ClientAuthError, ServerError, AuthorityFactory } from '@azure/msal-common';\nimport { BrowserAuthError, BrowserAuthErrorMessage } from '../error/BrowserAuthError.js';\nimport { TemporaryCacheKeys } from '../utils/BrowserConstants.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Abstract class which defines operations for a browser interaction handling class.\r\n */\nvar InteractionHandler = /** @class */function () {\n  function InteractionHandler(authCodeModule, storageImpl, authCodeRequest, logger) {\n    this.authModule = authCodeModule;\n    this.browserStorage = storageImpl;\n    this.authCodeRequest = authCodeRequest;\n    this.logger = logger;\n  }\n  /**\r\n   * Function to handle response parameters from hash.\r\n   * @param locationHash\r\n   */\n  InteractionHandler.prototype.handleCodeResponseFromHash = function (locationHash, state, authority, networkModule) {\n    return __awaiter(this, void 0, void 0, function () {\n      var stateKey, requestState, authCodeResponse;\n      return __generator(this, function (_a) {\n        this.logger.verbose(\"InteractionHandler.handleCodeResponse called\");\n        // Check that location hash isn't empty.\n        if (StringUtils.isEmpty(locationHash)) {\n          throw BrowserAuthError.createEmptyHashError(locationHash);\n        }\n        stateKey = this.browserStorage.generateStateKey(state);\n        requestState = this.browserStorage.getTemporaryCache(stateKey);\n        if (!requestState) {\n          throw ClientAuthError.createStateNotFoundError(\"Cached State\");\n        }\n        try {\n          authCodeResponse = this.authModule.handleFragmentResponse(locationHash, requestState);\n        } catch (e) {\n          if (e instanceof ServerError && e.subError === BrowserAuthErrorMessage.userCancelledError.code) {\n            // Translate server error caused by user closing native prompt to corresponding first class MSAL error\n            throw BrowserAuthError.createUserCancelledError();\n          } else {\n            throw e;\n          }\n        }\n        return [2 /*return*/, this.handleCodeResponseFromServer(authCodeResponse, state, authority, networkModule)];\n      });\n    });\n  };\n  /**\r\n   * Process auth code response from AAD\r\n   * @param authCodeResponse\r\n   * @param state\r\n   * @param authority\r\n   * @param networkModule\r\n   * @returns\r\n   */\n  InteractionHandler.prototype.handleCodeResponseFromServer = function (authCodeResponse, state, authority, networkModule, validateNonce) {\n    if (validateNonce === void 0) {\n      validateNonce = true;\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      var stateKey, requestState, nonceKey, cachedNonce, cachedCcsCred, tokenResponse;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.logger.trace(\"InteractionHandler.handleCodeResponseFromServer called\");\n            stateKey = this.browserStorage.generateStateKey(state);\n            requestState = this.browserStorage.getTemporaryCache(stateKey);\n            if (!requestState) {\n              throw ClientAuthError.createStateNotFoundError(\"Cached State\");\n            }\n            nonceKey = this.browserStorage.generateNonceKey(requestState);\n            cachedNonce = this.browserStorage.getTemporaryCache(nonceKey);\n            // Assign code to request\n            this.authCodeRequest.code = authCodeResponse.code;\n            if (!authCodeResponse.cloud_instance_host_name) return [3 /*break*/, 2];\n            return [4 /*yield*/, this.updateTokenEndpointAuthority(authCodeResponse.cloud_instance_host_name, authority, networkModule)];\n          case 1:\n            _a.sent();\n            _a.label = 2;\n          case 2:\n            // Nonce validation not needed when redirect not involved (e.g. hybrid spa, renewing token via rt)\n            if (validateNonce) {\n              authCodeResponse.nonce = cachedNonce || undefined;\n            }\n            authCodeResponse.state = requestState;\n            // Add CCS parameters if available\n            if (authCodeResponse.client_info) {\n              this.authCodeRequest.clientInfo = authCodeResponse.client_info;\n            } else {\n              cachedCcsCred = this.checkCcsCredentials();\n              if (cachedCcsCred) {\n                this.authCodeRequest.ccsCredential = cachedCcsCred;\n              }\n            }\n            return [4 /*yield*/, this.authModule.acquireToken(this.authCodeRequest, authCodeResponse)];\n          case 3:\n            tokenResponse = _a.sent();\n            this.browserStorage.cleanRequestByState(state);\n            return [2 /*return*/, tokenResponse];\n        }\n      });\n    });\n  };\n  /**\r\n   * Updates authority based on cloudInstanceHostname\r\n   * @param cloudInstanceHostname\r\n   * @param authority\r\n   * @param networkModule\r\n   */\n  InteractionHandler.prototype.updateTokenEndpointAuthority = function (cloudInstanceHostname, authority, networkModule) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cloudInstanceAuthorityUri, cloudInstanceAuthority;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            cloudInstanceAuthorityUri = \"https://\" + cloudInstanceHostname + \"/\" + authority.tenant + \"/\";\n            return [4 /*yield*/, AuthorityFactory.createDiscoveredInstance(cloudInstanceAuthorityUri, networkModule, this.browserStorage, authority.options)];\n          case 1:\n            cloudInstanceAuthority = _a.sent();\n            this.authModule.updateAuthority(cloudInstanceAuthority);\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\r\n   * Looks up ccs creds in the cache\r\n   */\n  InteractionHandler.prototype.checkCcsCredentials = function () {\n    // Look up ccs credential in temp cache\n    var cachedCcsCred = this.browserStorage.getTemporaryCache(TemporaryCacheKeys.CCS_CREDENTIAL, true);\n    if (cachedCcsCred) {\n      try {\n        return JSON.parse(cachedCcsCred);\n      } catch (e) {\n        this.authModule.logger.error(\"Cache credential could not be parsed\");\n        this.authModule.logger.errorPii(\"Cache credential could not be parsed: \" + cachedCcsCred);\n      }\n    }\n    return null;\n  };\n  return InteractionHandler;\n}();\nexport { InteractionHandler };","map":{"version":3,"mappings":";;;;;;;;AAAA;;;;AAaA;;;;EAUI,4BAAYA,cAAuC,EAAEC,WAAgC,EAAEC,eAA+C,EAAEC,MAAc;IAClJ,IAAI,CAACC,UAAU,GAAGJ,cAAc;IAChC,IAAI,CAACK,cAAc,GAAGJ,WAAW;IACjC,IAAI,CAACC,eAAe,GAAGA,eAAe;IACtC,IAAI,CAACC,MAAM,GAAGA,MAAM;;;;;;EAOlBG,uDAA0B,GAAhC,UAAiCC,YAAoB,EAAEC,KAAa,EAAEC,SAAoB,EAAEC,aAA6B;;;;QACrH,IAAI,CAACP,MAAM,CAACQ,OAAO,CAAC,8CAA8C,CAAC;;QAEnE,IAAIC,WAAW,CAACC,OAAO,CAACN,YAAY,CAAC,EAAE;UACnC,MAAMO,gBAAgB,CAACC,oBAAoB,CAACR,YAAY,CAAC;;QAIvDS,QAAQ,GAAG,IAAI,CAACX,cAAc,CAACY,gBAAgB,CAACT,KAAK,CAAC;QACtDU,YAAY,GAAG,IAAI,CAACb,cAAc,CAACc,iBAAiB,CAACH,QAAQ,CAAC;QACpE,IAAI,CAACE,YAAY,EAAE;UACf,MAAME,eAAe,CAACC,wBAAwB,CAAC,cAAc,CAAC;;QAIlE,IAAI;UACAC,gBAAgB,GAAG,IAAI,CAAClB,UAAU,CAACmB,sBAAsB,CAAChB,YAAY,EAAEW,YAAY,CAAC;SACxF,CAAC,OAAOM,CAAC,EAAE;UACR,IAAIA,CAAC,YAAYC,WAAW,IAAID,CAAC,CAACE,QAAQ,KAAKC,uBAAuB,CAACC,kBAAkB,CAACC,IAAI,EAAE;;YAE5F,MAAMf,gBAAgB,CAACgB,wBAAwB,EAAE;WACpD,MAAM;YACH,MAAMN,CAAC;;;QAIf,sBAAO,IAAI,CAACO,4BAA4B,CAACT,gBAAgB,EAAEd,KAAK,EAAEC,SAAS,EAAEC,aAAa,CAAC;;;GAC9F;;;;;;;;;EAUKJ,yDAA4B,GAAlC,UAAmCgB,gBAA0C,EAAEd,KAAa,EAAEC,SAAoB,EAAEC,aAA6B,EAAEsB,aAA6B;IAA7B;MAAAA,oBAA6B;IAAA;;;;;;YAC5K,IAAI,CAAC7B,MAAM,CAAC8B,KAAK,CAAC,wDAAwD,CAAC;YAGrEjB,QAAQ,GAAG,IAAI,CAACX,cAAc,CAACY,gBAAgB,CAACT,KAAK,CAAC;YACtDU,YAAY,GAAG,IAAI,CAACb,cAAc,CAACc,iBAAiB,CAACH,QAAQ,CAAC;YACpE,IAAI,CAACE,YAAY,EAAE;cACf,MAAME,eAAe,CAACC,wBAAwB,CAAC,cAAc,CAAC;;YAI5Da,QAAQ,GAAG,IAAI,CAAC7B,cAAc,CAAC8B,gBAAgB,CAACjB,YAAY,CAAC;YAC7DkB,WAAW,GAAG,IAAI,CAAC/B,cAAc,CAACc,iBAAiB,CAACe,QAAQ,CAAC;;YAGnE,IAAI,CAAChC,eAAe,CAAC2B,IAAI,GAAGP,gBAAgB,CAACO,IAAI;iBAG7CP,gBAAgB,CAACe,wBAAwB,EAAzC;YACA,qBAAM,IAAI,CAACC,4BAA4B,CAAChB,gBAAgB,CAACe,wBAAwB,EAAE5B,SAAS,EAAEC,aAAa,CAAC;;YAA5G6B,SAA4G;;;;YAIhH,IAAIP,aAAa,EAAE;cACfV,gBAAgB,CAACkB,KAAK,GAAGJ,WAAW,IAAIK,SAAS;;YAGrDnB,gBAAgB,CAACd,KAAK,GAAGU,YAAY;;YAGrC,IAAII,gBAAgB,CAACoB,WAAW,EAAE;cAC9B,IAAI,CAACxC,eAAe,CAACyC,UAAU,GAAGrB,gBAAgB,CAACoB,WAAW;aACjE,MAAM;cACGE,aAAa,GAAG,IAAI,CAACC,mBAAmB,EAAE;cAChD,IAAID,aAAa,EAAE;gBACf,IAAI,CAAC1C,eAAe,CAAC4C,aAAa,GAAGF,aAAa;;;YAKpC,qBAAM,IAAI,CAACxC,UAAU,CAAC2C,YAAY,CAAC,IAAI,CAAC7C,eAAe,EAAEoB,gBAAgB,CAAC;;YAA1F0B,aAAa,GAAGT,SAA0E;YAChG,IAAI,CAAClC,cAAc,CAAC4C,mBAAmB,CAACzC,KAAK,CAAC;YAC9C,sBAAOwC,aAAa;QAAC;;;GACxB;;;;;;;EAQe1C,yDAA4B,GAA5C,UAA6C4C,qBAA6B,EAAEzC,SAAoB,EAAEC,aAA6B;;;;;;YACrHyC,yBAAyB,GAAG,aAAWD,qBAAqB,SAAIzC,SAAS,CAAC2C,MAAM,MAAG;YAC1D,qBAAMC,gBAAgB,CAACC,wBAAwB,CAACH,yBAAyB,EAAEzC,aAAa,EAAE,IAAI,CAACL,cAAc,EAAEI,SAAS,CAAC8C,OAAO,CAAC;;YAA1JC,sBAAsB,GAAGjB,SAAiI;YAChK,IAAI,CAACnC,UAAU,CAACqD,eAAe,CAACD,sBAAsB,CAAC;;;;;GAC1D;;;;EAKSlD,gDAAmB,GAA7B;;IAEI,IAAMsC,aAAa,GAAG,IAAI,CAACvC,cAAc,CAACc,iBAAiB,CAACuC,kBAAkB,CAACC,cAAc,EAAE,IAAI,CAAC;IACpG,IAAIf,aAAa,EAAE;MACf,IAAI;QACA,OAAOgB,IAAI,CAACC,KAAK,CAACjB,aAAa,CAAkB;OACpD,CAAC,OAAOpB,CAAC,EAAE;QACR,IAAI,CAACpB,UAAU,CAACD,MAAM,CAAC2D,KAAK,CAAC,sCAAsC,CAAC;QACpE,IAAI,CAAC1D,UAAU,CAACD,MAAM,CAAC4D,QAAQ,CAAC,2CAAyCnB,aAAe,CAAC;;;IAGjG,OAAO,IAAI;GACd;EACL,yBAAC;AAAD,CAAC","names":["authCodeModule","storageImpl","authCodeRequest","logger","authModule","browserStorage","InteractionHandler","locationHash","state","authority","networkModule","verbose","StringUtils","isEmpty","BrowserAuthError","createEmptyHashError","stateKey","generateStateKey","requestState","getTemporaryCache","ClientAuthError","createStateNotFoundError","authCodeResponse","handleFragmentResponse","e","ServerError","subError","BrowserAuthErrorMessage","userCancelledError","code","createUserCancelledError","handleCodeResponseFromServer","validateNonce","trace","nonceKey","generateNonceKey","cachedNonce","cloud_instance_host_name","updateTokenEndpointAuthority","_a","nonce","undefined","client_info","clientInfo","cachedCcsCred","checkCcsCredentials","ccsCredential","acquireToken","tokenResponse","cleanRequestByState","cloudInstanceHostname","cloudInstanceAuthorityUri","tenant","AuthorityFactory","createDiscoveredInstance","options","cloudInstanceAuthority","updateAuthority","TemporaryCacheKeys","CCS_CREDENTIAL","JSON","parse","error","errorPii"],"sources":["C:\\Azure\\gitauthdemo\\ms-identity-javascript-react-tutorial\\3-Authorization-II\\2-call-api-b2c\\SPA\\node_modules\\@azure\\msal-browser\\src\\interaction_handler\\InteractionHandler.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AuthorizationCodePayload , StringUtils, CommonAuthorizationCodeRequest, AuthenticationResult, AuthorizationCodeClient, AuthorityFactory, Authority, INetworkModule, ClientAuthError, CcsCredential, Logger, ServerError } from \"@azure/msal-common\";\n\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\nimport { BrowserAuthError, BrowserAuthErrorMessage } from \"../error/BrowserAuthError\";\nimport { TemporaryCacheKeys } from \"../utils/BrowserConstants\";\n\nexport type InteractionParams = {};\n\n/**\n * Abstract class which defines operations for a browser interaction handling class.\n */\nexport class InteractionHandler {\n\n    protected authModule: AuthorizationCodeClient;\n    protected browserStorage: BrowserCacheManager;\n    protected authCodeRequest: CommonAuthorizationCodeRequest;\n    protected logger: Logger;\n\n    constructor(authCodeModule: AuthorizationCodeClient, storageImpl: BrowserCacheManager, authCodeRequest: CommonAuthorizationCodeRequest, logger: Logger) {\n        this.authModule = authCodeModule;\n        this.browserStorage = storageImpl;\n        this.authCodeRequest = authCodeRequest;\n        this.logger = logger;\n    }\n\n    /**\n     * Function to handle response parameters from hash.\n     * @param locationHash\n     */\n    async handleCodeResponseFromHash(locationHash: string, state: string, authority: Authority, networkModule: INetworkModule): Promise<AuthenticationResult> {\n        this.logger.verbose(\"InteractionHandler.handleCodeResponse called\");\n        // Check that location hash isn't empty.\n        if (StringUtils.isEmpty(locationHash)) {\n            throw BrowserAuthError.createEmptyHashError(locationHash);\n        }\n\n        // Handle code response.\n        const stateKey = this.browserStorage.generateStateKey(state);\n        const requestState = this.browserStorage.getTemporaryCache(stateKey);\n        if (!requestState) {\n            throw ClientAuthError.createStateNotFoundError(\"Cached State\");\n        }\n\n        let authCodeResponse;\n        try {\n            authCodeResponse = this.authModule.handleFragmentResponse(locationHash, requestState);\n        } catch (e) {\n            if (e instanceof ServerError && e.subError === BrowserAuthErrorMessage.userCancelledError.code) {\n                // Translate server error caused by user closing native prompt to corresponding first class MSAL error\n                throw BrowserAuthError.createUserCancelledError();\n            } else {\n                throw e;\n            }\n        }\n\n        return this.handleCodeResponseFromServer(authCodeResponse, state, authority, networkModule);\n    }\n\n    /**\n     * Process auth code response from AAD\n     * @param authCodeResponse \n     * @param state \n     * @param authority \n     * @param networkModule \n     * @returns \n     */\n    async handleCodeResponseFromServer(authCodeResponse: AuthorizationCodePayload, state: string, authority: Authority, networkModule: INetworkModule, validateNonce: boolean = true): Promise<AuthenticationResult> {\n        this.logger.trace(\"InteractionHandler.handleCodeResponseFromServer called\");\n\n        // Handle code response.\n        const stateKey = this.browserStorage.generateStateKey(state);\n        const requestState = this.browserStorage.getTemporaryCache(stateKey);\n        if (!requestState) {\n            throw ClientAuthError.createStateNotFoundError(\"Cached State\");\n        }\n        \n        // Get cached items\n        const nonceKey = this.browserStorage.generateNonceKey(requestState);\n        const cachedNonce = this.browserStorage.getTemporaryCache(nonceKey);\n\n        // Assign code to request\n        this.authCodeRequest.code = authCodeResponse.code;\n\n        // Check for new cloud instance\n        if (authCodeResponse.cloud_instance_host_name) {\n            await this.updateTokenEndpointAuthority(authCodeResponse.cloud_instance_host_name, authority, networkModule);\n        }\n\n        // Nonce validation not needed when redirect not involved (e.g. hybrid spa, renewing token via rt)\n        if (validateNonce) {\n            authCodeResponse.nonce = cachedNonce || undefined;\n        }\n        \n        authCodeResponse.state = requestState;\n\n        // Add CCS parameters if available\n        if (authCodeResponse.client_info) {\n            this.authCodeRequest.clientInfo = authCodeResponse.client_info;\n        } else {\n            const cachedCcsCred = this.checkCcsCredentials();\n            if (cachedCcsCred) {\n                this.authCodeRequest.ccsCredential = cachedCcsCred;\n            }\n        }\n\n        // Acquire token with retrieved code.\n        const tokenResponse = await this.authModule.acquireToken(this.authCodeRequest, authCodeResponse);\n        this.browserStorage.cleanRequestByState(state);\n        return tokenResponse;\n    }\n\n    /**\n     * Updates authority based on cloudInstanceHostname\n     * @param cloudInstanceHostname \n     * @param authority \n     * @param networkModule \n     */\n    protected async updateTokenEndpointAuthority(cloudInstanceHostname: string, authority: Authority, networkModule: INetworkModule): Promise<void> {\n        const cloudInstanceAuthorityUri = `https://${cloudInstanceHostname}/${authority.tenant}/`;\n        const cloudInstanceAuthority = await AuthorityFactory.createDiscoveredInstance(cloudInstanceAuthorityUri, networkModule, this.browserStorage, authority.options);\n        this.authModule.updateAuthority(cloudInstanceAuthority);\n    }\n\n    /**\n     * Looks up ccs creds in the cache\n     */\n    protected checkCcsCredentials(): CcsCredential | null {\n        // Look up ccs credential in temp cache\n        const cachedCcsCred = this.browserStorage.getTemporaryCache(TemporaryCacheKeys.CCS_CREDENTIAL, true);\n        if (cachedCcsCred) {\n            try {\n                return JSON.parse(cachedCcsCred) as CcsCredential;\n            } catch (e) {\n                this.authModule.logger.error(\"Cache credential could not be parsed\");\n                this.authModule.logger.errorPii(`Cache credential could not be parsed: ${cachedCcsCred}`);\n            }\n        }\n        return null;\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}