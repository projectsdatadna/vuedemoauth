{"ast":null,"code":"/*! @azure/msal-browser v2.31.0 2022-11-07 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BrowserStringUtils } from '../utils/BrowserStringUtils.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { ModernBrowserCrypto } from './ModernBrowserCrypto.js';\nimport { MsrBrowserCrypto } from './MsrBrowserCrypto.js';\nimport { MsBrowserCrypto } from './MsBrowserCrypto.js';\nimport { BrowserConfigurationAuthError } from '../error/BrowserConfigurationAuthError.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * See here for more info on RsaHashedKeyGenParams: https://developer.mozilla.org/en-US/docs/Web/API/RsaHashedKeyGenParams\r\n */\n// RSA KeyGen Algorithm\nvar PKCS1_V15_KEYGEN_ALG = \"RSASSA-PKCS1-v1_5\";\n// SHA-256 hashing algorithm\nvar S256_HASH_ALG = \"SHA-256\";\n// MOD length for PoP tokens\nvar MODULUS_LENGTH = 2048;\n// Public Exponent\nvar PUBLIC_EXPONENT = new Uint8Array([0x01, 0x00, 0x01]);\n/**\r\n * This class implements functions used by the browser library to perform cryptography operations such as\r\n * hashing and encoding. It also has helper functions to validate the availability of specific APIs.\r\n */\nvar BrowserCrypto = /** @class */function () {\n  function BrowserCrypto(logger, cryptoOptions) {\n    var _a, _b;\n    this.logger = logger;\n    this.cryptoOptions = cryptoOptions;\n    if (this.hasBrowserCrypto()) {\n      // Use standard modern web crypto if available\n      this.logger.verbose(\"BrowserCrypto: modern crypto interface available\");\n      this.subtleCrypto = new ModernBrowserCrypto();\n    } else if (this.hasIECrypto()) {\n      // For IE11, use msCrypto interface\n      this.logger.verbose(\"BrowserCrypto: MS crypto interface available\");\n      this.subtleCrypto = new MsBrowserCrypto();\n    } else if (this.hasMsrCrypto() && ((_a = this.cryptoOptions) === null || _a === void 0 ? void 0 : _a.useMsrCrypto)) {\n      // For other browsers, use MSR Crypto if found\n      this.logger.verbose(\"BrowserCrypto: MSR crypto interface available\");\n      this.subtleCrypto = new MsrBrowserCrypto();\n    } else {\n      if (this.hasMsrCrypto()) {\n        this.logger.info(\"BrowserCrypto: MSR Crypto interface available but system.cryptoOptions.useMsrCrypto not enabled\");\n      }\n      this.logger.error(\"BrowserCrypto: No crypto interfaces available.\");\n      throw BrowserAuthError.createCryptoNotAvailableError(\"Browser crypto, msCrypto, or msrCrypto interfaces not available.\");\n    }\n    // Mainly needed for MSR Crypto: https://github.com/microsoft/MSR-JavaScript-Crypto#random-number-generator-prng\n    if (this.subtleCrypto.initPrng) {\n      this.logger.verbose(\"BrowserCrypto: Interface requires entropy\");\n      if (!((_b = this.cryptoOptions) === null || _b === void 0 ? void 0 : _b.entropy)) {\n        this.logger.error(\"BrowserCrypto: Interface requires entropy but none provided.\");\n        throw BrowserConfigurationAuthError.createEntropyNotProvided();\n      }\n      this.logger.verbose(\"BrowserCrypto: Entropy provided\");\n      this.subtleCrypto.initPrng(this.cryptoOptions.entropy);\n    }\n    this.keygenAlgorithmOptions = {\n      name: PKCS1_V15_KEYGEN_ALG,\n      hash: S256_HASH_ALG,\n      modulusLength: MODULUS_LENGTH,\n      publicExponent: PUBLIC_EXPONENT\n    };\n  }\n  /**\r\n   * Check whether IE crypto or other browser cryptography is available.\r\n   */\n  BrowserCrypto.prototype.hasIECrypto = function () {\n    return \"msCrypto\" in window;\n  };\n  /**\r\n   * Check whether browser crypto is available.\r\n   */\n  BrowserCrypto.prototype.hasBrowserCrypto = function () {\n    return \"crypto\" in window;\n  };\n  /**\r\n   * Check whether MSR crypto polyfill is available\r\n   */\n  BrowserCrypto.prototype.hasMsrCrypto = function () {\n    return \"msrCrypto\" in window;\n  };\n  /**\r\n   * Returns a sha-256 hash of the given dataString as an ArrayBuffer.\r\n   * @param dataString\r\n   */\n  BrowserCrypto.prototype.sha256Digest = function (dataString) {\n    return __awaiter(this, void 0, void 0, function () {\n      var data;\n      return __generator(this, function (_a) {\n        data = BrowserStringUtils.stringToUtf8Arr(dataString);\n        // MSR Crypto wants object with name property, instead of string\n        return [2 /*return*/, this.subtleCrypto.digest({\n          name: S256_HASH_ALG\n        }, data)];\n      });\n    });\n  };\n  /**\r\n   * Populates buffer with cryptographically random values.\r\n   * @param dataBuffer\r\n   */\n  BrowserCrypto.prototype.getRandomValues = function (dataBuffer) {\n    return this.subtleCrypto.getRandomValues(dataBuffer);\n  };\n  /**\r\n   * Generates a keypair based on current keygen algorithm config.\r\n   * @param extractable\r\n   * @param usages\r\n   */\n  BrowserCrypto.prototype.generateKeyPair = function (extractable, usages) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, this.subtleCrypto.generateKey(this.keygenAlgorithmOptions, extractable, usages)];\n      });\n    });\n  };\n  /**\r\n   * Export key as Json Web Key (JWK)\r\n   * @param key\r\n   * @param format\r\n   */\n  BrowserCrypto.prototype.exportJwk = function (key) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, this.subtleCrypto.exportKey(key)];\n      });\n    });\n  };\n  /**\r\n   * Imports key as Json Web Key (JWK), can set extractable and usages.\r\n   * @param key\r\n   * @param format\r\n   * @param extractable\r\n   * @param usages\r\n   */\n  BrowserCrypto.prototype.importJwk = function (key, extractable, usages) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, this.subtleCrypto.importKey(key, this.keygenAlgorithmOptions, extractable, usages)];\n      });\n    });\n  };\n  /**\r\n   * Signs given data with given key\r\n   * @param key\r\n   * @param data\r\n   */\n  BrowserCrypto.prototype.sign = function (key, data) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, this.subtleCrypto.sign(this.keygenAlgorithmOptions, key, data)];\n      });\n    });\n  };\n  return BrowserCrypto;\n}();\nexport { BrowserCrypto };","map":{"version":3,"mappings":"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","names":["PKCS1_V15_KEYGEN_ALG","S256_HASH_ALG","MODULUS_LENGTH","PUBLIC_EXPONENT","Uint8Array","logger","cryptoOptions","hasBrowserCrypto","verbose","subtleCrypto","ModernBrowserCrypto","hasIECrypto","MsBrowserCrypto","hasMsrCrypto","useMsrCrypto","MsrBrowserCrypto","info","error","BrowserAuthError","createCryptoNotAvailableError","initPrng","entropy","BrowserConfigurationAuthError","createEntropyNotProvided","keygenAlgorithmOptions","name","hash","modulusLength","publicExponent","BrowserCrypto","window","dataString","data","BrowserStringUtils","stringToUtf8Arr","digest","dataBuffer","getRandomValues","extractable","usages","generateKey","key","exportKey","importKey","sign"],"sources":["C:\\Azure\\gitauthdemo\\ms-identity-javascript-react-tutorial\\3-Authorization-II\\2-call-api-b2c\\SPA\\node_modules\\@azure\\msal-browser\\src\\crypto\\BrowserCrypto.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { BrowserStringUtils } from \"../utils/BrowserStringUtils\";\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\nimport { ISubtleCrypto } from \"./ISubtleCrypto\";\nimport { ModernBrowserCrypto } from \"./ModernBrowserCrypto\";\nimport { MsrBrowserCrypto } from \"./MsrBrowserCrypto\";\nimport { MsBrowserCrypto } from \"./MsBrowserCrypto\";\nimport { Logger } from \"@azure/msal-common\";\nimport { BrowserConfigurationAuthError } from \"../error/BrowserConfigurationAuthError\";\nimport { CryptoOptions } from \"../config/Configuration\";\n/**\n * See here for more info on RsaHashedKeyGenParams: https://developer.mozilla.org/en-US/docs/Web/API/RsaHashedKeyGenParams\n */\n// RSA KeyGen Algorithm\nconst PKCS1_V15_KEYGEN_ALG = \"RSASSA-PKCS1-v1_5\";\n// SHA-256 hashing algorithm\nconst S256_HASH_ALG = \"SHA-256\";\n// MOD length for PoP tokens\nconst MODULUS_LENGTH = 2048;\n// Public Exponent\nconst PUBLIC_EXPONENT: Uint8Array = new Uint8Array([0x01, 0x00, 0x01]);\n\n/**\n * This class implements functions used by the browser library to perform cryptography operations such as\n * hashing and encoding. It also has helper functions to validate the availability of specific APIs.\n */\nexport class BrowserCrypto {\n\n    private keygenAlgorithmOptions: RsaHashedKeyGenParams;\n    private subtleCrypto: ISubtleCrypto;\n    private logger: Logger;\n    private cryptoOptions?: CryptoOptions;\n\n    constructor(logger: Logger, cryptoOptions?: CryptoOptions) {\n        this.logger = logger;\n        this.cryptoOptions = cryptoOptions;\n\n        if (this.hasBrowserCrypto()) {\n            // Use standard modern web crypto if available\n            this.logger.verbose(\"BrowserCrypto: modern crypto interface available\");\n            this.subtleCrypto = new ModernBrowserCrypto();\n        } else if (this.hasIECrypto()) {\n            // For IE11, use msCrypto interface\n            this.logger.verbose(\"BrowserCrypto: MS crypto interface available\");\n            this.subtleCrypto = new MsBrowserCrypto();\n        } else if (this.hasMsrCrypto() && this.cryptoOptions?.useMsrCrypto) {\n            // For other browsers, use MSR Crypto if found\n            this.logger.verbose(\"BrowserCrypto: MSR crypto interface available\");\n            this.subtleCrypto = new MsrBrowserCrypto();\n        } else {\n            if (this.hasMsrCrypto()) {\n                this.logger.info(\"BrowserCrypto: MSR Crypto interface available but system.cryptoOptions.useMsrCrypto not enabled\");\n            }\n            this.logger.error(\"BrowserCrypto: No crypto interfaces available.\");\n            throw BrowserAuthError.createCryptoNotAvailableError(\"Browser crypto, msCrypto, or msrCrypto interfaces not available.\");\n        }\n\n        // Mainly needed for MSR Crypto: https://github.com/microsoft/MSR-JavaScript-Crypto#random-number-generator-prng\n        if (this.subtleCrypto.initPrng) {\n            this.logger.verbose(\"BrowserCrypto: Interface requires entropy\");\n\n            if (!this.cryptoOptions?.entropy) {\n                this.logger.error(\"BrowserCrypto: Interface requires entropy but none provided.\");\n                throw BrowserConfigurationAuthError.createEntropyNotProvided();\n            }\n\n            this.logger.verbose(\"BrowserCrypto: Entropy provided\");\n            this.subtleCrypto.initPrng(this.cryptoOptions.entropy);\n        }\n\n        this.keygenAlgorithmOptions = {\n            name: PKCS1_V15_KEYGEN_ALG,\n            hash: S256_HASH_ALG,\n            modulusLength: MODULUS_LENGTH,\n            publicExponent: PUBLIC_EXPONENT\n        };\n    }\n\n    /**\n     * Check whether IE crypto or other browser cryptography is available.\n     */\n    private hasIECrypto(): boolean {\n        return \"msCrypto\" in window;\n    }\n\n    /**\n     * Check whether browser crypto is available.\n     */\n    private hasBrowserCrypto(): boolean {\n        return \"crypto\" in window;\n    }\n\n    /**\n     * Check whether MSR crypto polyfill is available\n     */\n    private hasMsrCrypto(): boolean {\n        return \"msrCrypto\" in window;\n    }\n\n    /**\n     * Returns a sha-256 hash of the given dataString as an ArrayBuffer.\n     * @param dataString \n     */\n    async sha256Digest(dataString: string): Promise<ArrayBuffer> {\n        const data = BrowserStringUtils.stringToUtf8Arr(dataString);\n        // MSR Crypto wants object with name property, instead of string\n        return this.subtleCrypto.digest({ name: S256_HASH_ALG }, data);\n    }\n\n    /**\n     * Populates buffer with cryptographically random values.\n     * @param dataBuffer \n     */\n    getRandomValues(dataBuffer: Uint8Array): Uint8Array {\n        return this.subtleCrypto.getRandomValues(dataBuffer);\n    }\n\n    /**\n     * Generates a keypair based on current keygen algorithm config.\n     * @param extractable \n     * @param usages \n     */\n    async generateKeyPair(extractable: boolean, usages: Array<KeyUsage>): Promise<CryptoKeyPair> {\n        return this.subtleCrypto.generateKey(this.keygenAlgorithmOptions, extractable, usages);\n    }\n\n    /**\n     * Export key as Json Web Key (JWK)\n     * @param key \n     * @param format \n     */\n    async exportJwk(key: CryptoKey): Promise<JsonWebKey> {\n        return this.subtleCrypto.exportKey(key);\n    }\n\n    /**\n     * Imports key as Json Web Key (JWK), can set extractable and usages.\n     * @param key \n     * @param format \n     * @param extractable \n     * @param usages \n     */\n    async importJwk(key: JsonWebKey, extractable: boolean, usages: Array<KeyUsage>): Promise<CryptoKey> {\n        return this.subtleCrypto.importKey(key, this.keygenAlgorithmOptions, extractable, usages);\n    }\n\n    /**\n     * Signs given data with given key\n     * @param key \n     * @param data \n     */\n    async sign(key: CryptoKey, data: ArrayBuffer): Promise<ArrayBuffer> {\n        return this.subtleCrypto.sign(this.keygenAlgorithmOptions, key, data);\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}