{"ast":null,"code":"/*! @azure/msal-common v8.0.0 2022-11-07 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { buildClientInfo } from '../account/ClientInfo.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { ServerError } from '../error/ServerError.js';\nimport { AuthToken } from '../account/AuthToken.js';\nimport { ScopeSet } from '../request/ScopeSet.js';\nimport { AccountEntity } from '../cache/entities/AccountEntity.js';\nimport { AuthorityType } from '../authority/AuthorityType.js';\nimport { IdTokenEntity } from '../cache/entities/IdTokenEntity.js';\nimport { AccessTokenEntity } from '../cache/entities/AccessTokenEntity.js';\nimport { RefreshTokenEntity } from '../cache/entities/RefreshTokenEntity.js';\nimport { InteractionRequiredAuthError } from '../error/InteractionRequiredAuthError.js';\nimport { CacheRecord } from '../cache/entities/CacheRecord.js';\nimport { ProtocolUtils } from '../utils/ProtocolUtils.js';\nimport { Constants, AuthenticationScheme, THE_FAMILY_ID } from '../utils/Constants.js';\nimport { PopTokenGenerator } from '../crypto/PopTokenGenerator.js';\nimport { AppMetadataEntity } from '../cache/entities/AppMetadataEntity.js';\nimport { TokenCacheContext } from '../cache/persistence/TokenCacheContext.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Class that handles response parsing.\r\n */\nvar ResponseHandler = /** @class */function () {\n  function ResponseHandler(clientId, cacheStorage, cryptoObj, logger, serializableCache, persistencePlugin) {\n    this.clientId = clientId;\n    this.cacheStorage = cacheStorage;\n    this.cryptoObj = cryptoObj;\n    this.logger = logger;\n    this.serializableCache = serializableCache;\n    this.persistencePlugin = persistencePlugin;\n  }\n  /**\r\n   * Function which validates server authorization code response.\r\n   * @param serverResponseHash\r\n   * @param cachedState\r\n   * @param cryptoObj\r\n   */\n  ResponseHandler.prototype.validateServerAuthorizationCodeResponse = function (serverResponseHash, cachedState, cryptoObj) {\n    if (!serverResponseHash.state || !cachedState) {\n      throw !serverResponseHash.state ? ClientAuthError.createStateNotFoundError(\"Server State\") : ClientAuthError.createStateNotFoundError(\"Cached State\");\n    }\n    if (decodeURIComponent(serverResponseHash.state) !== decodeURIComponent(cachedState)) {\n      throw ClientAuthError.createStateMismatchError();\n    }\n    // Check for error\n    if (serverResponseHash.error || serverResponseHash.error_description || serverResponseHash.suberror) {\n      if (InteractionRequiredAuthError.isInteractionRequiredError(serverResponseHash.error, serverResponseHash.error_description, serverResponseHash.suberror)) {\n        throw new InteractionRequiredAuthError(serverResponseHash.error || Constants.EMPTY_STRING, serverResponseHash.error_description, serverResponseHash.suberror);\n      }\n      throw new ServerError(serverResponseHash.error || Constants.EMPTY_STRING, serverResponseHash.error_description, serverResponseHash.suberror);\n    }\n    if (serverResponseHash.client_info) {\n      buildClientInfo(serverResponseHash.client_info, cryptoObj);\n    }\n  };\n  /**\r\n   * Function which validates server authorization token response.\r\n   * @param serverResponse\r\n   */\n  ResponseHandler.prototype.validateTokenResponse = function (serverResponse) {\n    // Check for error\n    if (serverResponse.error || serverResponse.error_description || serverResponse.suberror) {\n      if (InteractionRequiredAuthError.isInteractionRequiredError(serverResponse.error, serverResponse.error_description, serverResponse.suberror)) {\n        throw new InteractionRequiredAuthError(serverResponse.error, serverResponse.error_description, serverResponse.suberror);\n      }\n      var errString = serverResponse.error_codes + \" - [\" + serverResponse.timestamp + \"]: \" + serverResponse.error_description + \" - Correlation ID: \" + serverResponse.correlation_id + \" - Trace ID: \" + serverResponse.trace_id;\n      throw new ServerError(serverResponse.error, errString, serverResponse.suberror);\n    }\n  };\n  /**\r\n   * Returns a constructed token response based on given string. Also manages the cache updates and cleanups.\r\n   * @param serverTokenResponse\r\n   * @param authority\r\n   */\n  ResponseHandler.prototype.handleServerTokenResponse = function (serverTokenResponse, authority, reqTimestamp, request, authCodePayload, userAssertionHash, handlingRefreshTokenResponse, forceCacheRefreshTokenResponse, serverRequestId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var idTokenObj, authTime, requestStateObj, cacheRecord, cacheContext, key, account;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (serverTokenResponse.id_token) {\n              idTokenObj = new AuthToken(serverTokenResponse.id_token || Constants.EMPTY_STRING, this.cryptoObj);\n              // token nonce check (TODO: Add a warning if no nonce is given?)\n              if (authCodePayload && !StringUtils.isEmpty(authCodePayload.nonce)) {\n                if (idTokenObj.claims.nonce !== authCodePayload.nonce) {\n                  throw ClientAuthError.createNonceMismatchError();\n                }\n              }\n              // token max_age check\n              if (request.maxAge || request.maxAge === 0) {\n                authTime = idTokenObj.claims.auth_time;\n                if (!authTime) {\n                  throw ClientAuthError.createAuthTimeNotFoundError();\n                }\n                AuthToken.checkMaxAge(authTime, request.maxAge);\n              }\n            }\n            // generate homeAccountId\n            this.homeAccountIdentifier = AccountEntity.generateHomeAccountId(serverTokenResponse.client_info || Constants.EMPTY_STRING, authority.authorityType, this.logger, this.cryptoObj, idTokenObj);\n            if (!!authCodePayload && !!authCodePayload.state) {\n              requestStateObj = ProtocolUtils.parseRequestState(this.cryptoObj, authCodePayload.state);\n            }\n            // Add keyId from request to serverTokenResponse if defined\n            serverTokenResponse.key_id = serverTokenResponse.key_id || request.sshKid || undefined;\n            cacheRecord = this.generateCacheRecord(serverTokenResponse, authority, reqTimestamp, request, idTokenObj, userAssertionHash, authCodePayload);\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1,, 5, 8]);\n            if (!(this.persistencePlugin && this.serializableCache)) return [3 /*break*/, 3];\n            this.logger.verbose(\"Persistence enabled, calling beforeCacheAccess\");\n            cacheContext = new TokenCacheContext(this.serializableCache, true);\n            return [4 /*yield*/, this.persistencePlugin.beforeCacheAccess(cacheContext)];\n          case 2:\n            _a.sent();\n            _a.label = 3;\n          case 3:\n            /*\r\n             * When saving a refreshed tokens to the cache, it is expected that the account that was used is present in the cache.\r\n             * If not present, we should return null, as it's the case that another application called removeAccount in between\r\n             * the calls to getAllAccounts and acquireTokenSilent. We should not overwrite that removal, unless explicitly flagged by\r\n             * the developer, as in the case of refresh token flow used in ADAL Node to MSAL Node migration.\r\n             */\n            if (handlingRefreshTokenResponse && !forceCacheRefreshTokenResponse && cacheRecord.account) {\n              key = cacheRecord.account.generateAccountKey();\n              account = this.cacheStorage.getAccount(key);\n              if (!account) {\n                this.logger.warning(\"Account used to refresh tokens not in persistence, refreshed tokens will not be stored in the cache\");\n                return [2 /*return*/, ResponseHandler.generateAuthenticationResult(this.cryptoObj, authority, cacheRecord, false, request, idTokenObj, requestStateObj, undefined, serverRequestId)];\n              }\n            }\n            return [4 /*yield*/, this.cacheStorage.saveCacheRecord(cacheRecord)];\n          case 4:\n            _a.sent();\n            return [3 /*break*/, 8];\n          case 5:\n            if (!(this.persistencePlugin && this.serializableCache && cacheContext)) return [3 /*break*/, 7];\n            this.logger.verbose(\"Persistence enabled, calling afterCacheAccess\");\n            return [4 /*yield*/, this.persistencePlugin.afterCacheAccess(cacheContext)];\n          case 6:\n            _a.sent();\n            _a.label = 7;\n          case 7:\n            return [7 /*endfinally*/];\n          case 8:\n            return [2 /*return*/, ResponseHandler.generateAuthenticationResult(this.cryptoObj, authority, cacheRecord, false, request, idTokenObj, requestStateObj, serverTokenResponse.spa_code, serverRequestId)];\n        }\n      });\n    });\n  };\n  /**\r\n   * Generates CacheRecord\r\n   * @param serverTokenResponse\r\n   * @param idTokenObj\r\n   * @param authority\r\n   */\n  ResponseHandler.prototype.generateCacheRecord = function (serverTokenResponse, authority, reqTimestamp, request, idTokenObj, userAssertionHash, authCodePayload) {\n    var env = authority.getPreferredCache();\n    if (StringUtils.isEmpty(env)) {\n      throw ClientAuthError.createInvalidCacheEnvironmentError();\n    }\n    // IdToken: non AAD scenarios can have empty realm\n    var cachedIdToken;\n    var cachedAccount;\n    if (!StringUtils.isEmpty(serverTokenResponse.id_token) && !!idTokenObj) {\n      cachedIdToken = IdTokenEntity.createIdTokenEntity(this.homeAccountIdentifier, env, serverTokenResponse.id_token || Constants.EMPTY_STRING, this.clientId, idTokenObj.claims.tid || Constants.EMPTY_STRING);\n      cachedAccount = this.generateAccountEntity(serverTokenResponse, idTokenObj, authority, authCodePayload);\n    }\n    // AccessToken\n    var cachedAccessToken = null;\n    if (!StringUtils.isEmpty(serverTokenResponse.access_token)) {\n      // If scopes not returned in server response, use request scopes\n      var responseScopes = serverTokenResponse.scope ? ScopeSet.fromString(serverTokenResponse.scope) : new ScopeSet(request.scopes || []);\n      /*\r\n       * Use timestamp calculated before request\r\n       * Server may return timestamps as strings, parse to numbers if so.\r\n       */\n      var expiresIn = (typeof serverTokenResponse.expires_in === \"string\" ? parseInt(serverTokenResponse.expires_in, 10) : serverTokenResponse.expires_in) || 0;\n      var extExpiresIn = (typeof serverTokenResponse.ext_expires_in === \"string\" ? parseInt(serverTokenResponse.ext_expires_in, 10) : serverTokenResponse.ext_expires_in) || 0;\n      var refreshIn = (typeof serverTokenResponse.refresh_in === \"string\" ? parseInt(serverTokenResponse.refresh_in, 10) : serverTokenResponse.refresh_in) || undefined;\n      var tokenExpirationSeconds = reqTimestamp + expiresIn;\n      var extendedTokenExpirationSeconds = tokenExpirationSeconds + extExpiresIn;\n      var refreshOnSeconds = refreshIn && refreshIn > 0 ? reqTimestamp + refreshIn : undefined;\n      // non AAD scenarios can have empty realm\n      cachedAccessToken = AccessTokenEntity.createAccessTokenEntity(this.homeAccountIdentifier, env, serverTokenResponse.access_token || Constants.EMPTY_STRING, this.clientId, idTokenObj ? idTokenObj.claims.tid || Constants.EMPTY_STRING : authority.tenant, responseScopes.printScopes(), tokenExpirationSeconds, extendedTokenExpirationSeconds, this.cryptoObj, refreshOnSeconds, serverTokenResponse.token_type, userAssertionHash, serverTokenResponse.key_id, request.claims, request.requestedClaimsHash);\n    }\n    // refreshToken\n    var cachedRefreshToken = null;\n    if (!StringUtils.isEmpty(serverTokenResponse.refresh_token)) {\n      cachedRefreshToken = RefreshTokenEntity.createRefreshTokenEntity(this.homeAccountIdentifier, env, serverTokenResponse.refresh_token || Constants.EMPTY_STRING, this.clientId, serverTokenResponse.foci, userAssertionHash);\n    }\n    // appMetadata\n    var cachedAppMetadata = null;\n    if (!StringUtils.isEmpty(serverTokenResponse.foci)) {\n      cachedAppMetadata = AppMetadataEntity.createAppMetadataEntity(this.clientId, env, serverTokenResponse.foci);\n    }\n    return new CacheRecord(cachedAccount, cachedIdToken, cachedAccessToken, cachedRefreshToken, cachedAppMetadata);\n  };\n  /**\r\n   * Generate Account\r\n   * @param serverTokenResponse\r\n   * @param idToken\r\n   * @param authority\r\n   */\n  ResponseHandler.prototype.generateAccountEntity = function (serverTokenResponse, idToken, authority, authCodePayload) {\n    var authorityType = authority.authorityType;\n    var cloudGraphHostName = authCodePayload ? authCodePayload.cloud_graph_host_name : Constants.EMPTY_STRING;\n    var msGraphhost = authCodePayload ? authCodePayload.msgraph_host : Constants.EMPTY_STRING;\n    // ADFS does not require client_info in the response\n    if (authorityType === AuthorityType.Adfs) {\n      this.logger.verbose(\"Authority type is ADFS, creating ADFS account\");\n      return AccountEntity.createGenericAccount(this.homeAccountIdentifier, idToken, authority, cloudGraphHostName, msGraphhost);\n    }\n    // This fallback applies to B2C as well as they fall under an AAD account type.\n    if (StringUtils.isEmpty(serverTokenResponse.client_info) && authority.protocolMode === \"AAD\") {\n      throw ClientAuthError.createClientInfoEmptyError();\n    }\n    return serverTokenResponse.client_info ? AccountEntity.createAccount(serverTokenResponse.client_info, this.homeAccountIdentifier, idToken, authority, cloudGraphHostName, msGraphhost) : AccountEntity.createGenericAccount(this.homeAccountIdentifier, idToken, authority, cloudGraphHostName, msGraphhost);\n  };\n  /**\r\n   * Creates an @AuthenticationResult from @CacheRecord , @IdToken , and a boolean that states whether or not the result is from cache.\r\n   *\r\n   * Optionally takes a state string that is set as-is in the response.\r\n   *\r\n   * @param cacheRecord\r\n   * @param idTokenObj\r\n   * @param fromTokenCache\r\n   * @param stateString\r\n   */\n  ResponseHandler.generateAuthenticationResult = function (cryptoObj, authority, cacheRecord, fromTokenCache, request, idTokenObj, requestState, code, requestId) {\n    var _a, _b, _c;\n    return __awaiter(this, void 0, void 0, function () {\n      var accessToken, responseScopes, expiresOn, extExpiresOn, familyId, popTokenGenerator, _d, secret, keyId, uid, tid;\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            accessToken = Constants.EMPTY_STRING;\n            responseScopes = [];\n            expiresOn = null;\n            familyId = Constants.EMPTY_STRING;\n            if (!cacheRecord.accessToken) return [3 /*break*/, 4];\n            if (!(cacheRecord.accessToken.tokenType === AuthenticationScheme.POP)) return [3 /*break*/, 2];\n            popTokenGenerator = new PopTokenGenerator(cryptoObj);\n            _d = cacheRecord.accessToken, secret = _d.secret, keyId = _d.keyId;\n            if (!keyId) {\n              throw ClientAuthError.createKeyIdMissingError();\n            }\n            return [4 /*yield*/, popTokenGenerator.signPopToken(secret, keyId, request)];\n          case 1:\n            accessToken = _e.sent();\n            return [3 /*break*/, 3];\n          case 2:\n            accessToken = cacheRecord.accessToken.secret;\n            _e.label = 3;\n          case 3:\n            responseScopes = ScopeSet.fromString(cacheRecord.accessToken.target).asArray();\n            expiresOn = new Date(Number(cacheRecord.accessToken.expiresOn) * 1000);\n            extExpiresOn = new Date(Number(cacheRecord.accessToken.extendedExpiresOn) * 1000);\n            _e.label = 4;\n          case 4:\n            if (cacheRecord.appMetadata) {\n              familyId = cacheRecord.appMetadata.familyId === THE_FAMILY_ID ? THE_FAMILY_ID : Constants.EMPTY_STRING;\n            }\n            uid = (idTokenObj === null || idTokenObj === void 0 ? void 0 : idTokenObj.claims.oid) || (idTokenObj === null || idTokenObj === void 0 ? void 0 : idTokenObj.claims.sub) || Constants.EMPTY_STRING;\n            tid = (idTokenObj === null || idTokenObj === void 0 ? void 0 : idTokenObj.claims.tid) || Constants.EMPTY_STRING;\n            return [2 /*return*/, {\n              authority: authority.canonicalAuthority,\n              uniqueId: uid,\n              tenantId: tid,\n              scopes: responseScopes,\n              account: cacheRecord.account ? cacheRecord.account.getAccountInfo() : null,\n              idToken: idTokenObj ? idTokenObj.rawToken : Constants.EMPTY_STRING,\n              idTokenClaims: idTokenObj ? idTokenObj.claims : {},\n              accessToken: accessToken,\n              fromCache: fromTokenCache,\n              expiresOn: expiresOn,\n              correlationId: request.correlationId,\n              requestId: requestId || Constants.EMPTY_STRING,\n              extExpiresOn: extExpiresOn,\n              familyId: familyId,\n              tokenType: ((_a = cacheRecord.accessToken) === null || _a === void 0 ? void 0 : _a.tokenType) || Constants.EMPTY_STRING,\n              state: requestState ? requestState.userRequestState : Constants.EMPTY_STRING,\n              cloudGraphHostName: ((_b = cacheRecord.account) === null || _b === void 0 ? void 0 : _b.cloudGraphHostName) || Constants.EMPTY_STRING,\n              msGraphHost: ((_c = cacheRecord.account) === null || _c === void 0 ? void 0 : _c.msGraphHost) || Constants.EMPTY_STRING,\n              code: code,\n              fromNativeBroker: false\n            }];\n        }\n      });\n    });\n  };\n  return ResponseHandler;\n}();\nexport { ResponseHandler };","map":{"version":3,"mappings":"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","names":["ResponseHandler","cacheStorage","cryptoObj","logger","serializableCache","persistencePlugin","clientId","serverResponseHash","cachedState","state","ClientAuthError","createStateNotFoundError","decodeURIComponent","createStateMismatchError","error","error_description","suberror","InteractionRequiredAuthError","isInteractionRequiredError","Constants","EMPTY_STRING","ServerError","client_info","buildClientInfo","serverResponse","errString","error_codes","timestamp","correlation_id","trace_id","serverTokenResponse","authority","reqTimestamp","request","authCodePayload","userAssertionHash","handlingRefreshTokenResponse","forceCacheRefreshTokenResponse","serverRequestId","id_token","idTokenObj","AuthToken","StringUtils","isEmpty","nonce","claims","createNonceMismatchError","maxAge","authTime","auth_time","createAuthTimeNotFoundError","checkMaxAge","homeAccountIdentifier","AccountEntity","generateHomeAccountId","authorityType","requestStateObj","ProtocolUtils","parseRequestState","key_id","sshKid","undefined","cacheRecord","generateCacheRecord","verbose","cacheContext","TokenCacheContext","beforeCacheAccess","_a","account","key","generateAccountKey","getAccount","warning","generateAuthenticationResult","saveCacheRecord","afterCacheAccess","spa_code","env","getPreferredCache","createInvalidCacheEnvironmentError","cachedIdToken","cachedAccount","IdTokenEntity","createIdTokenEntity","tid","generateAccountEntity","cachedAccessToken","access_token","responseScopes","scope","ScopeSet","fromString","scopes","expiresIn","expires_in","parseInt","extExpiresIn","ext_expires_in","refreshIn","refresh_in","tokenExpirationSeconds","extendedTokenExpirationSeconds","refreshOnSeconds","AccessTokenEntity","createAccessTokenEntity","tenant","printScopes","token_type","requestedClaimsHash","cachedRefreshToken","refresh_token","RefreshTokenEntity","createRefreshTokenEntity","foci","cachedAppMetadata","AppMetadataEntity","createAppMetadataEntity","CacheRecord","idToken","cloudGraphHostName","cloud_graph_host_name","msGraphhost","msgraph_host","AuthorityType","Adfs","createGenericAccount","protocolMode","createClientInfoEmptyError","createAccount","fromTokenCache","requestState","code","requestId","accessToken","expiresOn","familyId","tokenType","AuthenticationScheme","POP","popTokenGenerator","PopTokenGenerator","_d","secret","keyId","createKeyIdMissingError","signPopToken","_e","target","asArray","Date","Number","extExpiresOn","extendedExpiresOn","appMetadata","THE_FAMILY_ID","uid","oid","sub","canonicalAuthority","uniqueId","tenantId","getAccountInfo","rawToken","idTokenClaims","fromCache","correlationId","userRequestState","msGraphHost","fromNativeBroker"],"sources":["C:\\Azure\\gitauthdemo\\ms-identity-javascript-react-tutorial\\3-Authorization-II\\2-call-api-b2c\\SPA\\node_modules\\@azure\\msal-common\\src\\response\\ResponseHandler.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ServerAuthorizationTokenResponse } from \"./ServerAuthorizationTokenResponse\";\nimport { buildClientInfo} from \"../account/ClientInfo\";\nimport { ICrypto } from \"../crypto/ICrypto\";\nimport { ClientAuthError } from \"../error/ClientAuthError\";\nimport { StringUtils } from \"../utils/StringUtils\";\nimport { ServerAuthorizationCodeResponse } from \"./ServerAuthorizationCodeResponse\";\nimport { Logger } from \"../logger/Logger\";\nimport { ServerError } from \"../error/ServerError\";\nimport { AuthToken } from \"../account/AuthToken\";\nimport { ScopeSet } from \"../request/ScopeSet\";\nimport { AuthenticationResult } from \"./AuthenticationResult\";\nimport { AccountEntity } from \"../cache/entities/AccountEntity\";\nimport { Authority } from \"../authority/Authority\";\nimport { AuthorityType } from \"../authority/AuthorityType\";\nimport { IdTokenEntity } from \"../cache/entities/IdTokenEntity\";\nimport { AccessTokenEntity } from \"../cache/entities/AccessTokenEntity\";\nimport { RefreshTokenEntity } from \"../cache/entities/RefreshTokenEntity\";\nimport { InteractionRequiredAuthError } from \"../error/InteractionRequiredAuthError\";\nimport { CacheRecord } from \"../cache/entities/CacheRecord\";\nimport { CacheManager } from \"../cache/CacheManager\";\nimport { ProtocolUtils, RequestStateObject } from \"../utils/ProtocolUtils\";\nimport { AuthenticationScheme, Constants, THE_FAMILY_ID } from \"../utils/Constants\";\nimport { PopTokenGenerator } from \"../crypto/PopTokenGenerator\";\nimport { AppMetadataEntity } from \"../cache/entities/AppMetadataEntity\";\nimport { ICachePlugin } from \"../cache/interface/ICachePlugin\";\nimport { TokenCacheContext } from \"../cache/persistence/TokenCacheContext\";\nimport { ISerializableTokenCache } from \"../cache/interface/ISerializableTokenCache\";\nimport { AuthorizationCodePayload } from \"./AuthorizationCodePayload\";\nimport { BaseAuthRequest } from \"../request/BaseAuthRequest\";\n\n/**\n * Class that handles response parsing.\n */\nexport class ResponseHandler {\n    private clientId: string;\n    private cacheStorage: CacheManager;\n    private cryptoObj: ICrypto;\n    private logger: Logger;\n    private homeAccountIdentifier: string;\n    private serializableCache: ISerializableTokenCache | null;\n    private persistencePlugin: ICachePlugin | null;\n\n    constructor(clientId: string, cacheStorage: CacheManager, cryptoObj: ICrypto, logger: Logger, serializableCache: ISerializableTokenCache | null, persistencePlugin: ICachePlugin | null) {\n        this.clientId = clientId;\n        this.cacheStorage = cacheStorage;\n        this.cryptoObj = cryptoObj;\n        this.logger = logger;\n        this.serializableCache = serializableCache;\n        this.persistencePlugin = persistencePlugin;\n    }\n\n    /**\n     * Function which validates server authorization code response.\n     * @param serverResponseHash\n     * @param cachedState\n     * @param cryptoObj\n     */\n    validateServerAuthorizationCodeResponse(serverResponseHash: ServerAuthorizationCodeResponse, cachedState: string, cryptoObj: ICrypto): void {\n\n        if (!serverResponseHash.state || !cachedState) {\n            throw !serverResponseHash.state ? ClientAuthError.createStateNotFoundError(\"Server State\") : ClientAuthError.createStateNotFoundError(\"Cached State\");\n        }\n\n        if (decodeURIComponent(serverResponseHash.state) !== decodeURIComponent(cachedState)) {\n            throw ClientAuthError.createStateMismatchError();\n        }\n\n        // Check for error\n        if (serverResponseHash.error || serverResponseHash.error_description || serverResponseHash.suberror) {\n            if (InteractionRequiredAuthError.isInteractionRequiredError(serverResponseHash.error, serverResponseHash.error_description, serverResponseHash.suberror)) {\n                throw new InteractionRequiredAuthError(serverResponseHash.error || Constants.EMPTY_STRING, serverResponseHash.error_description, serverResponseHash.suberror);\n            }\n\n            throw new ServerError(serverResponseHash.error || Constants.EMPTY_STRING, serverResponseHash.error_description, serverResponseHash.suberror);\n        }\n\n        if (serverResponseHash.client_info) {\n            buildClientInfo(serverResponseHash.client_info, cryptoObj);\n        }\n    }\n\n    /**\n     * Function which validates server authorization token response.\n     * @param serverResponse\n     */\n    validateTokenResponse(serverResponse: ServerAuthorizationTokenResponse): void {\n        // Check for error\n        if (serverResponse.error || serverResponse.error_description || serverResponse.suberror) {\n            if (InteractionRequiredAuthError.isInteractionRequiredError(serverResponse.error, serverResponse.error_description, serverResponse.suberror)) {\n                throw new InteractionRequiredAuthError(serverResponse.error, serverResponse.error_description, serverResponse.suberror);\n            }\n\n            const errString = `${serverResponse.error_codes} - [${serverResponse.timestamp}]: ${serverResponse.error_description} - Correlation ID: ${serverResponse.correlation_id} - Trace ID: ${serverResponse.trace_id}`;\n            throw new ServerError(serverResponse.error, errString, serverResponse.suberror);\n        }\n    }\n\n    /**\n     * Returns a constructed token response based on given string. Also manages the cache updates and cleanups.\n     * @param serverTokenResponse\n     * @param authority\n     */\n    async handleServerTokenResponse(\n        serverTokenResponse: ServerAuthorizationTokenResponse,\n        authority: Authority,\n        reqTimestamp: number,\n        request: BaseAuthRequest,\n        authCodePayload?: AuthorizationCodePayload,\n        userAssertionHash?: string,\n        handlingRefreshTokenResponse?: boolean,\n        forceCacheRefreshTokenResponse?: boolean,\n        serverRequestId?: string): Promise<AuthenticationResult> {\n\n        // create an idToken object (not entity)\n        let idTokenObj: AuthToken | undefined;\n        if (serverTokenResponse.id_token) {\n            idTokenObj = new AuthToken(serverTokenResponse.id_token || Constants.EMPTY_STRING, this.cryptoObj);\n\n            // token nonce check (TODO: Add a warning if no nonce is given?)\n            if (authCodePayload && !StringUtils.isEmpty(authCodePayload.nonce)) {\n                if (idTokenObj.claims.nonce !== authCodePayload.nonce) {\n                    throw ClientAuthError.createNonceMismatchError();\n                }\n            }\n\n            // token max_age check\n            if (request.maxAge || (request.maxAge === 0)) {\n                const authTime = idTokenObj.claims.auth_time;\n                if (!authTime) {\n                    throw ClientAuthError.createAuthTimeNotFoundError();\n                }\n\n                AuthToken.checkMaxAge(authTime, request.maxAge);\n            }\n        }\n\n        // generate homeAccountId\n        this.homeAccountIdentifier = AccountEntity.generateHomeAccountId(serverTokenResponse.client_info || Constants.EMPTY_STRING, authority.authorityType, this.logger, this.cryptoObj, idTokenObj);\n\n        // save the response tokens\n        let requestStateObj: RequestStateObject | undefined;\n        if (!!authCodePayload && !!authCodePayload.state) {\n            requestStateObj = ProtocolUtils.parseRequestState(this.cryptoObj, authCodePayload.state);\n        }\n\n        // Add keyId from request to serverTokenResponse if defined\n        serverTokenResponse.key_id = serverTokenResponse.key_id || request.sshKid || undefined;\n\n        const cacheRecord = this.generateCacheRecord(serverTokenResponse, authority, reqTimestamp, request, idTokenObj, userAssertionHash, authCodePayload);\n        let cacheContext;\n        try {\n            if (this.persistencePlugin && this.serializableCache) {\n                this.logger.verbose(\"Persistence enabled, calling beforeCacheAccess\");\n                cacheContext = new TokenCacheContext(this.serializableCache, true);\n                await this.persistencePlugin.beforeCacheAccess(cacheContext);\n            }\n            /*\n             * When saving a refreshed tokens to the cache, it is expected that the account that was used is present in the cache.\n             * If not present, we should return null, as it's the case that another application called removeAccount in between\n             * the calls to getAllAccounts and acquireTokenSilent. We should not overwrite that removal, unless explicitly flagged by\n             * the developer, as in the case of refresh token flow used in ADAL Node to MSAL Node migration.\n             */\n            if (handlingRefreshTokenResponse && !forceCacheRefreshTokenResponse && cacheRecord.account) {\n                const key = cacheRecord.account.generateAccountKey();\n                const account = this.cacheStorage.getAccount(key);\n                if (!account) {\n                    this.logger.warning(\"Account used to refresh tokens not in persistence, refreshed tokens will not be stored in the cache\");\n                    return ResponseHandler.generateAuthenticationResult(this.cryptoObj, authority, cacheRecord, false, request, idTokenObj, requestStateObj, undefined, serverRequestId);\n                }\n            }\n            await this.cacheStorage.saveCacheRecord(cacheRecord);\n        } finally {\n            if (this.persistencePlugin && this.serializableCache && cacheContext) {\n                this.logger.verbose(\"Persistence enabled, calling afterCacheAccess\");\n                await this.persistencePlugin.afterCacheAccess(cacheContext);\n            }\n        }\n        return ResponseHandler.generateAuthenticationResult(this.cryptoObj, authority, cacheRecord, false, request, idTokenObj, requestStateObj, serverTokenResponse.spa_code, serverRequestId);\n    }\n\n    /**\n     * Generates CacheRecord\n     * @param serverTokenResponse\n     * @param idTokenObj\n     * @param authority\n     */\n    private generateCacheRecord(serverTokenResponse: ServerAuthorizationTokenResponse, authority: Authority, reqTimestamp: number, request: BaseAuthRequest, idTokenObj?: AuthToken, userAssertionHash?: string, authCodePayload?: AuthorizationCodePayload): CacheRecord {\n        const env = authority.getPreferredCache();\n        if (StringUtils.isEmpty(env)) {\n            throw ClientAuthError.createInvalidCacheEnvironmentError();\n        }\n\n        // IdToken: non AAD scenarios can have empty realm\n        let cachedIdToken: IdTokenEntity | undefined;\n        let cachedAccount: AccountEntity | undefined;\n        if (!StringUtils.isEmpty(serverTokenResponse.id_token) && !!idTokenObj) {\n            cachedIdToken = IdTokenEntity.createIdTokenEntity(\n                this.homeAccountIdentifier,\n                env,\n                serverTokenResponse.id_token || Constants.EMPTY_STRING,\n                this.clientId,\n                idTokenObj.claims.tid || Constants.EMPTY_STRING,\n            );\n\n            cachedAccount = this.generateAccountEntity(\n                serverTokenResponse,\n                idTokenObj,\n                authority,\n                authCodePayload\n            );\n        }\n\n        // AccessToken\n        let cachedAccessToken: AccessTokenEntity | null = null;\n        if (!StringUtils.isEmpty(serverTokenResponse.access_token)) {\n\n            // If scopes not returned in server response, use request scopes\n            const responseScopes = serverTokenResponse.scope ? ScopeSet.fromString(serverTokenResponse.scope) : new ScopeSet(request.scopes || []);\n\n            /*\n             * Use timestamp calculated before request\n             * Server may return timestamps as strings, parse to numbers if so.\n             */\n            const expiresIn: number = (typeof serverTokenResponse.expires_in === \"string\" ? parseInt(serverTokenResponse.expires_in, 10) : serverTokenResponse.expires_in) || 0;\n            const extExpiresIn: number = (typeof serverTokenResponse.ext_expires_in === \"string\" ? parseInt(serverTokenResponse.ext_expires_in, 10) : serverTokenResponse.ext_expires_in) || 0;\n            const refreshIn: number | undefined = (typeof serverTokenResponse.refresh_in === \"string\" ? parseInt(serverTokenResponse.refresh_in, 10) : serverTokenResponse.refresh_in) || undefined;\n            const tokenExpirationSeconds = reqTimestamp + expiresIn;\n            const extendedTokenExpirationSeconds = tokenExpirationSeconds + extExpiresIn;\n            const refreshOnSeconds = refreshIn && refreshIn > 0 ? reqTimestamp + refreshIn : undefined;\n\n            // non AAD scenarios can have empty realm\n            cachedAccessToken = AccessTokenEntity.createAccessTokenEntity(\n                this.homeAccountIdentifier,\n                env,\n                serverTokenResponse.access_token || Constants.EMPTY_STRING,\n                this.clientId,\n                idTokenObj ? idTokenObj.claims.tid || Constants.EMPTY_STRING : authority.tenant,\n                responseScopes.printScopes(),\n                tokenExpirationSeconds,\n                extendedTokenExpirationSeconds,\n                this.cryptoObj,\n                refreshOnSeconds,\n                serverTokenResponse.token_type,\n                userAssertionHash,\n                serverTokenResponse.key_id,\n                request.claims,\n                request.requestedClaimsHash\n            );\n        }\n\n        // refreshToken\n        let cachedRefreshToken: RefreshTokenEntity | null = null;\n        if (!StringUtils.isEmpty(serverTokenResponse.refresh_token)) {\n            cachedRefreshToken = RefreshTokenEntity.createRefreshTokenEntity(\n                this.homeAccountIdentifier,\n                env,\n                serverTokenResponse.refresh_token || Constants.EMPTY_STRING,\n                this.clientId,\n                serverTokenResponse.foci,\n                userAssertionHash\n            );\n        }\n\n        // appMetadata\n        let cachedAppMetadata: AppMetadataEntity | null = null;\n        if (!StringUtils.isEmpty(serverTokenResponse.foci)) {\n            cachedAppMetadata = AppMetadataEntity.createAppMetadataEntity(this.clientId, env, serverTokenResponse.foci);\n        }\n\n        return new CacheRecord(cachedAccount, cachedIdToken, cachedAccessToken, cachedRefreshToken, cachedAppMetadata);\n    }\n\n    /**\n     * Generate Account\n     * @param serverTokenResponse\n     * @param idToken\n     * @param authority\n     */\n    private generateAccountEntity(serverTokenResponse: ServerAuthorizationTokenResponse, idToken: AuthToken, authority: Authority, authCodePayload?: AuthorizationCodePayload): AccountEntity {\n        const authorityType = authority.authorityType;\n        const cloudGraphHostName = authCodePayload ? authCodePayload.cloud_graph_host_name : Constants.EMPTY_STRING;\n        const msGraphhost = authCodePayload ? authCodePayload.msgraph_host : Constants.EMPTY_STRING;\n\n        // ADFS does not require client_info in the response\n        if (authorityType === AuthorityType.Adfs) {\n            this.logger.verbose(\"Authority type is ADFS, creating ADFS account\");\n            return AccountEntity.createGenericAccount(this.homeAccountIdentifier, idToken, authority, cloudGraphHostName, msGraphhost);\n        }\n\n        // This fallback applies to B2C as well as they fall under an AAD account type.\n        if (StringUtils.isEmpty(serverTokenResponse.client_info) && authority.protocolMode === \"AAD\") {\n            throw ClientAuthError.createClientInfoEmptyError();\n        }\n\n        return serverTokenResponse.client_info ?\n            AccountEntity.createAccount(serverTokenResponse.client_info, this.homeAccountIdentifier, idToken, authority, cloudGraphHostName, msGraphhost) :\n            AccountEntity.createGenericAccount(this.homeAccountIdentifier, idToken, authority, cloudGraphHostName, msGraphhost);\n    }\n\n    /**\n     * Creates an @AuthenticationResult from @CacheRecord , @IdToken , and a boolean that states whether or not the result is from cache.\n     *\n     * Optionally takes a state string that is set as-is in the response.\n     *\n     * @param cacheRecord\n     * @param idTokenObj\n     * @param fromTokenCache\n     * @param stateString\n     */\n    static async generateAuthenticationResult(\n        cryptoObj: ICrypto,\n        authority: Authority,\n        cacheRecord: CacheRecord,\n        fromTokenCache: boolean,\n        request: BaseAuthRequest,\n        idTokenObj?: AuthToken,\n        requestState?: RequestStateObject,\n        code?: string,\n        requestId?: string\n    ): Promise<AuthenticationResult> {\n        let accessToken: string = Constants.EMPTY_STRING;\n        let responseScopes: Array<string> = [];\n        let expiresOn: Date | null = null;\n        let extExpiresOn: Date | undefined;\n        let familyId: string = Constants.EMPTY_STRING;\n\n        if (cacheRecord.accessToken) {\n            if (cacheRecord.accessToken.tokenType === AuthenticationScheme.POP) {\n                const popTokenGenerator: PopTokenGenerator = new PopTokenGenerator(cryptoObj);\n                const { secret, keyId } = cacheRecord.accessToken;\n\n                if (!keyId) {\n                    throw ClientAuthError.createKeyIdMissingError();\n                }\n\n                accessToken = await popTokenGenerator.signPopToken(secret, keyId, request);\n            } else {\n                accessToken = cacheRecord.accessToken.secret;\n            }\n            responseScopes = ScopeSet.fromString(cacheRecord.accessToken.target).asArray();\n            expiresOn = new Date(Number(cacheRecord.accessToken.expiresOn) * 1000);\n            extExpiresOn = new Date(Number(cacheRecord.accessToken.extendedExpiresOn) * 1000);\n        }\n\n        if (cacheRecord.appMetadata) {\n            familyId = cacheRecord.appMetadata.familyId === THE_FAMILY_ID ? THE_FAMILY_ID : Constants.EMPTY_STRING;\n        }\n        const uid = idTokenObj?.claims.oid || idTokenObj?.claims.sub || Constants.EMPTY_STRING;\n        const tid = idTokenObj?.claims.tid || Constants.EMPTY_STRING;\n\n        return {\n            authority: authority.canonicalAuthority,\n            uniqueId: uid,\n            tenantId: tid,\n            scopes: responseScopes,\n            account: cacheRecord.account ? cacheRecord.account.getAccountInfo() : null,\n            idToken: idTokenObj ? idTokenObj.rawToken : Constants.EMPTY_STRING,\n            idTokenClaims: idTokenObj ? idTokenObj.claims : {},\n            accessToken: accessToken,\n            fromCache: fromTokenCache,\n            expiresOn: expiresOn,\n            correlationId: request.correlationId,\n            requestId: requestId || Constants.EMPTY_STRING,\n            extExpiresOn: extExpiresOn,\n            familyId: familyId,\n            tokenType: cacheRecord.accessToken?.tokenType || Constants.EMPTY_STRING,\n            state: requestState ? requestState.userRequestState : Constants.EMPTY_STRING,\n            cloudGraphHostName: cacheRecord.account?.cloudGraphHostName || Constants.EMPTY_STRING,\n            msGraphHost: cacheRecord.account?.msGraphHost || Constants.EMPTY_STRING,\n            code,\n            fromNativeBroker: false\n        };\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}