{"ast":null,"code":"/*! @azure/msal-browser v2.31.0 2022-11-07 */\n'use strict';\n\nimport { __extends, __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { AuthError, Constants, PerformanceEvents, StringUtils, PromptValue, UrlString, ProtocolUtils } from '@azure/msal-common';\nimport { StandardInteractionClient } from './StandardInteractionClient.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { InteractionType } from '../utils/BrowserConstants.js';\nimport { SilentHandler } from '../interaction_handler/SilentHandler.js';\nimport { NativeMessageHandler } from '../broker/nativeBroker/NativeMessageHandler.js';\nimport { NativeInteractionClient } from './NativeInteractionClient.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nvar SilentIframeClient = /** @class */function (_super) {\n  __extends(SilentIframeClient, _super);\n  function SilentIframeClient(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, apiId, performanceClient, nativeStorageImpl, nativeMessageHandler, correlationId) {\n    var _this = _super.call(this, config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeMessageHandler, correlationId) || this;\n    _this.apiId = apiId;\n    _this.nativeStorage = nativeStorageImpl;\n    return _this;\n  }\n  /**\r\n   * Acquires a token silently by opening a hidden iframe to the /authorize endpoint with prompt=none or prompt=no_session\r\n   * @param request\r\n   */\n  SilentIframeClient.prototype.acquireToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var acquireTokenMeasurement, silentRequest, serverTelemetryManager, authClient, e_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.logger.verbose(\"acquireTokenByIframe called\");\n            acquireTokenMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.SilentIframeClientAcquireToken, request.correlationId);\n            // Check that we have some SSO data\n            if (StringUtils.isEmpty(request.loginHint) && StringUtils.isEmpty(request.sid) && (!request.account || StringUtils.isEmpty(request.account.username))) {\n              this.logger.warning(\"No user hint provided. The authorization server may need more information to complete this request.\");\n            }\n            // Check that prompt is set to none or no_session, throw error if it is set to anything else.\n            if (request.prompt && request.prompt !== PromptValue.NONE && request.prompt !== PromptValue.NO_SESSION) {\n              acquireTokenMeasurement.endMeasurement({\n                success: false\n              });\n              throw BrowserAuthError.createSilentPromptValueError(request.prompt);\n            }\n            return [4 /*yield*/, this.initializeAuthorizationRequest(__assign(__assign({}, request), {\n              prompt: request.prompt || PromptValue.NONE\n            }), InteractionType.Silent)];\n          case 1:\n            silentRequest = _a.sent();\n            this.browserStorage.updateCacheEntries(silentRequest.state, silentRequest.nonce, silentRequest.authority, silentRequest.loginHint || Constants.EMPTY_STRING, silentRequest.account || null);\n            serverTelemetryManager = this.initializeServerTelemetryManager(this.apiId);\n            _a.label = 2;\n          case 2:\n            _a.trys.push([2, 5,, 6]);\n            return [4 /*yield*/, this.createAuthCodeClient(serverTelemetryManager, silentRequest.authority, silentRequest.azureCloudOptions)];\n          case 3:\n            authClient = _a.sent();\n            this.logger.verbose(\"Auth code client created\");\n            return [4 /*yield*/, this.silentTokenHelper(authClient, silentRequest).then(function (result) {\n              acquireTokenMeasurement.endMeasurement({\n                success: true,\n                fromCache: false,\n                requestId: result.requestId\n              });\n              return result;\n            })];\n          case 4:\n            return [2 /*return*/, _a.sent()];\n          case 5:\n            e_1 = _a.sent();\n            if (e_1 instanceof AuthError) {\n              e_1.setCorrelationId(this.correlationId);\n            }\n            serverTelemetryManager.cacheFailedRequest(e_1);\n            this.browserStorage.cleanRequestByState(silentRequest.state);\n            acquireTokenMeasurement.endMeasurement({\n              errorCode: e_1 instanceof AuthError && e_1.errorCode || undefined,\n              subErrorCode: e_1 instanceof AuthError && e_1.subError || undefined,\n              success: false\n            });\n            throw e_1;\n          case 6:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\r\n   * Currently Unsupported\r\n   */\n  SilentIframeClient.prototype.logout = function () {\n    // Synchronous so we must reject\n    return Promise.reject(BrowserAuthError.createSilentLogoutUnsupportedError());\n  };\n  /**\r\n   * Helper which acquires an authorization code silently using a hidden iframe from given url\r\n   * using the scopes requested as part of the id, and exchanges the code for a set of OAuth tokens.\r\n   * @param navigateUrl\r\n   * @param userRequestScopes\r\n   */\n  SilentIframeClient.prototype.silentTokenHelper = function (authClient, silentRequest) {\n    return __awaiter(this, void 0, void 0, function () {\n      var authCodeRequest, navigateUrl, silentHandler, msalFrame, hash, serverParams, state, nativeInteractionClient, userRequestState;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.initializeAuthorizationCodeRequest(silentRequest)];\n          case 1:\n            authCodeRequest = _a.sent();\n            return [4 /*yield*/, authClient.getAuthCodeUrl(__assign(__assign({}, silentRequest), {\n              nativeBroker: NativeMessageHandler.isNativeAvailable(this.config, this.logger, this.nativeMessageHandler, silentRequest.authenticationScheme)\n            }))];\n          case 2:\n            navigateUrl = _a.sent();\n            silentHandler = new SilentHandler(authClient, this.browserStorage, authCodeRequest, this.logger, this.config.system);\n            return [4 /*yield*/, silentHandler.initiateAuthRequest(navigateUrl)];\n          case 3:\n            msalFrame = _a.sent();\n            return [4 /*yield*/, silentHandler.monitorIframeForHash(msalFrame, this.config.system.iframeHashTimeout)];\n          case 4:\n            hash = _a.sent();\n            serverParams = UrlString.getDeserializedHash(hash);\n            state = this.validateAndExtractStateFromHash(serverParams, InteractionType.Silent, authCodeRequest.correlationId);\n            if (serverParams.accountId) {\n              this.logger.verbose(\"Account id found in hash, calling WAM for token\");\n              if (!this.nativeMessageHandler) {\n                throw BrowserAuthError.createNativeConnectionNotEstablishedError();\n              }\n              nativeInteractionClient = new NativeInteractionClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, this.apiId, this.performanceClient, this.nativeMessageHandler, serverParams.accountId, this.browserStorage, this.correlationId);\n              userRequestState = ProtocolUtils.parseRequestState(this.browserCrypto, state).userRequestState;\n              return [2 /*return*/, nativeInteractionClient.acquireToken(__assign(__assign({}, silentRequest), {\n                state: userRequestState,\n                prompt: silentRequest.prompt || PromptValue.NONE\n              })).finally(function () {\n                _this.browserStorage.cleanRequestByState(state);\n              })];\n            }\n            // Handle response from hash string\n            return [2 /*return*/, silentHandler.handleCodeResponseFromHash(hash, state, authClient.authority, this.networkClient)];\n        }\n      });\n    });\n  };\n  return SilentIframeClient;\n}(StandardInteractionClient);\nexport { SilentIframeClient };","map":{"version":3,"mappings":"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","names":["__extends","config","storageImpl","browserCrypto","logger","eventHandler","navigationClient","apiId","performanceClient","nativeStorageImpl","nativeMessageHandler","correlationId","_super","_this","nativeStorage","SilentIframeClient","request","verbose","acquireTokenMeasurement","startMeasurement","PerformanceEvents","SilentIframeClientAcquireToken","StringUtils","isEmpty","loginHint","sid","account","username","warning","prompt","PromptValue","NONE","NO_SESSION","endMeasurement","success","BrowserAuthError","createSilentPromptValueError","initializeAuthorizationRequest","InteractionType","Silent","silentRequest","_a","browserStorage","updateCacheEntries","state","nonce","authority","Constants","EMPTY_STRING","serverTelemetryManager","initializeServerTelemetryManager","createAuthCodeClient","azureCloudOptions","authClient","silentTokenHelper","then","result","fromCache","requestId","e_1","AuthError","setCorrelationId","cacheFailedRequest","cleanRequestByState","errorCode","undefined","subErrorCode","subError","Promise","reject","createSilentLogoutUnsupportedError","initializeAuthorizationCodeRequest","authCodeRequest","getAuthCodeUrl","nativeBroker","NativeMessageHandler","isNativeAvailable","authenticationScheme","navigateUrl","silentHandler","SilentHandler","system","initiateAuthRequest","msalFrame","monitorIframeForHash","iframeHashTimeout","hash","serverParams","UrlString","getDeserializedHash","validateAndExtractStateFromHash","accountId","createNativeConnectionNotEstablishedError","nativeInteractionClient","NativeInteractionClient","userRequestState","ProtocolUtils","parseRequestState","acquireToken","finally","handleCodeResponseFromHash","networkClient","StandardInteractionClient"],"sources":["C:\\Azure\\gitauthdemo\\ms-identity-javascript-react-tutorial\\3-Authorization-II\\2-call-api-b2c\\SPA\\node_modules\\@azure\\msal-browser\\src\\interaction_client\\SilentIframeClient.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AuthenticationResult, ICrypto, Logger, StringUtils, PromptValue, CommonAuthorizationCodeRequest, AuthorizationCodeClient, AuthError, Constants, UrlString, ServerAuthorizationCodeResponse, ProtocolUtils, IPerformanceClient, PerformanceEvents } from \"@azure/msal-common\";\nimport { StandardInteractionClient } from \"./StandardInteractionClient\";\nimport { AuthorizationUrlRequest } from \"../request/AuthorizationUrlRequest\";\nimport { BrowserConfiguration } from \"../config/Configuration\";\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\nimport { EventHandler } from \"../event/EventHandler\";\nimport { INavigationClient } from \"../navigation/INavigationClient\";\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\nimport { InteractionType, ApiId } from \"../utils/BrowserConstants\";\nimport { SilentHandler } from \"../interaction_handler/SilentHandler\";\nimport { SsoSilentRequest } from \"../request/SsoSilentRequest\";\nimport { NativeMessageHandler } from \"../broker/nativeBroker/NativeMessageHandler\";\nimport { NativeInteractionClient } from \"./NativeInteractionClient\";\n\nexport class SilentIframeClient extends StandardInteractionClient {\n    protected apiId: ApiId;\n    protected nativeStorage: BrowserCacheManager;\n\n    constructor(config: BrowserConfiguration, storageImpl: BrowserCacheManager, browserCrypto: ICrypto, logger: Logger, eventHandler: EventHandler, navigationClient: INavigationClient, apiId: ApiId, performanceClient: IPerformanceClient, nativeStorageImpl: BrowserCacheManager, nativeMessageHandler?: NativeMessageHandler, correlationId?: string) {\n        super(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeMessageHandler, correlationId);\n        this.apiId = apiId;\n        this.nativeStorage = nativeStorageImpl;\n    }\n\n    /**\n     * Acquires a token silently by opening a hidden iframe to the /authorize endpoint with prompt=none or prompt=no_session\n     * @param request\n     */\n    async acquireToken(request: SsoSilentRequest): Promise<AuthenticationResult> {\n        this.logger.verbose(\"acquireTokenByIframe called\");\n        const acquireTokenMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.SilentIframeClientAcquireToken, request.correlationId);\n        // Check that we have some SSO data\n        if (StringUtils.isEmpty(request.loginHint) && StringUtils.isEmpty(request.sid) && (!request.account || StringUtils.isEmpty(request.account.username))) {\n            this.logger.warning(\"No user hint provided. The authorization server may need more information to complete this request.\");\n        }\n\n        // Check that prompt is set to none or no_session, throw error if it is set to anything else.\n        if (request.prompt && (request.prompt !== PromptValue.NONE) && (request.prompt !== PromptValue.NO_SESSION)) {\n            acquireTokenMeasurement.endMeasurement({\n                success: false\n            });\n            throw BrowserAuthError.createSilentPromptValueError(request.prompt);\n        }\n\n        // Create silent request\n        const silentRequest: AuthorizationUrlRequest = await this.initializeAuthorizationRequest({\n            ...request,\n            prompt: request.prompt || PromptValue.NONE\n        }, InteractionType.Silent);\n        this.browserStorage.updateCacheEntries(silentRequest.state, silentRequest.nonce, silentRequest.authority, silentRequest.loginHint || Constants.EMPTY_STRING, silentRequest.account || null);\n\n        const serverTelemetryManager = this.initializeServerTelemetryManager(this.apiId);\n\n        try {\n            // Initialize the client\n            const authClient: AuthorizationCodeClient = await this.createAuthCodeClient(serverTelemetryManager, silentRequest.authority, silentRequest.azureCloudOptions);\n            this.logger.verbose(\"Auth code client created\");\n\n            return await this.silentTokenHelper(authClient, silentRequest).then((result: AuthenticationResult) => {\n                acquireTokenMeasurement.endMeasurement({\n                    success: true,\n                    fromCache: false,\n                    requestId: result.requestId\n                });\n                return result;\n            });\n        } catch (e) {\n            if (e instanceof AuthError) {\n                (e as AuthError).setCorrelationId(this.correlationId);\n            }\n            serverTelemetryManager.cacheFailedRequest(e);\n            this.browserStorage.cleanRequestByState(silentRequest.state);\n            acquireTokenMeasurement.endMeasurement({\n                errorCode: e instanceof AuthError && e.errorCode || undefined,\n                subErrorCode: e instanceof AuthError && e.subError || undefined,\n                success: false\n            });\n            throw e;\n        }\n    }\n\n    /**\n     * Currently Unsupported\n     */\n    logout(): Promise<void> {\n        // Synchronous so we must reject\n        return Promise.reject(BrowserAuthError.createSilentLogoutUnsupportedError());\n    }\n\n    /**\n     * Helper which acquires an authorization code silently using a hidden iframe from given url\n     * using the scopes requested as part of the id, and exchanges the code for a set of OAuth tokens.\n     * @param navigateUrl\n     * @param userRequestScopes\n     */\n    protected async silentTokenHelper(authClient: AuthorizationCodeClient, silentRequest: AuthorizationUrlRequest): Promise<AuthenticationResult> {\n        // Create auth code request and generate PKCE params\n        const authCodeRequest: CommonAuthorizationCodeRequest = await this.initializeAuthorizationCodeRequest(silentRequest);\n        // Create authorize request url\n        const navigateUrl = await authClient.getAuthCodeUrl({\n            ...silentRequest,\n            nativeBroker: NativeMessageHandler.isNativeAvailable(this.config, this.logger, this.nativeMessageHandler, silentRequest.authenticationScheme)\n        });\n        // Create silent handler\n        const silentHandler = new SilentHandler(authClient, this.browserStorage, authCodeRequest, this.logger, this.config.system);\n        // Get the frame handle for the silent request\n        const msalFrame = await silentHandler.initiateAuthRequest(navigateUrl);\n        // Monitor the window for the hash. Return the string value and close the popup when the hash is received. Default timeout is 60 seconds.\n        const hash = await silentHandler.monitorIframeForHash(msalFrame, this.config.system.iframeHashTimeout);\n        // Deserialize hash fragment response parameters.\n        const serverParams: ServerAuthorizationCodeResponse = UrlString.getDeserializedHash(hash);\n        const state = this.validateAndExtractStateFromHash(serverParams, InteractionType.Silent, authCodeRequest.correlationId);\n\n        if (serverParams.accountId) {\n            this.logger.verbose(\"Account id found in hash, calling WAM for token\");\n            if (!this.nativeMessageHandler) {\n                throw BrowserAuthError.createNativeConnectionNotEstablishedError();\n            }\n            const nativeInteractionClient = new NativeInteractionClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, this.apiId, this.performanceClient, this.nativeMessageHandler, serverParams.accountId, this.browserStorage, this.correlationId);\n            const { userRequestState } = ProtocolUtils.parseRequestState(this.browserCrypto, state);\n            return nativeInteractionClient.acquireToken({\n                ...silentRequest,\n                state: userRequestState,\n                prompt: silentRequest.prompt || PromptValue.NONE\n            }).finally(() => {\n                this.browserStorage.cleanRequestByState(state);\n            });\n        }\n\n        // Handle response from hash string\n        return silentHandler.handleCodeResponseFromHash(hash, state, authClient.authority, this.networkClient);\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}