{"ast":null,"code":"var _jsxFileName = \"C:\\\\Azure\\\\gitauthdemo\\\\ms-identity-javascript-react-tutorial\\\\3-Authorization-II\\\\2-call-api-b2c\\\\SPA\\\\src\\\\index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport { PublicClientApplication, EventType } from \"@azure/msal-browser\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { msalConfig } from \"./authConfig.js\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./styles/index.css\";\n\n/**\r\n* MSAL should be instantiated outside of the component tree to prevent it from being re-instantiated on re-renders.\r\n* For more, visit: https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/getting-started.md\r\n*/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst msalInstance = new PublicClientApplication(msalConfig);\n\n// Default to using the first account if no account is active on page load\nif (!msalInstance.getActiveAccount() && msalInstance.getAllAccounts().length > 0) {\n  // Account selection logic is app dependent. Adjust as needed for different use cases.\n  msalInstance.setActiveAccount(msalInstance.getAllAccounts()[0]);\n}\nmsalInstance.addEventCallback(event => {\n  if ((event.eventType === EventType.LOGIN_SUCCESS || event.eventType === EventType.ACQUIRE_TOKEN_SUCCESS || event.eventType === EventType.SSO_SILENT_SUCCESS) && event.payload.account) {\n    msalInstance.setActiveAccount(event.payload.account);\n  }\n});\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render( /*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(BrowserRouter, {\n    children: /*#__PURE__*/_jsxDEV(App, {\n      instance: msalInstance\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 39,\n  columnNumber: 5\n}, this));","map":{"version":3,"names":["React","ReactDOM","PublicClientApplication","EventType","BrowserRouter","msalConfig","App","msalInstance","getActiveAccount","getAllAccounts","length","setActiveAccount","addEventCallback","event","eventType","LOGIN_SUCCESS","ACQUIRE_TOKEN_SUCCESS","SSO_SILENT_SUCCESS","payload","account","root","createRoot","document","getElementById","render"],"sources":["C:/Azure/gitauthdemo/ms-identity-javascript-react-tutorial/3-Authorization-II/2-call-api-b2c/SPA/src/index.js"],"sourcesContent":["import React from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\n\r\nimport { PublicClientApplication, EventType } from \"@azure/msal-browser\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nimport { msalConfig } from \"./authConfig.js\";\r\nimport App from \"./App\";\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./styles/index.css\";\r\n\r\n/**\r\n* MSAL should be instantiated outside of the component tree to prevent it from being re-instantiated on re-renders.\r\n* For more, visit: https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/getting-started.md\r\n*/\r\nconst msalInstance = new PublicClientApplication(msalConfig);\r\n\r\n// Default to using the first account if no account is active on page load\r\nif (!msalInstance.getActiveAccount() && msalInstance.getAllAccounts().length > 0) {\r\n    // Account selection logic is app dependent. Adjust as needed for different use cases.\r\n    msalInstance.setActiveAccount(msalInstance.getAllAccounts()[0]);\r\n}\r\n\r\nmsalInstance.addEventCallback((event) => {\r\n    if (\r\n        (event.eventType === EventType.LOGIN_SUCCESS ||\r\n            event.eventType === EventType.ACQUIRE_TOKEN_SUCCESS ||\r\n            event.eventType === EventType.SSO_SILENT_SUCCESS) &&\r\n        event.payload.account\r\n    ) {\r\n        msalInstance.setActiveAccount(event.payload.account);\r\n    }\r\n});\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\n\r\nroot.render(\r\n    <React.StrictMode>\r\n        <BrowserRouter>\r\n            <App instance={msalInstance} />\r\n        </BrowserRouter>\r\n    </React.StrictMode>\r\n);\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,kBAAkB;AAEvC,SAASC,uBAAuB,EAAEC,SAAS,QAAQ,qBAAqB;AACxE,SAASC,aAAa,QAAQ,kBAAkB;AAEhD,SAASC,UAAU,QAAQ,iBAAiB;AAC5C,OAAOC,GAAG,MAAM,OAAO;AAEvB,OAAO,sCAAsC;AAC7C,OAAO,oBAAoB;;AAE3B;AACA;AACA;AACA;AAHA;AAIA,MAAMC,YAAY,GAAG,IAAIL,uBAAuB,CAACG,UAAU,CAAC;;AAE5D;AACA,IAAI,CAACE,YAAY,CAACC,gBAAgB,EAAE,IAAID,YAAY,CAACE,cAAc,EAAE,CAACC,MAAM,GAAG,CAAC,EAAE;EAC9E;EACAH,YAAY,CAACI,gBAAgB,CAACJ,YAAY,CAACE,cAAc,EAAE,CAAC,CAAC,CAAC,CAAC;AACnE;AAEAF,YAAY,CAACK,gBAAgB,CAAEC,KAAK,IAAK;EACrC,IACI,CAACA,KAAK,CAACC,SAAS,KAAKX,SAAS,CAACY,aAAa,IACxCF,KAAK,CAACC,SAAS,KAAKX,SAAS,CAACa,qBAAqB,IACnDH,KAAK,CAACC,SAAS,KAAKX,SAAS,CAACc,kBAAkB,KACpDJ,KAAK,CAACK,OAAO,CAACC,OAAO,EACvB;IACEZ,YAAY,CAACI,gBAAgB,CAACE,KAAK,CAACK,OAAO,CAACC,OAAO,CAAC;EACxD;AACJ,CAAC,CAAC;AAEF,MAAMC,IAAI,GAAGnB,QAAQ,CAACoB,UAAU,CAACC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAAC;AAEjEH,IAAI,CAACI,MAAM,eACP,QAAC,KAAK,CAAC,UAAU;EAAA,uBACb,QAAC,aAAa;IAAA,uBACV,QAAC,GAAG;MAAC,QAAQ,EAAEjB;IAAa;MAAA;MAAA;MAAA;IAAA;EAAG;IAAA;IAAA;IAAA;EAAA;AACnB;EAAA;EAAA;EAAA;AAAA,QACD,CACtB"},"metadata":{},"sourceType":"module","externalDependencies":[]}