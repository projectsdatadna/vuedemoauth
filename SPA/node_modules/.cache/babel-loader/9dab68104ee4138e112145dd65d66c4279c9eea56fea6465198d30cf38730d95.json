{"ast":null,"code":"/*! @azure/msal-common v8.0.0 2022-11-07 */\n'use strict';\n\nimport { __spreadArrays } from '../_virtual/_tslib.js';\nimport { AADServerParamKeys, Constants, ResponseMode, OIDC_DEFAULT_SCOPES, SSOTypes, HeaderNames, CLIENT_INFO, ClaimsRequestKeys, PasswordGrantConstants, AuthenticationScheme, ThrottlingConstants } from '../utils/Constants.js';\nimport { ScopeSet } from './ScopeSet.js';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { RequestValidator } from './RequestValidator.js';\nimport { StringUtils } from '../utils/StringUtils.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nvar RequestParameterBuilder = /** @class */function () {\n  function RequestParameterBuilder() {\n    this.parameters = new Map();\n  }\n  /**\r\n   * add response_type = code\r\n   */\n  RequestParameterBuilder.prototype.addResponseTypeCode = function () {\n    this.parameters.set(AADServerParamKeys.RESPONSE_TYPE, encodeURIComponent(Constants.CODE_RESPONSE_TYPE));\n  };\n  /**\r\n   * add response_type = token id_token\r\n   */\n  RequestParameterBuilder.prototype.addResponseTypeForTokenAndIdToken = function () {\n    this.parameters.set(AADServerParamKeys.RESPONSE_TYPE, encodeURIComponent(Constants.TOKEN_RESPONSE_TYPE + \" \" + Constants.ID_TOKEN_RESPONSE_TYPE));\n  };\n  /**\r\n   * add response_mode. defaults to query.\r\n   * @param responseMode\r\n   */\n  RequestParameterBuilder.prototype.addResponseMode = function (responseMode) {\n    this.parameters.set(AADServerParamKeys.RESPONSE_MODE, encodeURIComponent(responseMode ? responseMode : ResponseMode.QUERY));\n  };\n  /**\r\n   * Add flag to indicate STS should attempt to use WAM if available\r\n   */\n  RequestParameterBuilder.prototype.addNativeBroker = function () {\n    this.parameters.set(AADServerParamKeys.NATIVE_BROKER, encodeURIComponent(\"1\"));\n  };\n  /**\r\n   * add scopes. set addOidcScopes to false to prevent default scopes in non-user scenarios\r\n   * @param scopeSet\r\n   * @param addOidcScopes\r\n   */\n  RequestParameterBuilder.prototype.addScopes = function (scopes, addOidcScopes) {\n    if (addOidcScopes === void 0) {\n      addOidcScopes = true;\n    }\n    var requestScopes = addOidcScopes ? __spreadArrays(scopes || [], OIDC_DEFAULT_SCOPES) : scopes || [];\n    var scopeSet = new ScopeSet(requestScopes);\n    this.parameters.set(AADServerParamKeys.SCOPE, encodeURIComponent(scopeSet.printScopes()));\n  };\n  /**\r\n   * add clientId\r\n   * @param clientId\r\n   */\n  RequestParameterBuilder.prototype.addClientId = function (clientId) {\n    this.parameters.set(AADServerParamKeys.CLIENT_ID, encodeURIComponent(clientId));\n  };\n  /**\r\n   * add redirect_uri\r\n   * @param redirectUri\r\n   */\n  RequestParameterBuilder.prototype.addRedirectUri = function (redirectUri) {\n    RequestValidator.validateRedirectUri(redirectUri);\n    this.parameters.set(AADServerParamKeys.REDIRECT_URI, encodeURIComponent(redirectUri));\n  };\n  /**\r\n   * add post logout redirectUri\r\n   * @param redirectUri\r\n   */\n  RequestParameterBuilder.prototype.addPostLogoutRedirectUri = function (redirectUri) {\n    RequestValidator.validateRedirectUri(redirectUri);\n    this.parameters.set(AADServerParamKeys.POST_LOGOUT_URI, encodeURIComponent(redirectUri));\n  };\n  /**\r\n   * add id_token_hint to logout request\r\n   * @param idTokenHint\r\n   */\n  RequestParameterBuilder.prototype.addIdTokenHint = function (idTokenHint) {\n    this.parameters.set(AADServerParamKeys.ID_TOKEN_HINT, encodeURIComponent(idTokenHint));\n  };\n  /**\r\n   * add domain_hint\r\n   * @param domainHint\r\n   */\n  RequestParameterBuilder.prototype.addDomainHint = function (domainHint) {\n    this.parameters.set(SSOTypes.DOMAIN_HINT, encodeURIComponent(domainHint));\n  };\n  /**\r\n   * add login_hint\r\n   * @param loginHint\r\n   */\n  RequestParameterBuilder.prototype.addLoginHint = function (loginHint) {\n    this.parameters.set(SSOTypes.LOGIN_HINT, encodeURIComponent(loginHint));\n  };\n  /**\r\n   * Adds the CCS (Cache Credential Service) query parameter for login_hint\r\n   * @param loginHint\r\n   */\n  RequestParameterBuilder.prototype.addCcsUpn = function (loginHint) {\n    this.parameters.set(HeaderNames.CCS_HEADER, encodeURIComponent(\"UPN:\" + loginHint));\n  };\n  /**\r\n   * Adds the CCS (Cache Credential Service) query parameter for account object\r\n   * @param loginHint\r\n   */\n  RequestParameterBuilder.prototype.addCcsOid = function (clientInfo) {\n    this.parameters.set(HeaderNames.CCS_HEADER, encodeURIComponent(\"Oid:\" + clientInfo.uid + \"@\" + clientInfo.utid));\n  };\n  /**\r\n   * add sid\r\n   * @param sid\r\n   */\n  RequestParameterBuilder.prototype.addSid = function (sid) {\n    this.parameters.set(SSOTypes.SID, encodeURIComponent(sid));\n  };\n  /**\r\n   * add claims\r\n   * @param claims\r\n   */\n  RequestParameterBuilder.prototype.addClaims = function (claims, clientCapabilities) {\n    var mergedClaims = this.addClientCapabilitiesToClaims(claims, clientCapabilities);\n    RequestValidator.validateClaims(mergedClaims);\n    this.parameters.set(AADServerParamKeys.CLAIMS, encodeURIComponent(mergedClaims));\n  };\n  /**\r\n   * add correlationId\r\n   * @param correlationId\r\n   */\n  RequestParameterBuilder.prototype.addCorrelationId = function (correlationId) {\n    this.parameters.set(AADServerParamKeys.CLIENT_REQUEST_ID, encodeURIComponent(correlationId));\n  };\n  /**\r\n   * add library info query params\r\n   * @param libraryInfo\r\n   */\n  RequestParameterBuilder.prototype.addLibraryInfo = function (libraryInfo) {\n    // Telemetry Info\n    this.parameters.set(AADServerParamKeys.X_CLIENT_SKU, libraryInfo.sku);\n    this.parameters.set(AADServerParamKeys.X_CLIENT_VER, libraryInfo.version);\n    if (libraryInfo.os) {\n      this.parameters.set(AADServerParamKeys.X_CLIENT_OS, libraryInfo.os);\n    }\n    if (libraryInfo.cpu) {\n      this.parameters.set(AADServerParamKeys.X_CLIENT_CPU, libraryInfo.cpu);\n    }\n  };\n  /**\r\n   * Add client telemetry parameters\r\n   * @param appTelemetry\r\n   */\n  RequestParameterBuilder.prototype.addApplicationTelemetry = function (appTelemetry) {\n    if (appTelemetry === null || appTelemetry === void 0 ? void 0 : appTelemetry.appName) {\n      this.parameters.set(AADServerParamKeys.X_APP_NAME, appTelemetry.appName);\n    }\n    if (appTelemetry === null || appTelemetry === void 0 ? void 0 : appTelemetry.appVersion) {\n      this.parameters.set(AADServerParamKeys.X_APP_VER, appTelemetry.appVersion);\n    }\n  };\n  /**\r\n   * add prompt\r\n   * @param prompt\r\n   */\n  RequestParameterBuilder.prototype.addPrompt = function (prompt) {\n    RequestValidator.validatePrompt(prompt);\n    this.parameters.set(\"\" + AADServerParamKeys.PROMPT, encodeURIComponent(prompt));\n  };\n  /**\r\n   * add state\r\n   * @param state\r\n   */\n  RequestParameterBuilder.prototype.addState = function (state) {\n    if (!StringUtils.isEmpty(state)) {\n      this.parameters.set(AADServerParamKeys.STATE, encodeURIComponent(state));\n    }\n  };\n  /**\r\n   * add nonce\r\n   * @param nonce\r\n   */\n  RequestParameterBuilder.prototype.addNonce = function (nonce) {\n    this.parameters.set(AADServerParamKeys.NONCE, encodeURIComponent(nonce));\n  };\n  /**\r\n   * add code_challenge and code_challenge_method\r\n   * - throw if either of them are not passed\r\n   * @param codeChallenge\r\n   * @param codeChallengeMethod\r\n   */\n  RequestParameterBuilder.prototype.addCodeChallengeParams = function (codeChallenge, codeChallengeMethod) {\n    RequestValidator.validateCodeChallengeParams(codeChallenge, codeChallengeMethod);\n    if (codeChallenge && codeChallengeMethod) {\n      this.parameters.set(AADServerParamKeys.CODE_CHALLENGE, encodeURIComponent(codeChallenge));\n      this.parameters.set(AADServerParamKeys.CODE_CHALLENGE_METHOD, encodeURIComponent(codeChallengeMethod));\n    } else {\n      throw ClientConfigurationError.createInvalidCodeChallengeParamsError();\n    }\n  };\n  /**\r\n   * add the `authorization_code` passed by the user to exchange for a token\r\n   * @param code\r\n   */\n  RequestParameterBuilder.prototype.addAuthorizationCode = function (code) {\n    this.parameters.set(AADServerParamKeys.CODE, encodeURIComponent(code));\n  };\n  /**\r\n   * add the `authorization_code` passed by the user to exchange for a token\r\n   * @param code\r\n   */\n  RequestParameterBuilder.prototype.addDeviceCode = function (code) {\n    this.parameters.set(AADServerParamKeys.DEVICE_CODE, encodeURIComponent(code));\n  };\n  /**\r\n   * add the `refreshToken` passed by the user\r\n   * @param refreshToken\r\n   */\n  RequestParameterBuilder.prototype.addRefreshToken = function (refreshToken) {\n    this.parameters.set(AADServerParamKeys.REFRESH_TOKEN, encodeURIComponent(refreshToken));\n  };\n  /**\r\n   * add the `code_verifier` passed by the user to exchange for a token\r\n   * @param codeVerifier\r\n   */\n  RequestParameterBuilder.prototype.addCodeVerifier = function (codeVerifier) {\n    this.parameters.set(AADServerParamKeys.CODE_VERIFIER, encodeURIComponent(codeVerifier));\n  };\n  /**\r\n   * add client_secret\r\n   * @param clientSecret\r\n   */\n  RequestParameterBuilder.prototype.addClientSecret = function (clientSecret) {\n    this.parameters.set(AADServerParamKeys.CLIENT_SECRET, encodeURIComponent(clientSecret));\n  };\n  /**\r\n   * add clientAssertion for confidential client flows\r\n   * @param clientAssertion\r\n   */\n  RequestParameterBuilder.prototype.addClientAssertion = function (clientAssertion) {\n    if (!StringUtils.isEmpty(clientAssertion)) {\n      this.parameters.set(AADServerParamKeys.CLIENT_ASSERTION, encodeURIComponent(clientAssertion));\n    }\n  };\n  /**\r\n   * add clientAssertionType for confidential client flows\r\n   * @param clientAssertionType\r\n   */\n  RequestParameterBuilder.prototype.addClientAssertionType = function (clientAssertionType) {\n    if (!StringUtils.isEmpty(clientAssertionType)) {\n      this.parameters.set(AADServerParamKeys.CLIENT_ASSERTION_TYPE, encodeURIComponent(clientAssertionType));\n    }\n  };\n  /**\r\n   * add OBO assertion for confidential client flows\r\n   * @param clientAssertion\r\n   */\n  RequestParameterBuilder.prototype.addOboAssertion = function (oboAssertion) {\n    this.parameters.set(AADServerParamKeys.OBO_ASSERTION, encodeURIComponent(oboAssertion));\n  };\n  /**\r\n   * add grant type\r\n   * @param grantType\r\n   */\n  RequestParameterBuilder.prototype.addRequestTokenUse = function (tokenUse) {\n    this.parameters.set(AADServerParamKeys.REQUESTED_TOKEN_USE, encodeURIComponent(tokenUse));\n  };\n  /**\r\n   * add grant type\r\n   * @param grantType\r\n   */\n  RequestParameterBuilder.prototype.addGrantType = function (grantType) {\n    this.parameters.set(AADServerParamKeys.GRANT_TYPE, encodeURIComponent(grantType));\n  };\n  /**\r\n   * add client info\r\n   *\r\n   */\n  RequestParameterBuilder.prototype.addClientInfo = function () {\n    this.parameters.set(CLIENT_INFO, \"1\");\n  };\n  /**\r\n   * add extraQueryParams\r\n   * @param eQparams\r\n   */\n  RequestParameterBuilder.prototype.addExtraQueryParameters = function (eQparams) {\n    var _this = this;\n    RequestValidator.sanitizeEQParams(eQparams, this.parameters);\n    Object.keys(eQparams).forEach(function (key) {\n      _this.parameters.set(key, eQparams[key]);\n    });\n  };\n  RequestParameterBuilder.prototype.addClientCapabilitiesToClaims = function (claims, clientCapabilities) {\n    var mergedClaims;\n    // Parse provided claims into JSON object or initialize empty object\n    if (!claims) {\n      mergedClaims = {};\n    } else {\n      try {\n        mergedClaims = JSON.parse(claims);\n      } catch (e) {\n        throw ClientConfigurationError.createInvalidClaimsRequestError();\n      }\n    }\n    if (clientCapabilities && clientCapabilities.length > 0) {\n      if (!mergedClaims.hasOwnProperty(ClaimsRequestKeys.ACCESS_TOKEN)) {\n        // Add access_token key to claims object\n        mergedClaims[ClaimsRequestKeys.ACCESS_TOKEN] = {};\n      }\n      // Add xms_cc claim with provided clientCapabilities to access_token key\n      mergedClaims[ClaimsRequestKeys.ACCESS_TOKEN][ClaimsRequestKeys.XMS_CC] = {\n        values: clientCapabilities\n      };\n    }\n    return JSON.stringify(mergedClaims);\n  };\n  /**\r\n   * adds `username` for Password Grant flow\r\n   * @param username\r\n   */\n  RequestParameterBuilder.prototype.addUsername = function (username) {\n    this.parameters.set(PasswordGrantConstants.username, encodeURIComponent(username));\n  };\n  /**\r\n   * adds `password` for Password Grant flow\r\n   * @param password\r\n   */\n  RequestParameterBuilder.prototype.addPassword = function (password) {\n    this.parameters.set(PasswordGrantConstants.password, encodeURIComponent(password));\n  };\n  /**\r\n   * add pop_jwk to query params\r\n   * @param cnfString\r\n   */\n  RequestParameterBuilder.prototype.addPopToken = function (cnfString) {\n    if (!StringUtils.isEmpty(cnfString)) {\n      this.parameters.set(AADServerParamKeys.TOKEN_TYPE, AuthenticationScheme.POP);\n      this.parameters.set(AADServerParamKeys.REQ_CNF, encodeURIComponent(cnfString));\n    }\n  };\n  /**\r\n   * add SSH JWK and key ID to query params\r\n   */\n  RequestParameterBuilder.prototype.addSshJwk = function (sshJwkString) {\n    if (!StringUtils.isEmpty(sshJwkString)) {\n      this.parameters.set(AADServerParamKeys.TOKEN_TYPE, AuthenticationScheme.SSH);\n      this.parameters.set(AADServerParamKeys.REQ_CNF, encodeURIComponent(sshJwkString));\n    }\n  };\n  /**\r\n   * add server telemetry fields\r\n   * @param serverTelemetryManager\r\n   */\n  RequestParameterBuilder.prototype.addServerTelemetry = function (serverTelemetryManager) {\n    this.parameters.set(AADServerParamKeys.X_CLIENT_CURR_TELEM, serverTelemetryManager.generateCurrentRequestHeaderValue());\n    this.parameters.set(AADServerParamKeys.X_CLIENT_LAST_TELEM, serverTelemetryManager.generateLastRequestHeaderValue());\n  };\n  /**\r\n   * Adds parameter that indicates to the server that throttling is supported\r\n   */\n  RequestParameterBuilder.prototype.addThrottling = function () {\n    this.parameters.set(AADServerParamKeys.X_MS_LIB_CAPABILITY, ThrottlingConstants.X_MS_LIB_CAPABILITY_VALUE);\n  };\n  /**\r\n   * Adds logout_hint parameter for \"silent\" logout which prevent server account picker\r\n   */\n  RequestParameterBuilder.prototype.addLogoutHint = function (logoutHint) {\n    this.parameters.set(AADServerParamKeys.LOGOUT_HINT, encodeURIComponent(logoutHint));\n  };\n  /**\r\n   * Utility to create a URL from the params map\r\n   */\n  RequestParameterBuilder.prototype.createQueryString = function () {\n    var queryParameterArray = new Array();\n    this.parameters.forEach(function (value, key) {\n      queryParameterArray.push(key + \"=\" + value);\n    });\n    return queryParameterArray.join(\"&\");\n  };\n  return RequestParameterBuilder;\n}();\nexport { RequestParameterBuilder };","map":{"version":3,"mappings":"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","names":["parameters","Map","RequestParameterBuilder","set","AADServerParamKeys","RESPONSE_TYPE","encodeURIComponent","Constants","CODE_RESPONSE_TYPE","TOKEN_RESPONSE_TYPE","ID_TOKEN_RESPONSE_TYPE","responseMode","RESPONSE_MODE","ResponseMode","QUERY","NATIVE_BROKER","scopes","addOidcScopes","requestScopes","OIDC_DEFAULT_SCOPES","scopeSet","ScopeSet","SCOPE","printScopes","clientId","CLIENT_ID","redirectUri","RequestValidator","validateRedirectUri","REDIRECT_URI","POST_LOGOUT_URI","idTokenHint","ID_TOKEN_HINT","domainHint","SSOTypes","DOMAIN_HINT","loginHint","LOGIN_HINT","HeaderNames","CCS_HEADER","clientInfo","uid","utid","sid","SID","claims","clientCapabilities","mergedClaims","addClientCapabilitiesToClaims","validateClaims","CLAIMS","correlationId","CLIENT_REQUEST_ID","libraryInfo","X_CLIENT_SKU","sku","X_CLIENT_VER","version","os","X_CLIENT_OS","cpu","X_CLIENT_CPU","appTelemetry","appName","X_APP_NAME","appVersion","X_APP_VER","prompt","validatePrompt","PROMPT","state","StringUtils","isEmpty","STATE","nonce","NONCE","codeChallenge","codeChallengeMethod","validateCodeChallengeParams","CODE_CHALLENGE","CODE_CHALLENGE_METHOD","ClientConfigurationError","createInvalidCodeChallengeParamsError","code","CODE","DEVICE_CODE","refreshToken","REFRESH_TOKEN","codeVerifier","CODE_VERIFIER","clientSecret","CLIENT_SECRET","clientAssertion","CLIENT_ASSERTION","clientAssertionType","CLIENT_ASSERTION_TYPE","oboAssertion","OBO_ASSERTION","tokenUse","REQUESTED_TOKEN_USE","grantType","GRANT_TYPE","CLIENT_INFO","eQparams","_this","sanitizeEQParams","Object","keys","forEach","key","JSON","parse","e","createInvalidClaimsRequestError","length","hasOwnProperty","ClaimsRequestKeys","ACCESS_TOKEN","XMS_CC","values","stringify","username","PasswordGrantConstants","password","cnfString","TOKEN_TYPE","AuthenticationScheme","POP","REQ_CNF","sshJwkString","SSH","serverTelemetryManager","X_CLIENT_CURR_TELEM","generateCurrentRequestHeaderValue","X_CLIENT_LAST_TELEM","generateLastRequestHeaderValue","X_MS_LIB_CAPABILITY","ThrottlingConstants","X_MS_LIB_CAPABILITY_VALUE","logoutHint","LOGOUT_HINT","queryParameterArray","Array","value","push","join"],"sources":["C:\\Azure\\gitauthdemo\\ms-identity-javascript-react-tutorial\\3-Authorization-II\\2-call-api-b2c\\SPA\\node_modules\\@azure\\msal-common\\src\\request\\RequestParameterBuilder.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AADServerParamKeys, Constants, ResponseMode, SSOTypes, CLIENT_INFO, AuthenticationScheme, ClaimsRequestKeys, PasswordGrantConstants, OIDC_DEFAULT_SCOPES, ThrottlingConstants, HeaderNames} from \"../utils/Constants\";\nimport { ScopeSet } from \"./ScopeSet\";\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\nimport { StringDict } from \"../utils/MsalTypes\";\nimport { RequestValidator } from \"./RequestValidator\";\nimport { ApplicationTelemetry, LibraryInfo } from \"../config/ClientConfiguration\";\nimport { StringUtils } from \"../utils/StringUtils\";\nimport { ServerTelemetryManager } from \"../telemetry/server/ServerTelemetryManager\";\nimport { ClientInfo } from \"../account/ClientInfo\";\n\nexport class RequestParameterBuilder {\n\n    private parameters: Map<string, string>;\n\n    constructor() {\n        this.parameters = new Map<string, string>();\n    }\n\n    /**\n     * add response_type = code\n     */\n    addResponseTypeCode(): void {\n        this.parameters.set(\n            AADServerParamKeys.RESPONSE_TYPE, encodeURIComponent(Constants.CODE_RESPONSE_TYPE)\n        );\n    }\n\n    /**\n     * add response_type = token id_token\n     */\n    addResponseTypeForTokenAndIdToken(): void {\n        this.parameters.set(\n            AADServerParamKeys.RESPONSE_TYPE, encodeURIComponent(`${Constants.TOKEN_RESPONSE_TYPE} ${Constants.ID_TOKEN_RESPONSE_TYPE}`)\n        );\n    }\n\n    /**\n     * add response_mode. defaults to query.\n     * @param responseMode\n     */\n    addResponseMode(responseMode?: ResponseMode): void {\n        this.parameters.set(\n            AADServerParamKeys.RESPONSE_MODE,\n            encodeURIComponent((responseMode) ? responseMode : ResponseMode.QUERY)\n        );\n    }\n\n    /**\n     * Add flag to indicate STS should attempt to use WAM if available\n     */\n    addNativeBroker(): void {\n        this.parameters.set(\n            AADServerParamKeys.NATIVE_BROKER,\n            encodeURIComponent(\"1\")\n        );\n    }\n\n    /**\n     * add scopes. set addOidcScopes to false to prevent default scopes in non-user scenarios\n     * @param scopeSet\n     * @param addOidcScopes\n     */\n    addScopes(scopes: string[], addOidcScopes: boolean = true): void {\n        const requestScopes = addOidcScopes ? [...scopes || [], ...OIDC_DEFAULT_SCOPES] : scopes || [];\n        const scopeSet = new ScopeSet(requestScopes);\n        this.parameters.set(AADServerParamKeys.SCOPE, encodeURIComponent(scopeSet.printScopes()));\n    }\n\n    /**\n     * add clientId\n     * @param clientId\n     */\n    addClientId(clientId: string): void {\n        this.parameters.set(AADServerParamKeys.CLIENT_ID, encodeURIComponent(clientId));\n    }\n\n    /**\n     * add redirect_uri\n     * @param redirectUri\n     */\n    addRedirectUri(redirectUri: string): void {\n        RequestValidator.validateRedirectUri(redirectUri);\n        this.parameters.set(AADServerParamKeys.REDIRECT_URI, encodeURIComponent(redirectUri));\n    }\n\n    /**\n     * add post logout redirectUri\n     * @param redirectUri\n     */\n    addPostLogoutRedirectUri(redirectUri: string): void {\n        RequestValidator.validateRedirectUri(redirectUri);\n        this.parameters.set(AADServerParamKeys.POST_LOGOUT_URI, encodeURIComponent(redirectUri));\n    }\n\n    /**\n     * add id_token_hint to logout request\n     * @param idTokenHint\n     */\n    addIdTokenHint(idTokenHint: string): void {\n        this.parameters.set(AADServerParamKeys.ID_TOKEN_HINT, encodeURIComponent(idTokenHint));\n    }\n\n    /**\n     * add domain_hint\n     * @param domainHint\n     */\n    addDomainHint(domainHint: string): void {\n        this.parameters.set(SSOTypes.DOMAIN_HINT, encodeURIComponent(domainHint));\n    }\n\n    /**\n     * add login_hint\n     * @param loginHint\n     */\n    addLoginHint(loginHint: string): void {\n        this.parameters.set(SSOTypes.LOGIN_HINT, encodeURIComponent(loginHint));\n    }\n\n    /**\n     * Adds the CCS (Cache Credential Service) query parameter for login_hint\n     * @param loginHint\n     */\n    addCcsUpn(loginHint: string): void {\n        this.parameters.set(HeaderNames.CCS_HEADER, encodeURIComponent(`UPN:${loginHint}`));\n    }\n\n    /**\n     * Adds the CCS (Cache Credential Service) query parameter for account object\n     * @param loginHint\n     */\n    addCcsOid(clientInfo: ClientInfo): void {\n        this.parameters.set(HeaderNames.CCS_HEADER, encodeURIComponent(`Oid:${clientInfo.uid}@${clientInfo.utid}`));\n    }\n\n    /**\n     * add sid\n     * @param sid\n     */\n    addSid(sid: string): void {\n        this.parameters.set(SSOTypes.SID, encodeURIComponent(sid));\n    }\n\n    /**\n     * add claims\n     * @param claims\n     */\n    addClaims(claims?: string, clientCapabilities?: Array<string>): void {\n        const mergedClaims = this.addClientCapabilitiesToClaims(claims, clientCapabilities);\n        RequestValidator.validateClaims(mergedClaims);\n        this.parameters.set(AADServerParamKeys.CLAIMS, encodeURIComponent(mergedClaims));\n    }\n\n    /**\n     * add correlationId\n     * @param correlationId\n     */\n    addCorrelationId(correlationId: string): void {\n        this.parameters.set(AADServerParamKeys.CLIENT_REQUEST_ID, encodeURIComponent(correlationId));\n    }\n\n    /**\n     * add library info query params\n     * @param libraryInfo\n     */\n    addLibraryInfo(libraryInfo: LibraryInfo): void {\n        // Telemetry Info\n        this.parameters.set(AADServerParamKeys.X_CLIENT_SKU, libraryInfo.sku);\n        this.parameters.set(AADServerParamKeys.X_CLIENT_VER, libraryInfo.version);\n        if (libraryInfo.os) {\n            this.parameters.set(AADServerParamKeys.X_CLIENT_OS, libraryInfo.os);\n        }\n        if (libraryInfo.cpu) {\n            this.parameters.set(AADServerParamKeys.X_CLIENT_CPU, libraryInfo.cpu);\n        }\n    }\n\n    /**\n     * Add client telemetry parameters\n     * @param appTelemetry\n     */\n    addApplicationTelemetry(appTelemetry: ApplicationTelemetry): void {\n        if (appTelemetry?.appName) {\n            this.parameters.set(AADServerParamKeys.X_APP_NAME, appTelemetry.appName);\n        }\n\n        if (appTelemetry?.appVersion) {\n            this.parameters.set(AADServerParamKeys.X_APP_VER, appTelemetry.appVersion);\n        }\n    }\n\n    /**\n     * add prompt\n     * @param prompt\n     */\n    addPrompt(prompt: string): void {\n        RequestValidator.validatePrompt(prompt);\n        this.parameters.set(`${AADServerParamKeys.PROMPT}`, encodeURIComponent(prompt));\n    }\n\n    /**\n     * add state\n     * @param state\n     */\n    addState(state: string): void {\n        if (!StringUtils.isEmpty(state)) {\n            this.parameters.set(AADServerParamKeys.STATE, encodeURIComponent(state));\n        }\n    }\n\n    /**\n     * add nonce\n     * @param nonce\n     */\n    addNonce(nonce: string): void {\n        this.parameters.set(AADServerParamKeys.NONCE, encodeURIComponent(nonce));\n    }\n\n    /**\n     * add code_challenge and code_challenge_method\n     * - throw if either of them are not passed\n     * @param codeChallenge\n     * @param codeChallengeMethod\n     */\n    addCodeChallengeParams(\n        codeChallenge: string,\n        codeChallengeMethod: string\n    ): void {\n        RequestValidator.validateCodeChallengeParams(codeChallenge, codeChallengeMethod);\n        if (codeChallenge && codeChallengeMethod) {\n            this.parameters.set(AADServerParamKeys.CODE_CHALLENGE, encodeURIComponent(codeChallenge));\n            this.parameters.set(AADServerParamKeys.CODE_CHALLENGE_METHOD, encodeURIComponent(codeChallengeMethod));\n        } else {\n            throw ClientConfigurationError.createInvalidCodeChallengeParamsError();\n        }\n    }\n\n    /**\n     * add the `authorization_code` passed by the user to exchange for a token\n     * @param code\n     */\n    addAuthorizationCode(code: string): void {\n        this.parameters.set(AADServerParamKeys.CODE, encodeURIComponent(code));\n    }\n\n    /**\n     * add the `authorization_code` passed by the user to exchange for a token\n     * @param code\n     */\n    addDeviceCode(code: string): void {\n        this.parameters.set(AADServerParamKeys.DEVICE_CODE, encodeURIComponent(code));\n    }\n\n    /**\n     * add the `refreshToken` passed by the user\n     * @param refreshToken\n     */\n    addRefreshToken(refreshToken: string): void {\n        this.parameters.set(AADServerParamKeys.REFRESH_TOKEN, encodeURIComponent(refreshToken));\n    }\n\n    /**\n     * add the `code_verifier` passed by the user to exchange for a token\n     * @param codeVerifier\n     */\n    addCodeVerifier(codeVerifier: string): void {\n        this.parameters.set(AADServerParamKeys.CODE_VERIFIER, encodeURIComponent(codeVerifier));\n    }\n\n    /**\n     * add client_secret\n     * @param clientSecret\n     */\n    addClientSecret(clientSecret: string): void {\n        this.parameters.set(AADServerParamKeys.CLIENT_SECRET, encodeURIComponent(clientSecret));\n    }\n\n    /**\n     * add clientAssertion for confidential client flows\n     * @param clientAssertion\n     */\n    addClientAssertion(clientAssertion: string): void {\n        if (!StringUtils.isEmpty(clientAssertion)) {\n            this.parameters.set(AADServerParamKeys.CLIENT_ASSERTION, encodeURIComponent(clientAssertion));\n        }\n    }\n\n    /**\n     * add clientAssertionType for confidential client flows\n     * @param clientAssertionType\n     */\n    addClientAssertionType(clientAssertionType: string): void {\n        if (!StringUtils.isEmpty(clientAssertionType)) {\n            this.parameters.set(AADServerParamKeys.CLIENT_ASSERTION_TYPE, encodeURIComponent(clientAssertionType));\n        }\n    }\n\n    /**\n     * add OBO assertion for confidential client flows\n     * @param clientAssertion\n     */\n    addOboAssertion(oboAssertion: string): void {\n        this.parameters.set(AADServerParamKeys.OBO_ASSERTION, encodeURIComponent(oboAssertion));\n    }\n\n    /**\n     * add grant type\n     * @param grantType\n     */\n    addRequestTokenUse(tokenUse: string): void {\n        this.parameters.set(AADServerParamKeys.REQUESTED_TOKEN_USE, encodeURIComponent(tokenUse));\n    }\n\n    /**\n     * add grant type\n     * @param grantType\n     */\n    addGrantType(grantType: string): void {\n        this.parameters.set(AADServerParamKeys.GRANT_TYPE, encodeURIComponent(grantType));\n    }\n\n    /**\n     * add client info\n     *\n     */\n    addClientInfo(): void {\n        this.parameters.set(CLIENT_INFO, \"1\");\n    }\n\n    /**\n     * add extraQueryParams\n     * @param eQparams\n     */\n    addExtraQueryParameters(eQparams: StringDict): void {\n        RequestValidator.sanitizeEQParams(eQparams, this.parameters);\n        Object.keys(eQparams).forEach((key) => {\n            this.parameters.set(key, eQparams[key]);\n        });\n    }\n\n    addClientCapabilitiesToClaims(claims?: string, clientCapabilities?: Array<string>): string {\n        let mergedClaims: object;\n\n        // Parse provided claims into JSON object or initialize empty object\n        if (!claims) {\n            mergedClaims = {};\n        } else {\n            try {\n                mergedClaims = JSON.parse(claims);\n            } catch(e) {\n                throw ClientConfigurationError.createInvalidClaimsRequestError();\n            }\n        }\n\n        if (clientCapabilities && clientCapabilities.length > 0) {\n            if (!mergedClaims.hasOwnProperty(ClaimsRequestKeys.ACCESS_TOKEN)){\n                // Add access_token key to claims object\n                mergedClaims[ClaimsRequestKeys.ACCESS_TOKEN] = {};\n            }\n\n            // Add xms_cc claim with provided clientCapabilities to access_token key\n            mergedClaims[ClaimsRequestKeys.ACCESS_TOKEN][ClaimsRequestKeys.XMS_CC] = {\n                values: clientCapabilities\n            };\n        }\n\n        return JSON.stringify(mergedClaims);\n    }\n\n    /**\n     * adds `username` for Password Grant flow\n     * @param username\n     */\n    addUsername(username: string): void {\n        this.parameters.set(PasswordGrantConstants.username, encodeURIComponent(username));\n    }\n\n    /**\n     * adds `password` for Password Grant flow\n     * @param password\n     */\n    addPassword(password: string): void {\n        this.parameters.set(PasswordGrantConstants.password, encodeURIComponent(password));\n    }\n\n    /**\n     * add pop_jwk to query params\n     * @param cnfString\n     */\n    addPopToken(cnfString: string): void {\n        if (!StringUtils.isEmpty(cnfString)) {\n            this.parameters.set(AADServerParamKeys.TOKEN_TYPE, AuthenticationScheme.POP);\n            this.parameters.set(AADServerParamKeys.REQ_CNF, encodeURIComponent(cnfString));\n        }\n    }\n\n    /**\n     * add SSH JWK and key ID to query params\n     */\n    addSshJwk(sshJwkString: string): void {\n        if(!StringUtils.isEmpty(sshJwkString)) {\n            this.parameters.set(AADServerParamKeys.TOKEN_TYPE, AuthenticationScheme.SSH);\n            this.parameters.set(AADServerParamKeys.REQ_CNF, encodeURIComponent(sshJwkString));\n        }\n    }\n\n    /**\n     * add server telemetry fields\n     * @param serverTelemetryManager\n     */\n    addServerTelemetry(serverTelemetryManager: ServerTelemetryManager): void {\n        this.parameters.set(AADServerParamKeys.X_CLIENT_CURR_TELEM, serverTelemetryManager.generateCurrentRequestHeaderValue());\n        this.parameters.set(AADServerParamKeys.X_CLIENT_LAST_TELEM, serverTelemetryManager.generateLastRequestHeaderValue());\n    }\n\n    /**\n     * Adds parameter that indicates to the server that throttling is supported\n     */\n    addThrottling(): void {\n        this.parameters.set(AADServerParamKeys.X_MS_LIB_CAPABILITY, ThrottlingConstants.X_MS_LIB_CAPABILITY_VALUE);\n    }\n\n    /**\n     * Adds logout_hint parameter for \"silent\" logout which prevent server account picker\n     */\n    addLogoutHint(logoutHint: string): void {\n        this.parameters.set(AADServerParamKeys.LOGOUT_HINT, encodeURIComponent(logoutHint));\n    }\n\n    /**\n     * Utility to create a URL from the params map\n     */\n    createQueryString(): string {\n        const queryParameterArray: Array<string> = new Array<string>();\n\n        this.parameters.forEach((value, key) => {\n            queryParameterArray.push(`${key}=${value}`);\n        });\n\n        return queryParameterArray.join(\"&\");\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}