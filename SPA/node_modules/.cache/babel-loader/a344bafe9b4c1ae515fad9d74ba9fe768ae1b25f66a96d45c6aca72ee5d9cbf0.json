{"ast":null,"code":"/*! @azure/msal-common v8.0.0 2022-11-07 */\n'use strict';\n\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { Constants } from '../utils/Constants.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Log message level.\r\n */\nvar LogLevel;\n(function (LogLevel) {\n  LogLevel[LogLevel[\"Error\"] = 0] = \"Error\";\n  LogLevel[LogLevel[\"Warning\"] = 1] = \"Warning\";\n  LogLevel[LogLevel[\"Info\"] = 2] = \"Info\";\n  LogLevel[LogLevel[\"Verbose\"] = 3] = \"Verbose\";\n  LogLevel[LogLevel[\"Trace\"] = 4] = \"Trace\";\n})(LogLevel || (LogLevel = {}));\n/**\r\n * Class which facilitates logging of messages to a specific place.\r\n */\nvar Logger = /** @class */function () {\n  function Logger(loggerOptions, packageName, packageVersion) {\n    // Current log level, defaults to info.\n    this.level = LogLevel.Info;\n    var defaultLoggerCallback = function () {\n      return;\n    };\n    this.localCallback = loggerOptions.loggerCallback || defaultLoggerCallback;\n    this.piiLoggingEnabled = loggerOptions.piiLoggingEnabled || false;\n    this.level = typeof loggerOptions.logLevel === \"number\" ? loggerOptions.logLevel : LogLevel.Info;\n    this.correlationId = loggerOptions.correlationId || Constants.EMPTY_STRING;\n    this.packageName = packageName || Constants.EMPTY_STRING;\n    this.packageVersion = packageVersion || Constants.EMPTY_STRING;\n  }\n  /**\r\n   * Create new Logger with existing configurations.\r\n   */\n  Logger.prototype.clone = function (packageName, packageVersion, correlationId) {\n    return new Logger({\n      loggerCallback: this.localCallback,\n      piiLoggingEnabled: this.piiLoggingEnabled,\n      logLevel: this.level,\n      correlationId: correlationId || this.correlationId\n    }, packageName, packageVersion);\n  };\n  /**\r\n   * Log message with required options.\r\n   */\n  Logger.prototype.logMessage = function (logMessage, options) {\n    if (options.logLevel > this.level || !this.piiLoggingEnabled && options.containsPii) {\n      return;\n    }\n    var timestamp = new Date().toUTCString();\n    // Add correlationId to logs if set, correlationId provided on log messages take precedence\n    var logHeader;\n    if (!StringUtils.isEmpty(options.correlationId)) {\n      logHeader = \"[\" + timestamp + \"] : [\" + options.correlationId + \"]\";\n    } else if (!StringUtils.isEmpty(this.correlationId)) {\n      logHeader = \"[\" + timestamp + \"] : [\" + this.correlationId + \"]\";\n    } else {\n      logHeader = \"[\" + timestamp + \"]\";\n    }\n    var log = logHeader + \" : \" + this.packageName + \"@\" + this.packageVersion + \" : \" + LogLevel[options.logLevel] + \" - \" + logMessage;\n    // debug(`msal:${LogLevel[options.logLevel]}${options.containsPii ? \"-Pii\": Constants.EMPTY_STRING}${options.context ? `:${options.context}` : Constants.EMPTY_STRING}`)(logMessage);\n    this.executeCallback(options.logLevel, log, options.containsPii || false);\n  };\n  /**\r\n   * Execute callback with message.\r\n   */\n  Logger.prototype.executeCallback = function (level, message, containsPii) {\n    if (this.localCallback) {\n      this.localCallback(level, message, containsPii);\n    }\n  };\n  /**\r\n   * Logs error messages.\r\n   */\n  Logger.prototype.error = function (message, correlationId) {\n    this.logMessage(message, {\n      logLevel: LogLevel.Error,\n      containsPii: false,\n      correlationId: correlationId || Constants.EMPTY_STRING\n    });\n  };\n  /**\r\n   * Logs error messages with PII.\r\n   */\n  Logger.prototype.errorPii = function (message, correlationId) {\n    this.logMessage(message, {\n      logLevel: LogLevel.Error,\n      containsPii: true,\n      correlationId: correlationId || Constants.EMPTY_STRING\n    });\n  };\n  /**\r\n   * Logs warning messages.\r\n   */\n  Logger.prototype.warning = function (message, correlationId) {\n    this.logMessage(message, {\n      logLevel: LogLevel.Warning,\n      containsPii: false,\n      correlationId: correlationId || Constants.EMPTY_STRING\n    });\n  };\n  /**\r\n   * Logs warning messages with PII.\r\n   */\n  Logger.prototype.warningPii = function (message, correlationId) {\n    this.logMessage(message, {\n      logLevel: LogLevel.Warning,\n      containsPii: true,\n      correlationId: correlationId || Constants.EMPTY_STRING\n    });\n  };\n  /**\r\n   * Logs info messages.\r\n   */\n  Logger.prototype.info = function (message, correlationId) {\n    this.logMessage(message, {\n      logLevel: LogLevel.Info,\n      containsPii: false,\n      correlationId: correlationId || Constants.EMPTY_STRING\n    });\n  };\n  /**\r\n   * Logs info messages with PII.\r\n   */\n  Logger.prototype.infoPii = function (message, correlationId) {\n    this.logMessage(message, {\n      logLevel: LogLevel.Info,\n      containsPii: true,\n      correlationId: correlationId || Constants.EMPTY_STRING\n    });\n  };\n  /**\r\n   * Logs verbose messages.\r\n   */\n  Logger.prototype.verbose = function (message, correlationId) {\n    this.logMessage(message, {\n      logLevel: LogLevel.Verbose,\n      containsPii: false,\n      correlationId: correlationId || Constants.EMPTY_STRING\n    });\n  };\n  /**\r\n   * Logs verbose messages with PII.\r\n   */\n  Logger.prototype.verbosePii = function (message, correlationId) {\n    this.logMessage(message, {\n      logLevel: LogLevel.Verbose,\n      containsPii: true,\n      correlationId: correlationId || Constants.EMPTY_STRING\n    });\n  };\n  /**\r\n   * Logs trace messages.\r\n   */\n  Logger.prototype.trace = function (message, correlationId) {\n    this.logMessage(message, {\n      logLevel: LogLevel.Trace,\n      containsPii: false,\n      correlationId: correlationId || Constants.EMPTY_STRING\n    });\n  };\n  /**\r\n   * Logs trace messages with PII.\r\n   */\n  Logger.prototype.tracePii = function (message, correlationId) {\n    this.logMessage(message, {\n      logLevel: LogLevel.Trace,\n      containsPii: true,\n      correlationId: correlationId || Constants.EMPTY_STRING\n    });\n  };\n  /**\r\n   * Returns whether PII Logging is enabled or not.\r\n   */\n  Logger.prototype.isPiiLoggingEnabled = function () {\n    return this.piiLoggingEnabled || false;\n  };\n  return Logger;\n}();\nexport { LogLevel, Logger };","map":{"version":3,"mappings":"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","names":["LogLevel","loggerOptions","packageName","packageVersion","Info","defaultLoggerCallback","localCallback","loggerCallback","piiLoggingEnabled","level","logLevel","correlationId","Constants","EMPTY_STRING","Logger","logMessage","options","containsPii","timestamp","Date","toUTCString","logHeader","StringUtils","isEmpty","log","executeCallback","message","Error","Warning","Verbose","Trace"],"sources":["C:\\Azure\\gitauthdemo\\ms-identity-javascript-react-tutorial\\3-Authorization-II\\2-call-api-b2c\\SPA\\node_modules\\@azure\\msal-common\\src\\logger\\Logger.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { StringUtils } from \"../utils/StringUtils\";\nimport { LoggerOptions } from \"../config/ClientConfiguration\";\nimport { Constants } from \"../utils/Constants\";\n\n/**\n * Options for logger messages.\n */\nexport type LoggerMessageOptions = {\n    logLevel: LogLevel,\n    containsPii?: boolean,\n    context?: string,\n    correlationId?: string\n};\n\n/**\n * Log message level.\n */\nexport enum LogLevel {\n    Error,\n    Warning,\n    Info,\n    Verbose,\n    Trace\n}\n\n/**\n * Callback to send the messages to.\n */\nexport interface ILoggerCallback {\n    (level: LogLevel, message: string, containsPii: boolean): void;\n}\n\n/**\n * Class which facilitates logging of messages to a specific place.\n */\nexport class Logger {\n\n    // Correlation ID for request, usually set by user.\n    private correlationId: string;\n\n    // Current log level, defaults to info.\n    private level: LogLevel = LogLevel.Info;\n\n    // Boolean describing whether PII logging is allowed.\n    private piiLoggingEnabled: boolean;\n\n    // Callback to send messages to.\n    private localCallback: ILoggerCallback;\n\n    // Package name implementing this logger\n    private packageName: string;\n\n    // Package version implementing this logger\n    private packageVersion: string;\n\n    constructor(loggerOptions: LoggerOptions, packageName?: string, packageVersion?: string) {\n        const defaultLoggerCallback = () => {\n            return;\n        };\n        this.localCallback = loggerOptions.loggerCallback || defaultLoggerCallback;\n        this.piiLoggingEnabled = loggerOptions.piiLoggingEnabled || false;\n        this.level = typeof(loggerOptions.logLevel) === \"number\" ? loggerOptions.logLevel : LogLevel.Info;\n        this.correlationId = loggerOptions.correlationId || Constants.EMPTY_STRING;\n\n        this.packageName = packageName || Constants.EMPTY_STRING;\n        this.packageVersion = packageVersion || Constants.EMPTY_STRING;\n    }\n\n    /**\n     * Create new Logger with existing configurations.\n     */\n    public clone(packageName: string, packageVersion: string, correlationId?: string): Logger {\n        return new Logger({loggerCallback: this.localCallback, piiLoggingEnabled: this.piiLoggingEnabled, logLevel: this.level, correlationId: correlationId || this.correlationId}, packageName, packageVersion);\n    }\n\n    /**\n     * Log message with required options.\n     */\n    private logMessage(logMessage: string, options: LoggerMessageOptions): void {\n        if ((options.logLevel > this.level) || (!this.piiLoggingEnabled && options.containsPii)) {\n            return;\n        }\n        const timestamp = new Date().toUTCString();\n\n        // Add correlationId to logs if set, correlationId provided on log messages take precedence\n        let logHeader: string;\n        if (!StringUtils.isEmpty(options.correlationId)) {\n            logHeader = `[${timestamp}] : [${options.correlationId}]`;\n        } else if (!StringUtils.isEmpty(this.correlationId)) {\n            logHeader = `[${timestamp}] : [${this.correlationId}]`;\n        } else {\n            logHeader = `[${timestamp}]`;\n        }\n\n        const log = `${logHeader} : ${this.packageName}@${this.packageVersion} : ${LogLevel[options.logLevel]} - ${logMessage}`;\n        // debug(`msal:${LogLevel[options.logLevel]}${options.containsPii ? \"-Pii\": Constants.EMPTY_STRING}${options.context ? `:${options.context}` : Constants.EMPTY_STRING}`)(logMessage);\n        this.executeCallback(options.logLevel, log, options.containsPii || false);\n    }\n\n    /**\n     * Execute callback with message.\n     */\n    executeCallback(level: LogLevel, message: string, containsPii: boolean): void {\n        if (this.localCallback) {\n            this.localCallback(level, message, containsPii);\n        }\n    }\n\n    /**\n     * Logs error messages.\n     */\n    error(message: string, correlationId?: string): void {\n        this.logMessage(message, {\n            logLevel: LogLevel.Error,\n            containsPii: false,\n            correlationId: correlationId || Constants.EMPTY_STRING\n        });\n    }\n\n    /**\n     * Logs error messages with PII.\n     */\n    errorPii(message: string, correlationId?: string): void {\n        this.logMessage(message, {\n            logLevel: LogLevel.Error,\n            containsPii: true,\n            correlationId: correlationId || Constants.EMPTY_STRING\n        });\n    }\n\n    /**\n     * Logs warning messages.\n     */\n    warning(message: string, correlationId?: string): void {\n        this.logMessage(message, {\n            logLevel: LogLevel.Warning,\n            containsPii: false,\n            correlationId: correlationId || Constants.EMPTY_STRING\n        });\n    }\n\n    /**\n     * Logs warning messages with PII.\n     */\n    warningPii(message: string, correlationId?: string): void {\n        this.logMessage(message, {\n            logLevel: LogLevel.Warning,\n            containsPii: true,\n            correlationId: correlationId || Constants.EMPTY_STRING\n        });\n    }\n\n    /**\n     * Logs info messages.\n     */\n    info(message: string, correlationId?: string): void {\n        this.logMessage(message, {\n            logLevel: LogLevel.Info,\n            containsPii: false,\n            correlationId: correlationId || Constants.EMPTY_STRING\n        });\n    }\n\n    /**\n     * Logs info messages with PII.\n     */\n    infoPii(message: string, correlationId?: string): void {\n        this.logMessage(message, {\n            logLevel: LogLevel.Info,\n            containsPii: true,\n            correlationId: correlationId || Constants.EMPTY_STRING\n        });\n    }\n\n    /**\n     * Logs verbose messages.\n     */\n    verbose(message: string, correlationId?: string): void {\n        this.logMessage(message, {\n            logLevel: LogLevel.Verbose,\n            containsPii: false,\n            correlationId: correlationId || Constants.EMPTY_STRING\n        });\n    }\n\n    /**\n     * Logs verbose messages with PII.\n     */\n    verbosePii(message: string, correlationId?: string): void {\n        this.logMessage(message, {\n            logLevel: LogLevel.Verbose,\n            containsPii: true,\n            correlationId: correlationId || Constants.EMPTY_STRING\n        });\n    }\n\n    /**\n     * Logs trace messages.\n     */\n    trace(message: string, correlationId?: string): void {\n        this.logMessage(message, {\n            logLevel: LogLevel.Trace,\n            containsPii: false,\n            correlationId: correlationId || Constants.EMPTY_STRING\n        });\n    }\n\n    /**\n     * Logs trace messages with PII.\n     */\n    tracePii(message: string, correlationId?: string): void {\n        this.logMessage(message, {\n            logLevel: LogLevel.Trace,\n            containsPii: true,\n            correlationId: correlationId || Constants.EMPTY_STRING\n        });\n    }\n\n    /**\n     * Returns whether PII Logging is enabled or not.\n     */\n    isPiiLoggingEnabled(): boolean {\n        return this.piiLoggingEnabled || false;\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}