{"ast":null,"code":"/*! @azure/msal-browser v2.31.0 2022-11-07 */\n'use strict';\n\nimport { __extends, __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { AuthError, Constants } from '@azure/msal-common';\nimport { StandardInteractionClient } from './StandardInteractionClient.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { InteractionType } from '../utils/BrowserConstants.js';\nimport { SilentHandler } from '../interaction_handler/SilentHandler.js';\nimport { HybridSpaAuthorizationCodeClient } from './HybridSpaAuthorizationCodeClient.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nvar SilentAuthCodeClient = /** @class */function (_super) {\n  __extends(SilentAuthCodeClient, _super);\n  function SilentAuthCodeClient(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, apiId, performanceClient, nativeMessageHandler, correlationId) {\n    var _this = _super.call(this, config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeMessageHandler, correlationId) || this;\n    _this.apiId = apiId;\n    return _this;\n  }\n  /**\r\n   * Acquires a token silently by redeeming an authorization code against the /token endpoint\r\n   * @param request\r\n   */\n  SilentAuthCodeClient.prototype.acquireToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var silentRequest, serverTelemetryManager, authCodeRequest, clientConfig, authClient, silentHandler, e_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.logger.trace(\"SilentAuthCodeClient.acquireToken called\");\n            // Auth code payload is required\n            if (!request.code) {\n              throw BrowserAuthError.createAuthCodeRequiredError();\n            }\n            return [4 /*yield*/, this.initializeAuthorizationRequest(request, InteractionType.Silent)];\n          case 1:\n            silentRequest = _a.sent();\n            this.browserStorage.updateCacheEntries(silentRequest.state, silentRequest.nonce, silentRequest.authority, silentRequest.loginHint || Constants.EMPTY_STRING, silentRequest.account || null);\n            serverTelemetryManager = this.initializeServerTelemetryManager(this.apiId);\n            _a.label = 2;\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n            authCodeRequest = __assign(__assign({}, silentRequest), {\n              code: request.code\n            });\n            return [4 /*yield*/, this.getClientConfiguration(serverTelemetryManager, silentRequest.authority)];\n          case 3:\n            clientConfig = _a.sent();\n            authClient = new HybridSpaAuthorizationCodeClient(clientConfig);\n            this.logger.verbose(\"Auth code client created\");\n            silentHandler = new SilentHandler(authClient, this.browserStorage, authCodeRequest, this.logger, this.config.system);\n            // Handle auth code parameters from request\n            return [2 /*return*/, silentHandler.handleCodeResponseFromServer({\n              code: request.code,\n              msgraph_host: request.msGraphHost,\n              cloud_graph_host_name: request.cloudGraphHostName,\n              cloud_instance_host_name: request.cloudInstanceHostName\n            }, silentRequest.state, authClient.authority, this.networkClient, false)];\n          case 4:\n            e_1 = _a.sent();\n            if (e_1 instanceof AuthError) {\n              e_1.setCorrelationId(this.correlationId);\n            }\n            serverTelemetryManager.cacheFailedRequest(e_1);\n            this.browserStorage.cleanRequestByState(silentRequest.state);\n            throw e_1;\n          case 5:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\r\n   * Currently Unsupported\r\n   */\n  SilentAuthCodeClient.prototype.logout = function () {\n    // Synchronous so we must reject\n    return Promise.reject(BrowserAuthError.createSilentLogoutUnsupportedError());\n  };\n  return SilentAuthCodeClient;\n}(StandardInteractionClient);\nexport { SilentAuthCodeClient };","map":{"version":3,"mappings":";;;;;;;;;;;AAAA;;;;;EAmB0CA;EAGtC,8BAAYC,MAA4B,EAAEC,WAAgC,EAAEC,aAAsB,EAAEC,MAAc,EAAEC,YAA0B,EAAEC,gBAAmC,EAAEC,KAAY,EAAEC,iBAAqC,EAAEC,oBAA2C,EAAEC,aAAsB;IAA7S,YACIC,kBAAMV,MAAM,EAAEC,WAAW,EAAEC,aAAa,EAAEC,MAAM,EAAEC,YAAY,EAAEC,gBAAgB,EAAEE,iBAAiB,EAAEC,oBAAoB,EAAEC,aAAa,CAAC;IACzIE,KAAI,CAACL,KAAK,GAAGA,KAAK;;;;;;;EAOhBM,2CAAY,GAAlB,UAAmBC,OAAiC;;;;;;YAChD,IAAI,CAACV,MAAM,CAACW,KAAK,CAAC,0CAA0C,CAAC;;YAG7D,IAAI,CAACD,OAAO,CAACE,IAAI,EAAE;cACf,MAAMC,gBAAgB,CAACC,2BAA2B,EAAE;;YAKT,qBAAM,IAAI,CAACC,8BAA8B,CAACL,OAAO,EAAEM,eAAe,CAACC,MAAM,CAAC;;YAAnHC,aAAa,GAA4BC,SAA0E;YACzH,IAAI,CAACC,cAAc,CAACC,kBAAkB,CAACH,aAAa,CAACI,KAAK,EAAEJ,aAAa,CAACK,KAAK,EAAEL,aAAa,CAACM,SAAS,EAAEN,aAAa,CAACO,SAAS,IAAIC,SAAS,CAACC,YAAY,EAAET,aAAa,CAACU,OAAO,IAAI,IAAI,CAAC;YAErLC,sBAAsB,GAAG,IAAI,CAACC,gCAAgC,CAAC,IAAI,CAAC3B,KAAK,CAAC;;;;YAKtE4B,eAAe,yBACdb,aAAa;cAChBN,IAAI,EAAEF,OAAO,CAACE;YAAI,EACrB;YAGoB,qBAAM,IAAI,CAACoB,sBAAsB,CAACH,sBAAsB,EAAEX,aAAa,CAACM,SAAS,CAAC;;YAAjGS,YAAY,GAAGd,SAAkF;YACjGe,UAAU,GAAqC,IAAIC,gCAAgC,CAACF,YAAY,CAAC;YACvG,IAAI,CAACjC,MAAM,CAACoC,OAAO,CAAC,0BAA0B,CAAC;YAGzCC,aAAa,GAAG,IAAIC,aAAa,CAACJ,UAAU,EAAE,IAAI,CAACd,cAAc,EAAEW,eAAe,EAAE,IAAI,CAAC/B,MAAM,EAAE,IAAI,CAACH,MAAM,CAAC0C,MAAM,CAAC;;YAG1H,sBAAOF,aAAa,CAACG,4BAA4B,CAC7C;cACI5B,IAAI,EAAEF,OAAO,CAACE,IAAI;cAClB6B,YAAY,EAAE/B,OAAO,CAACgC,WAAW;cACjCC,qBAAqB,EAAEjC,OAAO,CAACkC,kBAAkB;cACjDC,wBAAwB,EAAEnC,OAAO,CAACoC;aACrC,EACD5B,aAAa,CAACI,KAAK,EACnBY,UAAU,CAACV,SAAS,EACpB,IAAI,CAACuB,aAAa,EAClB,KAAK,CACR;;;YAED,IAAIC,GAAC,YAAYC,SAAS,EAAE;cACvBD,GAAe,CAACE,gBAAgB,CAAC,IAAI,CAAC5C,aAAa,CAAC;;YAEzDuB,sBAAsB,CAACsB,kBAAkB,CAACH,GAAC,CAAC;YAC5C,IAAI,CAAC5B,cAAc,CAACgC,mBAAmB,CAAClC,aAAa,CAACI,KAAK,CAAC;YAC5D,MAAM0B,GAAC;;;;;;GAEd;;;;EAKDvC,qCAAM,GAAN;;IAEI,OAAO4C,OAAO,CAACC,MAAM,CAACzC,gBAAgB,CAAC0C,kCAAkC,EAAE,CAAC;GAC/E;EACL,2BAAC;AAAD,CAzEA,CAA0CC,yBAAyB","names":["__extends","config","storageImpl","browserCrypto","logger","eventHandler","navigationClient","apiId","performanceClient","nativeMessageHandler","correlationId","_super","_this","SilentAuthCodeClient","request","trace","code","BrowserAuthError","createAuthCodeRequiredError","initializeAuthorizationRequest","InteractionType","Silent","silentRequest","_a","browserStorage","updateCacheEntries","state","nonce","authority","loginHint","Constants","EMPTY_STRING","account","serverTelemetryManager","initializeServerTelemetryManager","authCodeRequest","getClientConfiguration","clientConfig","authClient","HybridSpaAuthorizationCodeClient","verbose","silentHandler","SilentHandler","system","handleCodeResponseFromServer","msgraph_host","msGraphHost","cloud_graph_host_name","cloudGraphHostName","cloud_instance_host_name","cloudInstanceHostName","networkClient","e_1","AuthError","setCorrelationId","cacheFailedRequest","cleanRequestByState","Promise","reject","createSilentLogoutUnsupportedError","StandardInteractionClient"],"sources":["C:\\Azure\\gitauthdemo\\ms-identity-javascript-react-tutorial\\3-Authorization-II\\2-call-api-b2c\\SPA\\node_modules\\@azure\\msal-browser\\src\\interaction_client\\SilentAuthCodeClient.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AuthenticationResult, ICrypto, Logger, CommonAuthorizationCodeRequest, AuthError, Constants, IPerformanceClient } from \"@azure/msal-common\";\nimport { StandardInteractionClient } from \"./StandardInteractionClient\";\nimport { AuthorizationUrlRequest } from \"../request/AuthorizationUrlRequest\";\nimport { BrowserConfiguration } from \"../config/Configuration\";\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\nimport { EventHandler } from \"../event/EventHandler\";\nimport { INavigationClient } from \"../navigation/INavigationClient\";\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\nimport { InteractionType, ApiId } from \"../utils/BrowserConstants\";\nimport { SilentHandler } from \"../interaction_handler/SilentHandler\";\nimport { AuthorizationCodeRequest } from \"../request/AuthorizationCodeRequest\";\nimport { HybridSpaAuthorizationCodeClient } from \"./HybridSpaAuthorizationCodeClient\";\nimport { NativeMessageHandler } from \"../broker/nativeBroker/NativeMessageHandler\";\n\nexport class SilentAuthCodeClient extends StandardInteractionClient {\n    private apiId: ApiId;\n\n    constructor(config: BrowserConfiguration, storageImpl: BrowserCacheManager, browserCrypto: ICrypto, logger: Logger, eventHandler: EventHandler, navigationClient: INavigationClient, apiId: ApiId, performanceClient: IPerformanceClient, nativeMessageHandler?: NativeMessageHandler, correlationId?: string) {\n        super(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeMessageHandler, correlationId);\n        this.apiId = apiId;\n    }\n\n    /**\n     * Acquires a token silently by redeeming an authorization code against the /token endpoint\n     * @param request\n     */\n    async acquireToken(request: AuthorizationCodeRequest): Promise<AuthenticationResult> {\n        this.logger.trace(\"SilentAuthCodeClient.acquireToken called\");\n\n        // Auth code payload is required\n        if (!request.code) {\n            throw BrowserAuthError.createAuthCodeRequiredError();\n\n        }\n\n        // Create silent request\n        const silentRequest: AuthorizationUrlRequest = await this.initializeAuthorizationRequest(request, InteractionType.Silent);\n        this.browserStorage.updateCacheEntries(silentRequest.state, silentRequest.nonce, silentRequest.authority, silentRequest.loginHint || Constants.EMPTY_STRING, silentRequest.account || null);\n\n        const serverTelemetryManager = this.initializeServerTelemetryManager(this.apiId);\n\n        try {\n\n            // Create auth code request (PKCE not needed)\n            const authCodeRequest: CommonAuthorizationCodeRequest = {\n                ...silentRequest,\n                code: request.code\n            };\n\n            // Initialize the client\n            const clientConfig = await this.getClientConfiguration(serverTelemetryManager, silentRequest.authority);\n            const authClient: HybridSpaAuthorizationCodeClient = new HybridSpaAuthorizationCodeClient(clientConfig);\n            this.logger.verbose(\"Auth code client created\");\n\n            // Create silent handler\n            const silentHandler = new SilentHandler(authClient, this.browserStorage, authCodeRequest, this.logger, this.config.system);\n\n            // Handle auth code parameters from request\n            return silentHandler.handleCodeResponseFromServer(\n                {\n                    code: request.code,\n                    msgraph_host: request.msGraphHost,\n                    cloud_graph_host_name: request.cloudGraphHostName,\n                    cloud_instance_host_name: request.cloudInstanceHostName\n                },\n                silentRequest.state,\n                authClient.authority,\n                this.networkClient,\n                false\n            );\n        } catch (e) {\n            if (e instanceof AuthError) {\n                (e as AuthError).setCorrelationId(this.correlationId);\n            }\n            serverTelemetryManager.cacheFailedRequest(e);\n            this.browserStorage.cleanRequestByState(silentRequest.state);\n            throw e;\n        }\n    }\n\n    /**\n     * Currently Unsupported\n     */\n    logout(): Promise<void> {\n        // Synchronous so we must reject\n        return Promise.reject(BrowserAuthError.createSilentLogoutUnsupportedError());\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}