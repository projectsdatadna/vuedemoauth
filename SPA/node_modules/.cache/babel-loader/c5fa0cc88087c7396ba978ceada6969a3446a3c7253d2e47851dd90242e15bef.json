{"ast":null,"code":"/*! @azure/msal-common v8.0.0 2022-11-07 */\n'use strict';\n\nimport { JoseHeaderError } from '../error/JoseHeaderError.js';\nimport { JsonTypes } from '../utils/Constants.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nvar JoseHeader = /** @class */function () {\n  function JoseHeader(options) {\n    this.typ = options.typ;\n    this.alg = options.alg;\n    this.kid = options.kid;\n  }\n  /**\r\n   * Builds SignedHttpRequest formatted JOSE Header from the\r\n   * JOSE Header options provided or previously set on the object and returns\r\n   * the stringified header object.\r\n   * Throws if keyId or algorithm aren't provided since they are required for Access Token Binding.\r\n   * @param shrHeaderOptions\r\n   * @returns\r\n   */\n  JoseHeader.getShrHeaderString = function (shrHeaderOptions) {\n    // KeyID is required on the SHR header\n    if (!shrHeaderOptions.kid) {\n      throw JoseHeaderError.createMissingKidError();\n    }\n    // Alg is required on the SHR header\n    if (!shrHeaderOptions.alg) {\n      throw JoseHeaderError.createMissingAlgError();\n    }\n    var shrHeader = new JoseHeader({\n      // Access Token PoP headers must have type JWT, but the type header can be overriden for special cases\n      typ: shrHeaderOptions.typ || JsonTypes.Jwt,\n      kid: shrHeaderOptions.kid,\n      alg: shrHeaderOptions.alg\n    });\n    return JSON.stringify(shrHeader);\n  };\n  return JoseHeader;\n}();\nexport { JoseHeader };","map":{"version":3,"mappings":";;;;;;AAAA;;;AAGG;AAWH;EAKI,oBAAaA,OAA0B;IACnC,IAAI,CAACC,GAAG,GAAGD,OAAO,CAACC,GAAG;IACtB,IAAI,CAACC,GAAG,GAAGF,OAAO,CAACE,GAAG;IACtB,IAAI,CAACC,GAAG,GAAGH,OAAO,CAACG,GAAG;;EAG1B;;;;;;;AAOG;EACIC,UAAkB,sBAAzB,UAA0BC,gBAAmC;;IAEzD,IAAI,CAACA,gBAAgB,CAACF,GAAG,EAAE;MACvB,MAAMG,eAAe,CAACC,qBAAqB,EAAE;IAChD;;IAGD,IAAI,CAACF,gBAAgB,CAACH,GAAG,EAAE;MACvB,MAAMI,eAAe,CAACE,qBAAqB,EAAE;IAChD;IAED,IAAMC,SAAS,GAAG,IAAIL,UAAU,CAAC;;MAE7BH,GAAG,EAAEI,gBAAgB,CAACJ,GAAG,IAAIS,SAAS,CAACC,GAAG;MAC1CR,GAAG,EAAEE,gBAAgB,CAACF,GAAG;MACzBD,GAAG,EAAEG,gBAAgB,CAACH;IACzB,EAAC;IAEF,OAAOU,IAAI,CAACC,SAAS,CAACJ,SAAS,CAAC;GACnC;EACL,OAACL;AAAD,CAAC","names":["options","typ","alg","kid","JoseHeader","shrHeaderOptions","JoseHeaderError","createMissingKidError","createMissingAlgError","shrHeader","JsonTypes","Jwt","JSON","stringify"],"sources":["C:\\Azure\\gitauthdemo\\ms-identity-javascript-react-tutorial\\3-Authorization-II\\2-call-api-b2c\\SPA\\node_modules\\@azure\\msal-common\\src\\crypto\\JoseHeader.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { JoseHeaderError } from \"../error/JoseHeaderError\";\nimport { JsonTypes } from \"../utils/Constants\";\n\nexport type JoseHeaderOptions = {\n    typ?: JsonTypes,\n    alg?: string,\n    kid?: string\n};\n\nexport class JoseHeader {\n    public typ?: JsonTypes;\n    public alg?: string;\n    public kid?: string;\n\n    constructor (options: JoseHeaderOptions) {\n        this.typ = options.typ;\n        this.alg = options.alg;\n        this.kid = options.kid;\n    }\n\n    /**\n     * Builds SignedHttpRequest formatted JOSE Header from the\n     * JOSE Header options provided or previously set on the object and returns\n     * the stringified header object.\n     * Throws if keyId or algorithm aren't provided since they are required for Access Token Binding.\n     * @param shrHeaderOptions \n     * @returns \n     */\n    static getShrHeaderString(shrHeaderOptions: JoseHeaderOptions): string {\n        // KeyID is required on the SHR header\n        if (!shrHeaderOptions.kid) {\n            throw JoseHeaderError.createMissingKidError();\n        }\n\n        // Alg is required on the SHR header\n        if (!shrHeaderOptions.alg) {\n            throw JoseHeaderError.createMissingAlgError();\n        }\n\n        const shrHeader = new JoseHeader({\n            // Access Token PoP headers must have type JWT, but the type header can be overriden for special cases\n            typ: shrHeaderOptions.typ || JsonTypes.Jwt,\n            kid: shrHeaderOptions.kid,\n            alg: shrHeaderOptions.alg\n        });\n\n        return JSON.stringify(shrHeader);\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}