{"ast":null,"code":"/*! @azure/msal-common v8.0.0 2022-11-07 */\n'use strict';\n\nimport { __extends, __awaiter, __generator, __assign, __spreadArrays } from '../_virtual/_tslib.js';\nimport { BaseClient } from './BaseClient.js';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.js';\nimport { Separators, AADServerParamKeys, AuthenticationScheme, GrantType, PromptValue, HeaderNames } from '../utils/Constants.js';\nimport { ResponseHandler } from '../response/ResponseHandler.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { UrlString } from '../url/UrlString.js';\nimport { PopTokenGenerator } from '../crypto/PopTokenGenerator.js';\nimport { TimeUtils } from '../utils/TimeUtils.js';\nimport { buildClientInfo, buildClientInfoFromHomeAccountId } from '../account/ClientInfo.js';\nimport { CcsCredentialType } from '../account/CcsCredential.js';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { RequestValidator } from '../request/RequestValidator.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Oauth2.0 Authorization Code client\r\n */\nvar AuthorizationCodeClient = /** @class */function (_super) {\n  __extends(AuthorizationCodeClient, _super);\n  function AuthorizationCodeClient(configuration) {\n    var _this = _super.call(this, configuration) || this;\n    // Flag to indicate if client is for hybrid spa auth code redemption\n    _this.includeRedirectUri = true;\n    return _this;\n  }\n  /**\r\n   * Creates the URL of the authorization request letting the user input credentials and consent to the\r\n   * application. The URL target the /authorize endpoint of the authority configured in the\r\n   * application object.\r\n   *\r\n   * Once the user inputs their credentials and consents, the authority will send a response to the redirect URI\r\n   * sent in the request and should contain an authorization code, which can then be used to acquire tokens via\r\n   * acquireToken(AuthorizationCodeRequest)\r\n   * @param request\r\n   */\n  AuthorizationCodeClient.prototype.getAuthCodeUrl = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var queryString;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.createAuthCodeUrlQueryString(request)];\n          case 1:\n            queryString = _a.sent();\n            return [2 /*return*/, UrlString.appendQueryString(this.authority.authorizationEndpoint, queryString)];\n        }\n      });\n    });\n  };\n  /**\r\n   * API to acquire a token in exchange of 'authorization_code` acquired by the user in the first leg of the\r\n   * authorization_code_grant\r\n   * @param request\r\n   */\n  AuthorizationCodeClient.prototype.acquireToken = function (request, authCodePayload) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function () {\n      var reqTimestamp, response, requestId, responseHandler;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            this.logger.info(\"in acquireToken call\");\n            if (!request || StringUtils.isEmpty(request.code)) {\n              throw ClientAuthError.createTokenRequestCannotBeMadeError();\n            }\n            reqTimestamp = TimeUtils.nowSeconds();\n            return [4 /*yield*/, this.executeTokenRequest(this.authority, request)];\n          case 1:\n            response = _b.sent();\n            requestId = (_a = response.headers) === null || _a === void 0 ? void 0 : _a[HeaderNames.X_MS_REQUEST_ID];\n            responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\n            // Validate response. This function throws a server error if an error is returned by the server.\n            responseHandler.validateTokenResponse(response.body);\n            return [4 /*yield*/, responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request, authCodePayload, undefined, undefined, undefined, requestId)];\n          case 2:\n            return [2 /*return*/, _b.sent()];\n        }\n      });\n    });\n  };\n  /**\r\n   * Handles the hash fragment response from public client code request. Returns a code response used by\r\n   * the client to exchange for a token in acquireToken.\r\n   * @param hashFragment\r\n   */\n  AuthorizationCodeClient.prototype.handleFragmentResponse = function (hashFragment, cachedState) {\n    // Handle responses.\n    var responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, null, null);\n    // Deserialize hash fragment response parameters.\n    var hashUrlString = new UrlString(hashFragment);\n    // Deserialize hash fragment response parameters.\n    var serverParams = UrlString.getDeserializedHash(hashUrlString.getHash());\n    // Get code response\n    responseHandler.validateServerAuthorizationCodeResponse(serverParams, cachedState, this.cryptoUtils);\n    // throw when there is no auth code in the response\n    if (!serverParams.code) {\n      throw ClientAuthError.createNoAuthCodeInServerResponseError();\n    }\n    return __assign(__assign({}, serverParams), {\n      // Code param is optional in ServerAuthorizationCodeResponse but required in AuthorizationCodePaylod\n      code: serverParams.code\n    });\n  };\n  /**\r\n   * Used to log out the current user, and redirect the user to the postLogoutRedirectUri.\r\n   * Default behaviour is to redirect the user to `window.location.href`.\r\n   * @param authorityUri\r\n   */\n  AuthorizationCodeClient.prototype.getLogoutUri = function (logoutRequest) {\n    // Throw error if logoutRequest is null/undefined\n    if (!logoutRequest) {\n      throw ClientConfigurationError.createEmptyLogoutRequestError();\n    }\n    var queryString = this.createLogoutUrlQueryString(logoutRequest);\n    // Construct logout URI\n    return UrlString.appendQueryString(this.authority.endSessionEndpoint, queryString);\n  };\n  /**\r\n   * Executes POST request to token endpoint\r\n   * @param authority\r\n   * @param request\r\n   */\n  AuthorizationCodeClient.prototype.executeTokenRequest = function (authority, request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var thumbprint, requestBody, queryParameters, ccsCredential, clientInfo, headers, endpoint;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            thumbprint = {\n              clientId: this.config.authOptions.clientId,\n              authority: authority.canonicalAuthority,\n              scopes: request.scopes,\n              claims: request.claims,\n              authenticationScheme: request.authenticationScheme,\n              resourceRequestMethod: request.resourceRequestMethod,\n              resourceRequestUri: request.resourceRequestUri,\n              shrClaims: request.shrClaims,\n              sshKid: request.sshKid\n            };\n            return [4 /*yield*/, this.createTokenRequestBody(request)];\n          case 1:\n            requestBody = _a.sent();\n            queryParameters = this.createTokenQueryParameters(request);\n            ccsCredential = undefined;\n            if (request.clientInfo) {\n              try {\n                clientInfo = buildClientInfo(request.clientInfo, this.cryptoUtils);\n                ccsCredential = {\n                  credential: \"\" + clientInfo.uid + Separators.CLIENT_INFO_SEPARATOR + clientInfo.utid,\n                  type: CcsCredentialType.HOME_ACCOUNT_ID\n                };\n              } catch (e) {\n                this.logger.verbose(\"Could not parse client info for CCS Header: \" + e);\n              }\n            }\n            headers = this.createTokenRequestHeaders(ccsCredential || request.ccsCredential);\n            endpoint = StringUtils.isEmpty(queryParameters) ? authority.tokenEndpoint : authority.tokenEndpoint + \"?\" + queryParameters;\n            return [2 /*return*/, this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint)];\n        }\n      });\n    });\n  };\n  /**\r\n   * Creates query string for the /token request\r\n   * @param request\r\n   */\n  AuthorizationCodeClient.prototype.createTokenQueryParameters = function (request) {\n    var parameterBuilder = new RequestParameterBuilder();\n    if (request.tokenQueryParameters) {\n      parameterBuilder.addExtraQueryParameters(request.tokenQueryParameters);\n    }\n    return parameterBuilder.createQueryString();\n  };\n  /**\r\n   * Generates a map for all the params to be sent to the service\r\n   * @param request\r\n   */\n  AuthorizationCodeClient.prototype.createTokenRequestBody = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var parameterBuilder, clientAssertion, popTokenGenerator, reqCnfData, correlationId, ccsCred, clientInfo, clientInfo;\n      var _a;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            parameterBuilder = new RequestParameterBuilder();\n            parameterBuilder.addClientId(this.config.authOptions.clientId);\n            /*\r\n             * For hybrid spa flow, there will be a code but no verifier\r\n             * In this scenario, don't include redirect uri as auth code will not be bound to redirect URI\r\n             */\n            if (!this.includeRedirectUri) {\n              // Just validate\n              RequestValidator.validateRedirectUri(request.redirectUri);\n            } else {\n              // Validate and include redirect uri\n              parameterBuilder.addRedirectUri(request.redirectUri);\n            }\n            // Add scope array, parameter builder will add default scopes and dedupe\n            parameterBuilder.addScopes(request.scopes);\n            // add code: user set, not validated\n            parameterBuilder.addAuthorizationCode(request.code);\n            // Add library metadata\n            parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n            parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\n            parameterBuilder.addThrottling();\n            if (this.serverTelemetryManager) {\n              parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n            }\n            // add code_verifier if passed\n            if (request.codeVerifier) {\n              parameterBuilder.addCodeVerifier(request.codeVerifier);\n            }\n            if (this.config.clientCredentials.clientSecret) {\n              parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n            }\n            if (this.config.clientCredentials.clientAssertion) {\n              clientAssertion = this.config.clientCredentials.clientAssertion;\n              parameterBuilder.addClientAssertion(clientAssertion.assertion);\n              parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n            }\n            parameterBuilder.addGrantType(GrantType.AUTHORIZATION_CODE_GRANT);\n            parameterBuilder.addClientInfo();\n            if (!(request.authenticationScheme === AuthenticationScheme.POP)) return [3 /*break*/, 2];\n            popTokenGenerator = new PopTokenGenerator(this.cryptoUtils);\n            return [4 /*yield*/, popTokenGenerator.generateCnf(request)];\n          case 1:\n            reqCnfData = _b.sent();\n            // SPA PoP requires full Base64Url encoded req_cnf string (unhashed)\n            parameterBuilder.addPopToken(reqCnfData.reqCnfString);\n            return [3 /*break*/, 3];\n          case 2:\n            if (request.authenticationScheme === AuthenticationScheme.SSH) {\n              if (request.sshJwk) {\n                parameterBuilder.addSshJwk(request.sshJwk);\n              } else {\n                throw ClientConfigurationError.createMissingSshJwkError();\n              }\n            }\n            _b.label = 3;\n          case 3:\n            correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n            parameterBuilder.addCorrelationId(correlationId);\n            if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n              parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n            }\n            ccsCred = undefined;\n            if (request.clientInfo) {\n              try {\n                clientInfo = buildClientInfo(request.clientInfo, this.cryptoUtils);\n                ccsCred = {\n                  credential: \"\" + clientInfo.uid + Separators.CLIENT_INFO_SEPARATOR + clientInfo.utid,\n                  type: CcsCredentialType.HOME_ACCOUNT_ID\n                };\n              } catch (e) {\n                this.logger.verbose(\"Could not parse client info for CCS Header: \" + e);\n              }\n            } else {\n              ccsCred = request.ccsCredential;\n            }\n            // Adds these as parameters in the request instead of headers to prevent CORS preflight request\n            if (this.config.systemOptions.preventCorsPreflight && ccsCred) {\n              switch (ccsCred.type) {\n                case CcsCredentialType.HOME_ACCOUNT_ID:\n                  try {\n                    clientInfo = buildClientInfoFromHomeAccountId(ccsCred.credential);\n                    parameterBuilder.addCcsOid(clientInfo);\n                  } catch (e) {\n                    this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\n                  }\n                  break;\n                case CcsCredentialType.UPN:\n                  parameterBuilder.addCcsUpn(ccsCred.credential);\n                  break;\n              }\n            }\n            if (request.tokenBodyParameters) {\n              parameterBuilder.addExtraQueryParameters(request.tokenBodyParameters);\n            }\n            // Add hybrid spa parameters if not already provided\n            if (request.enableSpaAuthorizationCode && (!request.tokenBodyParameters || !request.tokenBodyParameters[AADServerParamKeys.RETURN_SPA_CODE])) {\n              parameterBuilder.addExtraQueryParameters((_a = {}, _a[AADServerParamKeys.RETURN_SPA_CODE] = \"1\", _a));\n            }\n            return [2 /*return*/, parameterBuilder.createQueryString()];\n        }\n      });\n    });\n  };\n  /**\r\n   * This API validates the `AuthorizationCodeUrlRequest` and creates a URL\r\n   * @param request\r\n   */\n  AuthorizationCodeClient.prototype.createAuthCodeUrlQueryString = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var parameterBuilder, requestScopes, correlationId, accountSid, accountLoginHintClaim, clientInfo, clientInfo, clientInfo, popTokenGenerator, reqCnfData;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            parameterBuilder = new RequestParameterBuilder();\n            parameterBuilder.addClientId(this.config.authOptions.clientId);\n            requestScopes = __spreadArrays(request.scopes || [], request.extraScopesToConsent || []);\n            parameterBuilder.addScopes(requestScopes);\n            // validate the redirectUri (to be a non null value)\n            parameterBuilder.addRedirectUri(request.redirectUri);\n            correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n            parameterBuilder.addCorrelationId(correlationId);\n            // add response_mode. If not passed in it defaults to query.\n            parameterBuilder.addResponseMode(request.responseMode);\n            // add response_type = code\n            parameterBuilder.addResponseTypeCode();\n            // add library info parameters\n            parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n            parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\n            // add client_info=1\n            parameterBuilder.addClientInfo();\n            if (request.codeChallenge && request.codeChallengeMethod) {\n              parameterBuilder.addCodeChallengeParams(request.codeChallenge, request.codeChallengeMethod);\n            }\n            if (request.prompt) {\n              parameterBuilder.addPrompt(request.prompt);\n            }\n            if (request.domainHint) {\n              parameterBuilder.addDomainHint(request.domainHint);\n            }\n            // Add sid or loginHint with preference for login_hint claim (in request) -> sid -> loginHint (upn/email) -> username of AccountInfo object\n            if (request.prompt !== PromptValue.SELECT_ACCOUNT) {\n              // AAD will throw if prompt=select_account is passed with an account hint\n              if (request.sid && request.prompt === PromptValue.NONE) {\n                // SessionID is only used in silent calls\n                this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is none, adding sid from request\");\n                parameterBuilder.addSid(request.sid);\n              } else if (request.account) {\n                accountSid = this.extractAccountSid(request.account);\n                accountLoginHintClaim = this.extractLoginHint(request.account);\n                // If login_hint claim is present, use it over sid/username\n                if (accountLoginHintClaim) {\n                  this.logger.verbose(\"createAuthCodeUrlQueryString: login_hint claim present on account\");\n                  parameterBuilder.addLoginHint(accountLoginHintClaim);\n                  try {\n                    clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\n                    parameterBuilder.addCcsOid(clientInfo);\n                  } catch (e) {\n                    this.logger.verbose(\"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\");\n                  }\n                } else if (accountSid && request.prompt === PromptValue.NONE) {\n                  /*\r\n                   * If account and loginHint are provided, we will check account first for sid before adding loginHint\r\n                   * SessionId is only used in silent calls\r\n                   */\n                  this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is none, adding sid from account\");\n                  parameterBuilder.addSid(accountSid);\n                  try {\n                    clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\n                    parameterBuilder.addCcsOid(clientInfo);\n                  } catch (e) {\n                    this.logger.verbose(\"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\");\n                  }\n                } else if (request.loginHint) {\n                  this.logger.verbose(\"createAuthCodeUrlQueryString: Adding login_hint from request\");\n                  parameterBuilder.addLoginHint(request.loginHint);\n                  parameterBuilder.addCcsUpn(request.loginHint);\n                } else if (request.account.username) {\n                  // Fallback to account username if provided\n                  this.logger.verbose(\"createAuthCodeUrlQueryString: Adding login_hint from account\");\n                  parameterBuilder.addLoginHint(request.account.username);\n                  try {\n                    clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\n                    parameterBuilder.addCcsOid(clientInfo);\n                  } catch (e) {\n                    this.logger.verbose(\"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\");\n                  }\n                }\n              } else if (request.loginHint) {\n                this.logger.verbose(\"createAuthCodeUrlQueryString: No account, adding login_hint from request\");\n                parameterBuilder.addLoginHint(request.loginHint);\n                parameterBuilder.addCcsUpn(request.loginHint);\n              }\n            } else {\n              this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is select_account, ignoring account hints\");\n            }\n            if (request.nonce) {\n              parameterBuilder.addNonce(request.nonce);\n            }\n            if (request.state) {\n              parameterBuilder.addState(request.state);\n            }\n            if (!StringUtils.isEmpty(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n              parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n            }\n            if (request.extraQueryParameters) {\n              parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);\n            }\n            if (!request.nativeBroker) return [3 /*break*/, 2];\n            // signal ests that this is a WAM call\n            parameterBuilder.addNativeBroker();\n            if (!(request.authenticationScheme === AuthenticationScheme.POP)) return [3 /*break*/, 2];\n            popTokenGenerator = new PopTokenGenerator(this.cryptoUtils);\n            return [4 /*yield*/, popTokenGenerator.generateCnf(request)];\n          case 1:\n            reqCnfData = _a.sent();\n            parameterBuilder.addPopToken(reqCnfData.reqCnfHash);\n            _a.label = 2;\n          case 2:\n            return [2 /*return*/, parameterBuilder.createQueryString()];\n        }\n      });\n    });\n  };\n  /**\r\n   * This API validates the `EndSessionRequest` and creates a URL\r\n   * @param request\r\n   */\n  AuthorizationCodeClient.prototype.createLogoutUrlQueryString = function (request) {\n    var parameterBuilder = new RequestParameterBuilder();\n    if (request.postLogoutRedirectUri) {\n      parameterBuilder.addPostLogoutRedirectUri(request.postLogoutRedirectUri);\n    }\n    if (request.correlationId) {\n      parameterBuilder.addCorrelationId(request.correlationId);\n    }\n    if (request.idTokenHint) {\n      parameterBuilder.addIdTokenHint(request.idTokenHint);\n    }\n    if (request.state) {\n      parameterBuilder.addState(request.state);\n    }\n    if (request.logoutHint) {\n      parameterBuilder.addLogoutHint(request.logoutHint);\n    }\n    if (request.extraQueryParameters) {\n      parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);\n    }\n    return parameterBuilder.createQueryString();\n  };\n  /**\r\n   * Helper to get sid from account. Returns null if idTokenClaims are not present or sid is not present.\r\n   * @param account\r\n   */\n  AuthorizationCodeClient.prototype.extractAccountSid = function (account) {\n    var _a;\n    return ((_a = account.idTokenClaims) === null || _a === void 0 ? void 0 : _a.sid) || null;\n  };\n  AuthorizationCodeClient.prototype.extractLoginHint = function (account) {\n    var _a;\n    return ((_a = account.idTokenClaims) === null || _a === void 0 ? void 0 : _a.login_hint) || null;\n  };\n  return AuthorizationCodeClient;\n}(BaseClient);\nexport { AuthorizationCodeClient };","map":{"version":3,"mappings":"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","names":["__extends","configuration","_this","AuthorizationCodeClient","request","createAuthCodeUrlQueryString","queryString","_a","UrlString","appendQueryString","authority","authorizationEndpoint","authCodePayload","logger","info","StringUtils","isEmpty","code","ClientAuthError","createTokenRequestCannotBeMadeError","reqTimestamp","TimeUtils","nowSeconds","executeTokenRequest","response","_b","requestId","headers","HeaderNames","X_MS_REQUEST_ID","responseHandler","ResponseHandler","config","authOptions","clientId","cacheManager","cryptoUtils","serializableCache","persistencePlugin","validateTokenResponse","body","handleServerTokenResponse","undefined","hashFragment","cachedState","hashUrlString","serverParams","getDeserializedHash","getHash","validateServerAuthorizationCodeResponse","createNoAuthCodeInServerResponseError","logoutRequest","ClientConfigurationError","createEmptyLogoutRequestError","createLogoutUrlQueryString","endSessionEndpoint","thumbprint","canonicalAuthority","scopes","claims","authenticationScheme","resourceRequestMethod","resourceRequestUri","shrClaims","sshKid","createTokenRequestBody","requestBody","queryParameters","createTokenQueryParameters","ccsCredential","clientInfo","buildClientInfo","credential","uid","Separators","CLIENT_INFO_SEPARATOR","utid","type","CcsCredentialType","HOME_ACCOUNT_ID","e","verbose","createTokenRequestHeaders","endpoint","tokenEndpoint","executePostToTokenEndpoint","parameterBuilder","RequestParameterBuilder","tokenQueryParameters","addExtraQueryParameters","createQueryString","addClientId","includeRedirectUri","RequestValidator","validateRedirectUri","redirectUri","addRedirectUri","addScopes","addAuthorizationCode","addLibraryInfo","libraryInfo","addApplicationTelemetry","telemetry","application","addThrottling","serverTelemetryManager","addServerTelemetry","codeVerifier","addCodeVerifier","clientCredentials","clientSecret","addClientSecret","clientAssertion","addClientAssertion","assertion","addClientAssertionType","assertionType","addGrantType","GrantType","AUTHORIZATION_CODE_GRANT","addClientInfo","AuthenticationScheme","POP","popTokenGenerator","PopTokenGenerator","generateCnf","reqCnfData","addPopToken","reqCnfString","SSH","sshJwk","addSshJwk","createMissingSshJwkError","correlationId","cryptoInterface","createNewGuid","addCorrelationId","isEmptyObj","clientCapabilities","length","addClaims","ccsCred","systemOptions","preventCorsPreflight","buildClientInfoFromHomeAccountId","addCcsOid","UPN","addCcsUpn","tokenBodyParameters","enableSpaAuthorizationCode","AADServerParamKeys","RETURN_SPA_CODE","requestScopes","__spreadArrays","extraScopesToConsent","addResponseMode","responseMode","addResponseTypeCode","codeChallenge","codeChallengeMethod","addCodeChallengeParams","prompt","addPrompt","domainHint","addDomainHint","PromptValue","SELECT_ACCOUNT","sid","NONE","addSid","account","accountSid","extractAccountSid","accountLoginHintClaim","extractLoginHint","addLoginHint","homeAccountId","loginHint","username","nonce","addNonce","state","addState","extraQueryParameters","nativeBroker","addNativeBroker","reqCnfHash","postLogoutRedirectUri","addPostLogoutRedirectUri","idTokenHint","addIdTokenHint","logoutHint","addLogoutHint","idTokenClaims","login_hint","BaseClient"],"sources":["C:\\Azure\\gitauthdemo\\ms-identity-javascript-react-tutorial\\3-Authorization-II\\2-call-api-b2c\\SPA\\node_modules\\@azure\\msal-common\\src\\client\\AuthorizationCodeClient.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { BaseClient } from \"./BaseClient\";\nimport { CommonAuthorizationUrlRequest } from \"../request/CommonAuthorizationUrlRequest\";\nimport { CommonAuthorizationCodeRequest } from \"../request/CommonAuthorizationCodeRequest\";\nimport { Authority } from \"../authority/Authority\";\nimport { RequestParameterBuilder } from \"../request/RequestParameterBuilder\";\nimport { GrantType, AuthenticationScheme, PromptValue, Separators, AADServerParamKeys, HeaderNames } from \"../utils/Constants\";\nimport { ClientConfiguration } from \"../config/ClientConfiguration\";\nimport { ServerAuthorizationTokenResponse } from \"../response/ServerAuthorizationTokenResponse\";\nimport { NetworkResponse } from \"../network/NetworkManager\";\nimport { ResponseHandler } from \"../response/ResponseHandler\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\nimport { StringUtils } from \"../utils/StringUtils\";\nimport { ClientAuthError } from \"../error/ClientAuthError\";\nimport { UrlString } from \"../url/UrlString\";\nimport { ServerAuthorizationCodeResponse } from \"../response/ServerAuthorizationCodeResponse\";\nimport { CommonEndSessionRequest } from \"../request/CommonEndSessionRequest\";\nimport { PopTokenGenerator } from \"../crypto/PopTokenGenerator\";\nimport { RequestThumbprint } from \"../network/RequestThumbprint\";\nimport { AuthorizationCodePayload } from \"../response/AuthorizationCodePayload\";\nimport { TimeUtils } from \"../utils/TimeUtils\";\nimport { AccountInfo } from \"../account/AccountInfo\";\nimport { buildClientInfoFromHomeAccountId, buildClientInfo } from \"../account/ClientInfo\";\nimport { CcsCredentialType, CcsCredential } from \"../account/CcsCredential\";\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\nimport { RequestValidator } from \"../request/RequestValidator\";\n\n/**\n * Oauth2.0 Authorization Code client\n */\nexport class AuthorizationCodeClient extends BaseClient {\n    // Flag to indicate if client is for hybrid spa auth code redemption\n    protected includeRedirectUri: boolean = true;\n\n    constructor(configuration: ClientConfiguration) {\n        super(configuration);\n    }\n\n    /**\n     * Creates the URL of the authorization request letting the user input credentials and consent to the\n     * application. The URL target the /authorize endpoint of the authority configured in the\n     * application object.\n     *\n     * Once the user inputs their credentials and consents, the authority will send a response to the redirect URI\n     * sent in the request and should contain an authorization code, which can then be used to acquire tokens via\n     * acquireToken(AuthorizationCodeRequest)\n     * @param request\n     */\n    async getAuthCodeUrl(request: CommonAuthorizationUrlRequest): Promise<string> {\n        const queryString = await this.createAuthCodeUrlQueryString(request);\n\n        return UrlString.appendQueryString(this.authority.authorizationEndpoint, queryString);\n    }\n\n    /**\n     * API to acquire a token in exchange of 'authorization_code` acquired by the user in the first leg of the\n     * authorization_code_grant\n     * @param request\n     */\n    async acquireToken(request: CommonAuthorizationCodeRequest, authCodePayload?: AuthorizationCodePayload): Promise<AuthenticationResult> {\n        this.logger.info(\"in acquireToken call\");\n        if (!request || StringUtils.isEmpty(request.code)) {\n            throw ClientAuthError.createTokenRequestCannotBeMadeError();\n        }\n\n        const reqTimestamp = TimeUtils.nowSeconds();\n        const response = await this.executeTokenRequest(this.authority, request);\n\n        // Retrieve requestId from response headers\n        const requestId = response.headers?.[HeaderNames.X_MS_REQUEST_ID];\n\n        const responseHandler = new ResponseHandler(\n            this.config.authOptions.clientId,\n            this.cacheManager,\n            this.cryptoUtils,\n            this.logger,\n            this.config.serializableCache,\n            this.config.persistencePlugin\n        );\n\n        // Validate response. This function throws a server error if an error is returned by the server.\n        responseHandler.validateTokenResponse(response.body);\n        return await responseHandler.handleServerTokenResponse(\n            response.body, \n            this.authority, \n            reqTimestamp, \n            request, \n            authCodePayload,\n            undefined,\n            undefined,\n            undefined,\n            requestId\n        );\n    }\n\n    /**\n     * Handles the hash fragment response from public client code request. Returns a code response used by\n     * the client to exchange for a token in acquireToken.\n     * @param hashFragment\n     */\n    handleFragmentResponse(hashFragment: string, cachedState: string): AuthorizationCodePayload {\n        // Handle responses.\n        const responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, null, null);\n\n        // Deserialize hash fragment response parameters.\n        const hashUrlString = new UrlString(hashFragment);\n        // Deserialize hash fragment response parameters.\n        const serverParams: ServerAuthorizationCodeResponse = UrlString.getDeserializedHash(hashUrlString.getHash());\n\n        // Get code response\n        responseHandler.validateServerAuthorizationCodeResponse(serverParams, cachedState, this.cryptoUtils);\n\n        // throw when there is no auth code in the response\n        if (!serverParams.code) {\n            throw ClientAuthError.createNoAuthCodeInServerResponseError();\n        }\n        return {\n            ...serverParams,\n            // Code param is optional in ServerAuthorizationCodeResponse but required in AuthorizationCodePaylod\n            code: serverParams.code\n        };\n    }\n\n    /**\n     * Used to log out the current user, and redirect the user to the postLogoutRedirectUri.\n     * Default behaviour is to redirect the user to `window.location.href`.\n     * @param authorityUri\n     */\n    getLogoutUri(logoutRequest: CommonEndSessionRequest): string {\n        // Throw error if logoutRequest is null/undefined\n        if (!logoutRequest) {\n            throw ClientConfigurationError.createEmptyLogoutRequestError();\n        }\n        const queryString = this.createLogoutUrlQueryString(logoutRequest);\n\n        // Construct logout URI\n        return UrlString.appendQueryString(this.authority.endSessionEndpoint, queryString);\n    }\n\n    /**\n     * Executes POST request to token endpoint\n     * @param authority\n     * @param request\n     */\n    private async executeTokenRequest(authority: Authority, request: CommonAuthorizationCodeRequest): Promise<NetworkResponse<ServerAuthorizationTokenResponse>> {\n        const thumbprint: RequestThumbprint = {\n            clientId: this.config.authOptions.clientId,\n            authority: authority.canonicalAuthority,\n            scopes: request.scopes,\n            claims: request.claims,\n            authenticationScheme: request.authenticationScheme,\n            resourceRequestMethod: request.resourceRequestMethod,\n            resourceRequestUri: request.resourceRequestUri,\n            shrClaims: request.shrClaims,\n            sshKid: request.sshKid\n        };\n\n        const requestBody = await this.createTokenRequestBody(request);\n        const queryParameters = this.createTokenQueryParameters(request);\n        let ccsCredential: CcsCredential | undefined = undefined;\n        if (request.clientInfo) {\n            try {\n                const clientInfo = buildClientInfo(request.clientInfo, this.cryptoUtils);\n                ccsCredential = {\n                    credential: `${clientInfo.uid}${Separators.CLIENT_INFO_SEPARATOR}${clientInfo.utid}`,\n                    type: CcsCredentialType.HOME_ACCOUNT_ID\n                };\n            } catch (e) {\n                this.logger.verbose(\"Could not parse client info for CCS Header: \" + e);\n            }\n        }\n        const headers: Record<string, string> = this.createTokenRequestHeaders(ccsCredential || request.ccsCredential);\n        const endpoint = StringUtils.isEmpty(queryParameters) ? authority.tokenEndpoint : `${authority.tokenEndpoint}?${queryParameters}`;\n\n        return this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint);\n    }\n\n    /**\n     * Creates query string for the /token request\n     * @param request\n     */\n    private createTokenQueryParameters(request: CommonAuthorizationCodeRequest): string {\n        const parameterBuilder = new RequestParameterBuilder();\n\n        if (request.tokenQueryParameters) {\n            parameterBuilder.addExtraQueryParameters(request.tokenQueryParameters);\n        }\n\n        return parameterBuilder.createQueryString();\n    }\n\n    /**\n     * Generates a map for all the params to be sent to the service\n     * @param request\n     */\n    private async createTokenRequestBody(request: CommonAuthorizationCodeRequest): Promise<string> {\n        const parameterBuilder = new RequestParameterBuilder();\n\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\n\n        /*\n         * For hybrid spa flow, there will be a code but no verifier\n         * In this scenario, don't include redirect uri as auth code will not be bound to redirect URI\n         */\n        if (!this.includeRedirectUri) {\n            // Just validate\n            RequestValidator.validateRedirectUri(request.redirectUri);\n        } else {\n            // Validate and include redirect uri\n            parameterBuilder.addRedirectUri(request.redirectUri);\n        }\n\n        // Add scope array, parameter builder will add default scopes and dedupe\n        parameterBuilder.addScopes(request.scopes);\n\n        // add code: user set, not validated\n        parameterBuilder.addAuthorizationCode(request.code);\n\n        // Add library metadata\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n        parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\n        parameterBuilder.addThrottling();\n\n        if (this.serverTelemetryManager) {\n            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n        }\n\n        // add code_verifier if passed\n        if (request.codeVerifier) {\n            parameterBuilder.addCodeVerifier(request.codeVerifier);\n        }\n\n        if (this.config.clientCredentials.clientSecret) {\n            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n        }\n\n        if (this.config.clientCredentials.clientAssertion) {\n            const clientAssertion = this.config.clientCredentials.clientAssertion;\n            parameterBuilder.addClientAssertion(clientAssertion.assertion);\n            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n        }\n\n        parameterBuilder.addGrantType(GrantType.AUTHORIZATION_CODE_GRANT);\n        parameterBuilder.addClientInfo();\n\n        if (request.authenticationScheme === AuthenticationScheme.POP) {\n            const popTokenGenerator = new PopTokenGenerator(this.cryptoUtils);\n            const reqCnfData = await popTokenGenerator.generateCnf(request);\n            // SPA PoP requires full Base64Url encoded req_cnf string (unhashed)\n            parameterBuilder.addPopToken(reqCnfData.reqCnfString);\n        } else if (request.authenticationScheme === AuthenticationScheme.SSH) {\n            if(request.sshJwk) {\n                parameterBuilder.addSshJwk(request.sshJwk);\n            } else {\n                throw ClientConfigurationError.createMissingSshJwkError();\n            }\n        }\n\n        const correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n        parameterBuilder.addCorrelationId(correlationId);\n\n        if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n        }\n\n        let ccsCred: CcsCredential | undefined = undefined;\n        if (request.clientInfo) {\n            try {\n                const clientInfo = buildClientInfo(request.clientInfo, this.cryptoUtils);\n                ccsCred = {\n                    credential: `${clientInfo.uid}${Separators.CLIENT_INFO_SEPARATOR}${clientInfo.utid}`,\n                    type: CcsCredentialType.HOME_ACCOUNT_ID\n                };\n            } catch (e) {\n                this.logger.verbose(\"Could not parse client info for CCS Header: \" + e);\n            }\n        } else {\n            ccsCred = request.ccsCredential;\n        }\n\n        // Adds these as parameters in the request instead of headers to prevent CORS preflight request\n        if (this.config.systemOptions.preventCorsPreflight && ccsCred) {\n            switch (ccsCred.type) {\n                case CcsCredentialType.HOME_ACCOUNT_ID:\n                    try {\n                        const clientInfo = buildClientInfoFromHomeAccountId(ccsCred.credential);\n                        parameterBuilder.addCcsOid(clientInfo);\n                    } catch (e) {\n                        this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\n                    }\n                    break;\n                case CcsCredentialType.UPN:\n                    parameterBuilder.addCcsUpn(ccsCred.credential);\n                    break;\n            }\n        }\n\n        if (request.tokenBodyParameters) {\n            parameterBuilder.addExtraQueryParameters(request.tokenBodyParameters);\n        }\n\n        // Add hybrid spa parameters if not already provided\n        if (request.enableSpaAuthorizationCode && (!request.tokenBodyParameters || !request.tokenBodyParameters[AADServerParamKeys.RETURN_SPA_CODE])) {\n            parameterBuilder.addExtraQueryParameters({\n                [AADServerParamKeys.RETURN_SPA_CODE]: \"1\"\n            });\n        }\n\n        return parameterBuilder.createQueryString();\n    }\n\n    /**\n     * This API validates the `AuthorizationCodeUrlRequest` and creates a URL\n     * @param request\n     */\n    private async createAuthCodeUrlQueryString(request: CommonAuthorizationUrlRequest): Promise<string> {\n        const parameterBuilder = new RequestParameterBuilder();\n\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\n\n        const requestScopes = [...request.scopes || [], ...request.extraScopesToConsent || []];\n        parameterBuilder.addScopes(requestScopes);\n\n        // validate the redirectUri (to be a non null value)\n        parameterBuilder.addRedirectUri(request.redirectUri);\n\n        // generate the correlationId if not set by the user and add\n        const correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n        parameterBuilder.addCorrelationId(correlationId);\n\n        // add response_mode. If not passed in it defaults to query.\n        parameterBuilder.addResponseMode(request.responseMode);\n\n        // add response_type = code\n        parameterBuilder.addResponseTypeCode();\n\n        // add library info parameters\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n        parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\n\n        // add client_info=1\n        parameterBuilder.addClientInfo();\n\n        if (request.codeChallenge && request.codeChallengeMethod) {\n            parameterBuilder.addCodeChallengeParams(request.codeChallenge, request.codeChallengeMethod);\n        }\n\n        if (request.prompt) {\n            parameterBuilder.addPrompt(request.prompt);\n        }\n\n        if (request.domainHint) {\n            parameterBuilder.addDomainHint(request.domainHint);\n        }\n\n        // Add sid or loginHint with preference for login_hint claim (in request) -> sid -> loginHint (upn/email) -> username of AccountInfo object\n        if (request.prompt !== PromptValue.SELECT_ACCOUNT) {\n            // AAD will throw if prompt=select_account is passed with an account hint\n            if (request.sid && request.prompt === PromptValue.NONE) {\n                // SessionID is only used in silent calls\n                this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is none, adding sid from request\");\n                parameterBuilder.addSid(request.sid);\n            } else if (request.account) {\n                const accountSid = this.extractAccountSid(request.account);\n                const accountLoginHintClaim = this.extractLoginHint(request.account);\n                // If login_hint claim is present, use it over sid/username\n                if (accountLoginHintClaim) {\n                    this.logger.verbose(\"createAuthCodeUrlQueryString: login_hint claim present on account\");\n                    parameterBuilder.addLoginHint(accountLoginHintClaim);\n                    try {\n                        const clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\n                        parameterBuilder.addCcsOid(clientInfo);\n                    } catch (e) {\n                        this.logger.verbose(\"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\");\n                    }\n                } else if (accountSid && request.prompt === PromptValue.NONE) {\n                    /*\n                     * If account and loginHint are provided, we will check account first for sid before adding loginHint\n                     * SessionId is only used in silent calls\n                     */\n                    this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is none, adding sid from account\");\n                    parameterBuilder.addSid(accountSid);\n                    try {\n                        const clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\n                        parameterBuilder.addCcsOid(clientInfo);\n                    } catch (e) {\n                        this.logger.verbose(\"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\");\n                    }\n                } else if (request.loginHint) {\n                    this.logger.verbose(\"createAuthCodeUrlQueryString: Adding login_hint from request\");\n                    parameterBuilder.addLoginHint(request.loginHint);\n                    parameterBuilder.addCcsUpn(request.loginHint);\n                } else if (request.account.username) {\n                    // Fallback to account username if provided\n                    this.logger.verbose(\"createAuthCodeUrlQueryString: Adding login_hint from account\");\n                    parameterBuilder.addLoginHint(request.account.username);\n                    try {\n                        const clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\n                        parameterBuilder.addCcsOid(clientInfo);\n                    } catch (e) {\n                        this.logger.verbose(\"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\");\n                    }\n                }\n            } else if (request.loginHint) {\n                this.logger.verbose(\"createAuthCodeUrlQueryString: No account, adding login_hint from request\");\n                parameterBuilder.addLoginHint(request.loginHint);\n                parameterBuilder.addCcsUpn(request.loginHint);\n            }\n        } else {\n            this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is select_account, ignoring account hints\");\n        }\n\n        if (request.nonce) {\n            parameterBuilder.addNonce(request.nonce);\n        }\n\n        if (request.state) {\n            parameterBuilder.addState(request.state);\n        }\n\n        if (!StringUtils.isEmpty(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n        }\n\n        if (request.extraQueryParameters) {\n            parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);\n        }\n\n        if (request.nativeBroker) {\n            // signal ests that this is a WAM call\n            parameterBuilder.addNativeBroker();\n\n            // pass the req_cnf for POP\n            if (request.authenticationScheme === AuthenticationScheme.POP) {\n                const popTokenGenerator = new PopTokenGenerator(this.cryptoUtils);\n                // to reduce the URL length, it is recommended to send the hash of the req_cnf instead of the whole string\n                const reqCnfData = await popTokenGenerator.generateCnf(request);\n                parameterBuilder.addPopToken(reqCnfData.reqCnfHash);\n            }\n        }\n\n        return parameterBuilder.createQueryString();\n    }\n\n    /**\n     * This API validates the `EndSessionRequest` and creates a URL\n     * @param request\n     */\n    private createLogoutUrlQueryString(request: CommonEndSessionRequest): string {\n        const parameterBuilder = new RequestParameterBuilder();\n\n        if (request.postLogoutRedirectUri) {\n            parameterBuilder.addPostLogoutRedirectUri(request.postLogoutRedirectUri);\n        }\n\n        if (request.correlationId) {\n            parameterBuilder.addCorrelationId(request.correlationId);\n        }\n\n        if (request.idTokenHint) {\n            parameterBuilder.addIdTokenHint(request.idTokenHint);\n        }\n\n        if(request.state) {\n            parameterBuilder.addState(request.state);\n        }\n\n        if (request.logoutHint) {\n            parameterBuilder.addLogoutHint(request.logoutHint);\n        }\n\n        if (request.extraQueryParameters) {\n            parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);\n        }\n\n        return parameterBuilder.createQueryString();\n    }\n\n    /**\n     * Helper to get sid from account. Returns null if idTokenClaims are not present or sid is not present.\n     * @param account\n     */\n    private extractAccountSid(account: AccountInfo): string | null {\n        return account.idTokenClaims?.sid || null;\n    }\n\n    private extractLoginHint(account: AccountInfo): string | null {\n        return account.idTokenClaims?.login_hint || null;\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}