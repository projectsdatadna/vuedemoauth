{"ast":null,"code":"/*! @azure/msal-common v8.0.0 2022-11-07 */\n'use strict';\n\nimport { __extends } from '../_virtual/_tslib.js';\nimport { AuthError } from './AuthError.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * ClientAuthErrorMessage class containing string constants used by error codes and messages.\r\n */\nvar ClientAuthErrorMessage = {\n  clientInfoDecodingError: {\n    code: \"client_info_decoding_error\",\n    desc: \"The client info could not be parsed/decoded correctly. Please review the trace to determine the root cause.\"\n  },\n  clientInfoEmptyError: {\n    code: \"client_info_empty_error\",\n    desc: \"The client info was empty. Please review the trace to determine the root cause.\"\n  },\n  tokenParsingError: {\n    code: \"token_parsing_error\",\n    desc: \"Token cannot be parsed. Please review stack trace to determine root cause.\"\n  },\n  nullOrEmptyToken: {\n    code: \"null_or_empty_token\",\n    desc: \"The token is null or empty. Please review the trace to determine the root cause.\"\n  },\n  endpointResolutionError: {\n    code: \"endpoints_resolution_error\",\n    desc: \"Error: could not resolve endpoints. Please check network and try again.\"\n  },\n  networkError: {\n    code: \"network_error\",\n    desc: \"Network request failed. Please check network trace to determine root cause.\"\n  },\n  unableToGetOpenidConfigError: {\n    code: \"openid_config_error\",\n    desc: \"Could not retrieve endpoints. Check your authority and verify the .well-known/openid-configuration endpoint returns the required endpoints.\"\n  },\n  hashNotDeserialized: {\n    code: \"hash_not_deserialized\",\n    desc: \"The hash parameters could not be deserialized. Please review the trace to determine the root cause.\"\n  },\n  blankGuidGenerated: {\n    code: \"blank_guid_generated\",\n    desc: \"The guid generated was blank. Please review the trace to determine the root cause.\"\n  },\n  invalidStateError: {\n    code: \"invalid_state\",\n    desc: \"State was not the expected format. Please check the logs to determine whether the request was sent using ProtocolUtils.setRequestState().\"\n  },\n  stateMismatchError: {\n    code: \"state_mismatch\",\n    desc: \"State mismatch error. Please check your network. Continued requests may cause cache overflow.\"\n  },\n  stateNotFoundError: {\n    code: \"state_not_found\",\n    desc: \"State not found\"\n  },\n  nonceMismatchError: {\n    code: \"nonce_mismatch\",\n    desc: \"Nonce mismatch error. This may be caused by a race condition in concurrent requests.\"\n  },\n  nonceNotFoundError: {\n    code: \"nonce_not_found\",\n    desc: \"nonce not found\"\n  },\n  authTimeNotFoundError: {\n    code: \"auth_time_not_found\",\n    desc: \"Max Age was requested and the ID token is missing the auth_time variable.\" + \" auth_time is an optional claim and is not enabled by default - it must be enabled.\" + \" See https://aka.ms/msaljs/optional-claims for more information.\"\n  },\n  maxAgeTranspiredError: {\n    code: \"max_age_transpired\",\n    desc: \"Max Age is set to 0, or too much time has elapsed since the last end-user authentication.\"\n  },\n  noTokensFoundError: {\n    code: \"no_tokens_found\",\n    desc: \"No tokens were found for the given scopes, and no authorization code was passed to acquireToken. You must retrieve an authorization code before making a call to acquireToken().\"\n  },\n  multipleMatchingTokens: {\n    code: \"multiple_matching_tokens\",\n    desc: \"The cache contains multiple tokens satisfying the requirements. \" + \"Call AcquireToken again providing more requirements such as authority or account.\"\n  },\n  multipleMatchingAccounts: {\n    code: \"multiple_matching_accounts\",\n    desc: \"The cache contains multiple accounts satisfying the given parameters. Please pass more info to obtain the correct account\"\n  },\n  multipleMatchingAppMetadata: {\n    code: \"multiple_matching_appMetadata\",\n    desc: \"The cache contains multiple appMetadata satisfying the given parameters. Please pass more info to obtain the correct appMetadata\"\n  },\n  tokenRequestCannotBeMade: {\n    code: \"request_cannot_be_made\",\n    desc: \"Token request cannot be made without authorization code or refresh token.\"\n  },\n  appendEmptyScopeError: {\n    code: \"cannot_append_empty_scope\",\n    desc: \"Cannot append null or empty scope to ScopeSet. Please check the stack trace for more info.\"\n  },\n  removeEmptyScopeError: {\n    code: \"cannot_remove_empty_scope\",\n    desc: \"Cannot remove null or empty scope from ScopeSet. Please check the stack trace for more info.\"\n  },\n  appendScopeSetError: {\n    code: \"cannot_append_scopeset\",\n    desc: \"Cannot append ScopeSet due to error.\"\n  },\n  emptyInputScopeSetError: {\n    code: \"empty_input_scopeset\",\n    desc: \"Empty input ScopeSet cannot be processed.\"\n  },\n  DeviceCodePollingCancelled: {\n    code: \"device_code_polling_cancelled\",\n    desc: \"Caller has cancelled token endpoint polling during device code flow by setting DeviceCodeRequest.cancel = true.\"\n  },\n  DeviceCodeExpired: {\n    code: \"device_code_expired\",\n    desc: \"Device code is expired.\"\n  },\n  DeviceCodeUnknownError: {\n    code: \"device_code_unknown_error\",\n    desc: \"Device code stopped polling for unknown reasons.\"\n  },\n  NoAccountInSilentRequest: {\n    code: \"no_account_in_silent_request\",\n    desc: \"Please pass an account object, silent flow is not supported without account information\"\n  },\n  invalidCacheRecord: {\n    code: \"invalid_cache_record\",\n    desc: \"Cache record object was null or undefined.\"\n  },\n  invalidCacheEnvironment: {\n    code: \"invalid_cache_environment\",\n    desc: \"Invalid environment when attempting to create cache entry\"\n  },\n  noAccountFound: {\n    code: \"no_account_found\",\n    desc: \"No account found in cache for given key.\"\n  },\n  CachePluginError: {\n    code: \"no cache plugin set on CacheManager\",\n    desc: \"ICachePlugin needs to be set before using readFromStorage or writeFromStorage\"\n  },\n  noCryptoObj: {\n    code: \"no_crypto_object\",\n    desc: \"No crypto object detected. This is required for the following operation: \"\n  },\n  invalidCacheType: {\n    code: \"invalid_cache_type\",\n    desc: \"Invalid cache type\"\n  },\n  unexpectedAccountType: {\n    code: \"unexpected_account_type\",\n    desc: \"Unexpected account type.\"\n  },\n  unexpectedCredentialType: {\n    code: \"unexpected_credential_type\",\n    desc: \"Unexpected credential type.\"\n  },\n  invalidAssertion: {\n    code: \"invalid_assertion\",\n    desc: \"Client assertion must meet requirements described in https://tools.ietf.org/html/rfc7515\"\n  },\n  invalidClientCredential: {\n    code: \"invalid_client_credential\",\n    desc: \"Client credential (secret, certificate, or assertion) must not be empty when creating a confidential client. An application should at most have one credential\"\n  },\n  tokenRefreshRequired: {\n    code: \"token_refresh_required\",\n    desc: \"Cannot return token from cache because it must be refreshed. This may be due to one of the following reasons: forceRefresh parameter is set to true, claims have been requested, there is no cached access token or it is expired.\"\n  },\n  userTimeoutReached: {\n    code: \"user_timeout_reached\",\n    desc: \"User defined timeout for device code polling reached\"\n  },\n  tokenClaimsRequired: {\n    code: \"token_claims_cnf_required_for_signedjwt\",\n    desc: \"Cannot generate a POP jwt if the token_claims are not populated\"\n  },\n  noAuthorizationCodeFromServer: {\n    code: \"authorization_code_missing_from_server_response\",\n    desc: \"Server response does not contain an authorization code to proceed\"\n  },\n  noAzureRegionDetected: {\n    code: \"no_azure_region_detected\",\n    desc: \"No azure region was detected and no fallback was made available\"\n  },\n  accessTokenEntityNullError: {\n    code: \"access_token_entity_null\",\n    desc: \"Access token entity is null, please check logs and cache to ensure a valid access token is present.\"\n  },\n  bindingKeyNotRemovedError: {\n    code: \"binding_key_not_removed\",\n    desc: \"Could not remove the credential's binding key from storage.\"\n  },\n  logoutNotSupported: {\n    code: \"end_session_endpoint_not_supported\",\n    desc: \"Provided authority does not support logout.\"\n  },\n  keyIdMissing: {\n    code: \"key_id_missing\",\n    desc: \"A keyId value is missing from the requested bound token's cache record and is required to match the token to it's stored binding key.\"\n  }\n};\n/**\r\n * Error thrown when there is an error in the client code running on the browser.\r\n */\nvar ClientAuthError = /** @class */function (_super) {\n  __extends(ClientAuthError, _super);\n  function ClientAuthError(errorCode, errorMessage) {\n    var _this = _super.call(this, errorCode, errorMessage) || this;\n    _this.name = \"ClientAuthError\";\n    Object.setPrototypeOf(_this, ClientAuthError.prototype);\n    return _this;\n  }\n  /**\r\n   * Creates an error thrown when client info object doesn't decode correctly.\r\n   * @param caughtError\r\n   */\n  ClientAuthError.createClientInfoDecodingError = function (caughtError) {\n    return new ClientAuthError(ClientAuthErrorMessage.clientInfoDecodingError.code, ClientAuthErrorMessage.clientInfoDecodingError.desc + \" Failed with error: \" + caughtError);\n  };\n  /**\r\n   * Creates an error thrown if the client info is empty.\r\n   * @param rawClientInfo\r\n   */\n  ClientAuthError.createClientInfoEmptyError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.clientInfoEmptyError.code, \"\" + ClientAuthErrorMessage.clientInfoEmptyError.desc);\n  };\n  /**\r\n   * Creates an error thrown when the id token extraction errors out.\r\n   * @param err\r\n   */\n  ClientAuthError.createTokenParsingError = function (caughtExtractionError) {\n    return new ClientAuthError(ClientAuthErrorMessage.tokenParsingError.code, ClientAuthErrorMessage.tokenParsingError.desc + \" Failed with error: \" + caughtExtractionError);\n  };\n  /**\r\n   * Creates an error thrown when the id token string is null or empty.\r\n   * @param invalidRawTokenString\r\n   */\n  ClientAuthError.createTokenNullOrEmptyError = function (invalidRawTokenString) {\n    return new ClientAuthError(ClientAuthErrorMessage.nullOrEmptyToken.code, ClientAuthErrorMessage.nullOrEmptyToken.desc + \" Raw Token Value: \" + invalidRawTokenString);\n  };\n  /**\r\n   * Creates an error thrown when the endpoint discovery doesn't complete correctly.\r\n   */\n  ClientAuthError.createEndpointDiscoveryIncompleteError = function (errDetail) {\n    return new ClientAuthError(ClientAuthErrorMessage.endpointResolutionError.code, ClientAuthErrorMessage.endpointResolutionError.desc + \" Detail: \" + errDetail);\n  };\n  /**\r\n   * Creates an error thrown when the fetch client throws\r\n   */\n  ClientAuthError.createNetworkError = function (endpoint, errDetail) {\n    return new ClientAuthError(ClientAuthErrorMessage.networkError.code, ClientAuthErrorMessage.networkError.desc + \" | Fetch client threw: \" + errDetail + \" | Attempted to reach: \" + endpoint.split(\"?\")[0]);\n  };\n  /**\r\n   * Creates an error thrown when the openid-configuration endpoint cannot be reached or does not contain the required data\r\n   */\n  ClientAuthError.createUnableToGetOpenidConfigError = function (errDetail) {\n    return new ClientAuthError(ClientAuthErrorMessage.unableToGetOpenidConfigError.code, ClientAuthErrorMessage.unableToGetOpenidConfigError.desc + \" Attempted to retrieve endpoints from: \" + errDetail);\n  };\n  /**\r\n   * Creates an error thrown when the hash cannot be deserialized.\r\n   * @param hashParamObj\r\n   */\n  ClientAuthError.createHashNotDeserializedError = function (hashParamObj) {\n    return new ClientAuthError(ClientAuthErrorMessage.hashNotDeserialized.code, ClientAuthErrorMessage.hashNotDeserialized.desc + \" Given Object: \" + hashParamObj);\n  };\n  /**\r\n   * Creates an error thrown when the state cannot be parsed.\r\n   * @param invalidState\r\n   */\n  ClientAuthError.createInvalidStateError = function (invalidState, errorString) {\n    return new ClientAuthError(ClientAuthErrorMessage.invalidStateError.code, ClientAuthErrorMessage.invalidStateError.desc + \" Invalid State: \" + invalidState + \", Root Err: \" + errorString);\n  };\n  /**\r\n   * Creates an error thrown when two states do not match.\r\n   */\n  ClientAuthError.createStateMismatchError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.stateMismatchError.code, ClientAuthErrorMessage.stateMismatchError.desc);\n  };\n  /**\r\n   * Creates an error thrown when the state is not present\r\n   * @param missingState\r\n   */\n  ClientAuthError.createStateNotFoundError = function (missingState) {\n    return new ClientAuthError(ClientAuthErrorMessage.stateNotFoundError.code, ClientAuthErrorMessage.stateNotFoundError.desc + \":  \" + missingState);\n  };\n  /**\r\n   * Creates an error thrown when the nonce does not match.\r\n   */\n  ClientAuthError.createNonceMismatchError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.nonceMismatchError.code, ClientAuthErrorMessage.nonceMismatchError.desc);\n  };\n  /**\r\n   * Creates an error thrown when max_age was provided in the request, but auth_time is not in the token claims\r\n   * @param missingNonce\r\n   */\n  ClientAuthError.createAuthTimeNotFoundError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.authTimeNotFoundError.code, ClientAuthErrorMessage.authTimeNotFoundError.desc);\n  };\n  /**\r\n   * Creates an error thrown when too much time has elapsed since the last end-user authentication\r\n   */\n  ClientAuthError.createMaxAgeTranspiredError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.maxAgeTranspiredError.code, ClientAuthErrorMessage.maxAgeTranspiredError.desc);\n  };\n  /**\r\n   * Creates an error thrown when the mnonce is not present\r\n   * @param missingNonce\r\n   */\n  ClientAuthError.createNonceNotFoundError = function (missingNonce) {\n    return new ClientAuthError(ClientAuthErrorMessage.nonceNotFoundError.code, ClientAuthErrorMessage.nonceNotFoundError.desc + \":  \" + missingNonce);\n  };\n  /**\r\n   * Throws error when multiple tokens are in cache.\r\n   */\n  ClientAuthError.createMultipleMatchingTokensInCacheError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.multipleMatchingTokens.code, ClientAuthErrorMessage.multipleMatchingTokens.desc + \".\");\n  };\n  /**\r\n   * Throws error when multiple accounts are in cache for the given params\r\n   */\n  ClientAuthError.createMultipleMatchingAccountsInCacheError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.multipleMatchingAccounts.code, ClientAuthErrorMessage.multipleMatchingAccounts.desc);\n  };\n  /**\r\n   * Throws error when multiple appMetada are in cache for the given clientId.\r\n   */\n  ClientAuthError.createMultipleMatchingAppMetadataInCacheError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.multipleMatchingAppMetadata.code, ClientAuthErrorMessage.multipleMatchingAppMetadata.desc);\n  };\n  /**\r\n   * Throws error when no auth code or refresh token is given to ServerTokenRequestParameters.\r\n   */\n  ClientAuthError.createTokenRequestCannotBeMadeError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.tokenRequestCannotBeMade.code, ClientAuthErrorMessage.tokenRequestCannotBeMade.desc);\n  };\n  /**\r\n   * Throws error when attempting to append a null, undefined or empty scope to a set\r\n   * @param givenScope\r\n   */\n  ClientAuthError.createAppendEmptyScopeToSetError = function (givenScope) {\n    return new ClientAuthError(ClientAuthErrorMessage.appendEmptyScopeError.code, ClientAuthErrorMessage.appendEmptyScopeError.desc + \" Given Scope: \" + givenScope);\n  };\n  /**\r\n   * Throws error when attempting to append a null, undefined or empty scope to a set\r\n   * @param givenScope\r\n   */\n  ClientAuthError.createRemoveEmptyScopeFromSetError = function (givenScope) {\n    return new ClientAuthError(ClientAuthErrorMessage.removeEmptyScopeError.code, ClientAuthErrorMessage.removeEmptyScopeError.desc + \" Given Scope: \" + givenScope);\n  };\n  /**\r\n   * Throws error when attempting to append null or empty ScopeSet.\r\n   * @param appendError\r\n   */\n  ClientAuthError.createAppendScopeSetError = function (appendError) {\n    return new ClientAuthError(ClientAuthErrorMessage.appendScopeSetError.code, ClientAuthErrorMessage.appendScopeSetError.desc + \" Detail Error: \" + appendError);\n  };\n  /**\r\n   * Throws error if ScopeSet is null or undefined.\r\n   * @param givenScopeSet\r\n   */\n  ClientAuthError.createEmptyInputScopeSetError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.emptyInputScopeSetError.code, \"\" + ClientAuthErrorMessage.emptyInputScopeSetError.desc);\n  };\n  /**\r\n   * Throws error if user sets CancellationToken.cancel = true during polling of token endpoint during device code flow\r\n   */\n  ClientAuthError.createDeviceCodeCancelledError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.DeviceCodePollingCancelled.code, \"\" + ClientAuthErrorMessage.DeviceCodePollingCancelled.desc);\n  };\n  /**\r\n   * Throws error if device code is expired\r\n   */\n  ClientAuthError.createDeviceCodeExpiredError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.DeviceCodeExpired.code, \"\" + ClientAuthErrorMessage.DeviceCodeExpired.desc);\n  };\n  /**\r\n   * Throws error if device code is expired\r\n   */\n  ClientAuthError.createDeviceCodeUnknownError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.DeviceCodeUnknownError.code, \"\" + ClientAuthErrorMessage.DeviceCodeUnknownError.desc);\n  };\n  /**\r\n   * Throws error when silent requests are made without an account object\r\n   */\n  ClientAuthError.createNoAccountInSilentRequestError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.NoAccountInSilentRequest.code, \"\" + ClientAuthErrorMessage.NoAccountInSilentRequest.desc);\n  };\n  /**\r\n   * Throws error when cache record is null or undefined.\r\n   */\n  ClientAuthError.createNullOrUndefinedCacheRecord = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.invalidCacheRecord.code, ClientAuthErrorMessage.invalidCacheRecord.desc);\n  };\n  /**\r\n   * Throws error when provided environment is not part of the CloudDiscoveryMetadata object\r\n   */\n  ClientAuthError.createInvalidCacheEnvironmentError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.invalidCacheEnvironment.code, ClientAuthErrorMessage.invalidCacheEnvironment.desc);\n  };\n  /**\r\n   * Throws error when account is not found in cache.\r\n   */\n  ClientAuthError.createNoAccountFoundError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.noAccountFound.code, ClientAuthErrorMessage.noAccountFound.desc);\n  };\n  /**\r\n   * Throws error if ICachePlugin not set on CacheManager.\r\n   */\n  ClientAuthError.createCachePluginError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.CachePluginError.code, \"\" + ClientAuthErrorMessage.CachePluginError.desc);\n  };\n  /**\r\n   * Throws error if crypto object not found.\r\n   * @param operationName\r\n   */\n  ClientAuthError.createNoCryptoObjectError = function (operationName) {\n    return new ClientAuthError(ClientAuthErrorMessage.noCryptoObj.code, \"\" + ClientAuthErrorMessage.noCryptoObj.desc + operationName);\n  };\n  /**\r\n   * Throws error if cache type is invalid.\r\n   */\n  ClientAuthError.createInvalidCacheTypeError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.invalidCacheType.code, \"\" + ClientAuthErrorMessage.invalidCacheType.desc);\n  };\n  /**\r\n   * Throws error if unexpected account type.\r\n   */\n  ClientAuthError.createUnexpectedAccountTypeError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.unexpectedAccountType.code, \"\" + ClientAuthErrorMessage.unexpectedAccountType.desc);\n  };\n  /**\r\n   * Throws error if unexpected credential type.\r\n   */\n  ClientAuthError.createUnexpectedCredentialTypeError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.unexpectedCredentialType.code, \"\" + ClientAuthErrorMessage.unexpectedCredentialType.desc);\n  };\n  /**\r\n   * Throws error if client assertion is not valid.\r\n   */\n  ClientAuthError.createInvalidAssertionError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.invalidAssertion.code, \"\" + ClientAuthErrorMessage.invalidAssertion.desc);\n  };\n  /**\r\n   * Throws error if client assertion is not valid.\r\n   */\n  ClientAuthError.createInvalidCredentialError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.invalidClientCredential.code, \"\" + ClientAuthErrorMessage.invalidClientCredential.desc);\n  };\n  /**\r\n   * Throws error if token cannot be retrieved from cache due to refresh being required.\r\n   */\n  ClientAuthError.createRefreshRequiredError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.tokenRefreshRequired.code, ClientAuthErrorMessage.tokenRefreshRequired.desc);\n  };\n  /**\r\n   * Throws error if the user defined timeout is reached.\r\n   */\n  ClientAuthError.createUserTimeoutReachedError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.userTimeoutReached.code, ClientAuthErrorMessage.userTimeoutReached.desc);\n  };\n  /*\r\n   * Throws error if token claims are not populated for a signed jwt generation\r\n   */\n  ClientAuthError.createTokenClaimsRequiredError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.tokenClaimsRequired.code, ClientAuthErrorMessage.tokenClaimsRequired.desc);\n  };\n  /**\r\n   * Throws error when the authorization code is missing from the server response\r\n   */\n  ClientAuthError.createNoAuthCodeInServerResponseError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.noAuthorizationCodeFromServer.code, ClientAuthErrorMessage.noAuthorizationCodeFromServer.desc);\n  };\n  ClientAuthError.createBindingKeyNotRemovedError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.bindingKeyNotRemovedError.code, ClientAuthErrorMessage.bindingKeyNotRemovedError.desc);\n  };\n  /**\r\n   * Thrown when logout is attempted for an authority that doesnt have an end_session_endpoint\r\n   */\n  ClientAuthError.createLogoutNotSupportedError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.logoutNotSupported.code, ClientAuthErrorMessage.logoutNotSupported.desc);\n  };\n  /**\r\n   * Create an error when kid attribute is missing from a PoP token's cache record\r\n   */\n  ClientAuthError.createKeyIdMissingError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.keyIdMissing.code, ClientAuthErrorMessage.keyIdMissing.desc);\n  };\n  return ClientAuthError;\n}(AuthError);\nexport { ClientAuthError, ClientAuthErrorMessage };","map":{"version":3,"mappings":"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","names":["clientInfoDecodingError","code","desc","clientInfoEmptyError","tokenParsingError","nullOrEmptyToken","endpointResolutionError","networkError","unableToGetOpenidConfigError","hashNotDeserialized","blankGuidGenerated","invalidStateError","stateMismatchError","stateNotFoundError","nonceMismatchError","nonceNotFoundError","authTimeNotFoundError","maxAgeTranspiredError","noTokensFoundError","multipleMatchingTokens","multipleMatchingAccounts","multipleMatchingAppMetadata","tokenRequestCannotBeMade","appendEmptyScopeError","removeEmptyScopeError","appendScopeSetError","emptyInputScopeSetError","DeviceCodePollingCancelled","DeviceCodeExpired","DeviceCodeUnknownError","NoAccountInSilentRequest","invalidCacheRecord","invalidCacheEnvironment","noAccountFound","CachePluginError","noCryptoObj","invalidCacheType","unexpectedAccountType","unexpectedCredentialType","invalidAssertion","invalidClientCredential","tokenRefreshRequired","userTimeoutReached","tokenClaimsRequired","noAuthorizationCodeFromServer","noAzureRegionDetected","accessTokenEntityNullError","bindingKeyNotRemovedError","logoutNotSupported","keyIdMissing","__extends","ClientAuthError","errorMessage","_super","_this","name","Object","setPrototypeOf","prototype","caughtError","ClientAuthErrorMessage","caughtExtractionError","invalidRawTokenString","errDetail","endpoint","split","hashParamObj","invalidState","errorString","missingState","missingNonce","givenScope","appendError","operationName","AuthError"],"sources":["C:\\Azure\\gitauthdemo\\ms-identity-javascript-react-tutorial\\3-Authorization-II\\2-call-api-b2c\\SPA\\node_modules\\@azure\\msal-common\\src\\error\\ClientAuthError.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AuthError } from \"./AuthError\";\n\n/**\n * ClientAuthErrorMessage class containing string constants used by error codes and messages.\n */\nexport const ClientAuthErrorMessage = {\n    clientInfoDecodingError: {\n        code: \"client_info_decoding_error\",\n        desc: \"The client info could not be parsed/decoded correctly. Please review the trace to determine the root cause.\"\n    },\n    clientInfoEmptyError: {\n        code: \"client_info_empty_error\",\n        desc: \"The client info was empty. Please review the trace to determine the root cause.\"\n    },\n    tokenParsingError: {\n        code: \"token_parsing_error\",\n        desc: \"Token cannot be parsed. Please review stack trace to determine root cause.\"\n    },\n    nullOrEmptyToken: {\n        code: \"null_or_empty_token\",\n        desc: \"The token is null or empty. Please review the trace to determine the root cause.\"\n    },\n    endpointResolutionError: {\n        code: \"endpoints_resolution_error\",\n        desc: \"Error: could not resolve endpoints. Please check network and try again.\"\n    },\n    networkError: {\n        code: \"network_error\",\n        desc: \"Network request failed. Please check network trace to determine root cause.\"\n    },\n    unableToGetOpenidConfigError: {\n        code: \"openid_config_error\",\n        desc: \"Could not retrieve endpoints. Check your authority and verify the .well-known/openid-configuration endpoint returns the required endpoints.\"\n    },\n    hashNotDeserialized: {\n        code: \"hash_not_deserialized\",\n        desc: \"The hash parameters could not be deserialized. Please review the trace to determine the root cause.\"\n    },\n    blankGuidGenerated: {\n        code: \"blank_guid_generated\",\n        desc: \"The guid generated was blank. Please review the trace to determine the root cause.\"\n    },\n    invalidStateError: {\n        code: \"invalid_state\",\n        desc: \"State was not the expected format. Please check the logs to determine whether the request was sent using ProtocolUtils.setRequestState().\"\n    },\n    stateMismatchError: {\n        code: \"state_mismatch\",\n        desc: \"State mismatch error. Please check your network. Continued requests may cause cache overflow.\"\n    },\n    stateNotFoundError: {\n        code: \"state_not_found\",\n        desc: \"State not found\"\n    },\n    nonceMismatchError: {\n        code: \"nonce_mismatch\",\n        desc: \"Nonce mismatch error. This may be caused by a race condition in concurrent requests.\"\n    },\n    nonceNotFoundError: {\n        code: \"nonce_not_found\",\n        desc: \"nonce not found\"\n    },\n    authTimeNotFoundError: {\n        code: \"auth_time_not_found\",\n        desc: \"Max Age was requested and the ID token is missing the auth_time variable.\" +\n            \" auth_time is an optional claim and is not enabled by default - it must be enabled.\" +\n            \" See https://aka.ms/msaljs/optional-claims for more information.\"\n    },\n    maxAgeTranspiredError: {\n        code: \"max_age_transpired\",\n        desc: \"Max Age is set to 0, or too much time has elapsed since the last end-user authentication.\"\n    },\n    noTokensFoundError: {\n        code: \"no_tokens_found\",\n        desc: \"No tokens were found for the given scopes, and no authorization code was passed to acquireToken. You must retrieve an authorization code before making a call to acquireToken().\"\n    },\n    multipleMatchingTokens: {\n        code: \"multiple_matching_tokens\",\n        desc: \"The cache contains multiple tokens satisfying the requirements. \" +\n            \"Call AcquireToken again providing more requirements such as authority or account.\"\n    },\n    multipleMatchingAccounts: {\n        code: \"multiple_matching_accounts\",\n        desc: \"The cache contains multiple accounts satisfying the given parameters. Please pass more info to obtain the correct account\"\n    },\n    multipleMatchingAppMetadata: {\n        code: \"multiple_matching_appMetadata\",\n        desc: \"The cache contains multiple appMetadata satisfying the given parameters. Please pass more info to obtain the correct appMetadata\"\n    },\n    tokenRequestCannotBeMade: {\n        code: \"request_cannot_be_made\",\n        desc: \"Token request cannot be made without authorization code or refresh token.\"\n    },\n    appendEmptyScopeError: {\n        code: \"cannot_append_empty_scope\",\n        desc: \"Cannot append null or empty scope to ScopeSet. Please check the stack trace for more info.\"\n    },\n    removeEmptyScopeError: {\n        code: \"cannot_remove_empty_scope\",\n        desc: \"Cannot remove null or empty scope from ScopeSet. Please check the stack trace for more info.\"\n    },\n    appendScopeSetError: {\n        code: \"cannot_append_scopeset\",\n        desc: \"Cannot append ScopeSet due to error.\"\n    },\n    emptyInputScopeSetError: {\n        code: \"empty_input_scopeset\",\n        desc: \"Empty input ScopeSet cannot be processed.\"\n    },\n    DeviceCodePollingCancelled: {\n        code: \"device_code_polling_cancelled\",\n        desc: \"Caller has cancelled token endpoint polling during device code flow by setting DeviceCodeRequest.cancel = true.\"\n    },\n    DeviceCodeExpired: {\n        code: \"device_code_expired\",\n        desc: \"Device code is expired.\"\n    },\n    DeviceCodeUnknownError: {\n        code: \"device_code_unknown_error\",\n        desc: \"Device code stopped polling for unknown reasons.\"\n    },\n    NoAccountInSilentRequest: {\n        code: \"no_account_in_silent_request\",\n        desc: \"Please pass an account object, silent flow is not supported without account information\"\n    },\n    invalidCacheRecord: {\n        code: \"invalid_cache_record\",\n        desc: \"Cache record object was null or undefined.\"\n    },\n    invalidCacheEnvironment: {\n        code: \"invalid_cache_environment\",\n        desc: \"Invalid environment when attempting to create cache entry\"\n    },\n    noAccountFound: {\n        code: \"no_account_found\",\n        desc: \"No account found in cache for given key.\"\n    },\n    CachePluginError: {\n        code: \"no cache plugin set on CacheManager\",\n        desc: \"ICachePlugin needs to be set before using readFromStorage or writeFromStorage\"\n    },\n    noCryptoObj: {\n        code: \"no_crypto_object\",\n        desc: \"No crypto object detected. This is required for the following operation: \"\n    },\n    invalidCacheType: {\n        code: \"invalid_cache_type\",\n        desc: \"Invalid cache type\"\n    },\n    unexpectedAccountType: {\n        code: \"unexpected_account_type\",\n        desc: \"Unexpected account type.\"\n    },\n    unexpectedCredentialType: {\n        code: \"unexpected_credential_type\",\n        desc: \"Unexpected credential type.\"\n    },\n    invalidAssertion: {\n        code: \"invalid_assertion\",\n        desc: \"Client assertion must meet requirements described in https://tools.ietf.org/html/rfc7515\"\n    },\n    invalidClientCredential: {\n        code: \"invalid_client_credential\",\n        desc: \"Client credential (secret, certificate, or assertion) must not be empty when creating a confidential client. An application should at most have one credential\"\n    },\n    tokenRefreshRequired: {\n        code: \"token_refresh_required\",\n        desc: \"Cannot return token from cache because it must be refreshed. This may be due to one of the following reasons: forceRefresh parameter is set to true, claims have been requested, there is no cached access token or it is expired.\"\n    },\n    userTimeoutReached: {\n        code: \"user_timeout_reached\",\n        desc: \"User defined timeout for device code polling reached\",\n    },\n    tokenClaimsRequired: {\n        code: \"token_claims_cnf_required_for_signedjwt\",\n        desc: \"Cannot generate a POP jwt if the token_claims are not populated\"\n    },\n    noAuthorizationCodeFromServer: {\n        code: \"authorization_code_missing_from_server_response\",\n        desc: \"Server response does not contain an authorization code to proceed\"\n    },\n    noAzureRegionDetected: {\n        code: \"no_azure_region_detected\",\n        desc: \"No azure region was detected and no fallback was made available\"\n    },\n    accessTokenEntityNullError: {\n        code: \"access_token_entity_null\",\n        desc: \"Access token entity is null, please check logs and cache to ensure a valid access token is present.\"\n    },\n    bindingKeyNotRemovedError: {\n        code: \"binding_key_not_removed\",\n        desc: \"Could not remove the credential's binding key from storage.\"\n    },\n    logoutNotSupported: {\n        code: \"end_session_endpoint_not_supported\",\n        desc: \"Provided authority does not support logout.\"\n    },\n    keyIdMissing: {\n        code: \"key_id_missing\",\n        desc: \"A keyId value is missing from the requested bound token's cache record and is required to match the token to it's stored binding key.\"\n    }\n};\n\n/**\n * Error thrown when there is an error in the client code running on the browser.\n */\nexport class ClientAuthError extends AuthError {\n\n    constructor(errorCode: string, errorMessage?: string) {\n        super(errorCode, errorMessage);\n        this.name = \"ClientAuthError\";\n\n        Object.setPrototypeOf(this, ClientAuthError.prototype);\n    }\n\n    /**\n     * Creates an error thrown when client info object doesn't decode correctly.\n     * @param caughtError\n     */\n    static createClientInfoDecodingError(caughtError: string): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.clientInfoDecodingError.code,\n            `${ClientAuthErrorMessage.clientInfoDecodingError.desc} Failed with error: ${caughtError}`);\n    }\n\n    /**\n     * Creates an error thrown if the client info is empty.\n     * @param rawClientInfo\n     */\n    static createClientInfoEmptyError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.clientInfoEmptyError.code,\n            `${ClientAuthErrorMessage.clientInfoEmptyError.desc}`);\n    }\n\n    /**\n     * Creates an error thrown when the id token extraction errors out.\n     * @param err\n     */\n    static createTokenParsingError(caughtExtractionError: string): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.tokenParsingError.code,\n            `${ClientAuthErrorMessage.tokenParsingError.desc} Failed with error: ${caughtExtractionError}`);\n    }\n\n    /**\n     * Creates an error thrown when the id token string is null or empty.\n     * @param invalidRawTokenString\n     */\n    static createTokenNullOrEmptyError(invalidRawTokenString: string): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.nullOrEmptyToken.code,\n            `${ClientAuthErrorMessage.nullOrEmptyToken.desc} Raw Token Value: ${invalidRawTokenString}`);\n    }\n\n    /**\n     * Creates an error thrown when the endpoint discovery doesn't complete correctly.\n     */\n    static createEndpointDiscoveryIncompleteError(errDetail: string): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.endpointResolutionError.code,\n            `${ClientAuthErrorMessage.endpointResolutionError.desc} Detail: ${errDetail}`);\n    }\n\n    /**\n     * Creates an error thrown when the fetch client throws\n     */\n    static createNetworkError(endpoint: string, errDetail: string): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.networkError.code,\n            `${ClientAuthErrorMessage.networkError.desc} | Fetch client threw: ${errDetail} | Attempted to reach: ${endpoint.split(\"?\")[0]}`);\n    }\n\n    /**\n     * Creates an error thrown when the openid-configuration endpoint cannot be reached or does not contain the required data\n     */\n    static createUnableToGetOpenidConfigError(errDetail: string): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.unableToGetOpenidConfigError.code,\n            `${ClientAuthErrorMessage.unableToGetOpenidConfigError.desc} Attempted to retrieve endpoints from: ${errDetail}`);\n    }\n\n    /**\n     * Creates an error thrown when the hash cannot be deserialized.\n     * @param hashParamObj\n     */\n    static createHashNotDeserializedError(hashParamObj: string): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.hashNotDeserialized.code,\n            `${ClientAuthErrorMessage.hashNotDeserialized.desc} Given Object: ${hashParamObj}`);\n    }\n\n    /**\n     * Creates an error thrown when the state cannot be parsed.\n     * @param invalidState\n     */\n    static createInvalidStateError(invalidState: string, errorString?: string): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.invalidStateError.code,\n            `${ClientAuthErrorMessage.invalidStateError.desc} Invalid State: ${invalidState}, Root Err: ${errorString}`);\n    }\n\n    /**\n     * Creates an error thrown when two states do not match.\n     */\n    static createStateMismatchError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.stateMismatchError.code,\n            ClientAuthErrorMessage.stateMismatchError.desc);\n    }\n\n    /**\n     * Creates an error thrown when the state is not present\n     * @param missingState\n     */\n    static createStateNotFoundError(missingState: string): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.stateNotFoundError.code,\n            `${ClientAuthErrorMessage.stateNotFoundError.desc}:  ${missingState}`);\n    }\n\n    /**\n     * Creates an error thrown when the nonce does not match.\n     */\n    static createNonceMismatchError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.nonceMismatchError.code,\n            ClientAuthErrorMessage.nonceMismatchError.desc);\n    }\n\n    /**\n     * Creates an error thrown when max_age was provided in the request, but auth_time is not in the token claims\n     * @param missingNonce\n     */\n    static createAuthTimeNotFoundError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.authTimeNotFoundError.code,\n            ClientAuthErrorMessage.authTimeNotFoundError.desc);\n    }\n\n    /**\n     * Creates an error thrown when too much time has elapsed since the last end-user authentication\n     */\n    static createMaxAgeTranspiredError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.maxAgeTranspiredError.code,\n            ClientAuthErrorMessage.maxAgeTranspiredError.desc);\n    }\n\n    /**\n     * Creates an error thrown when the mnonce is not present\n     * @param missingNonce\n     */\n    static createNonceNotFoundError(missingNonce: string): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.nonceNotFoundError.code,\n            `${ClientAuthErrorMessage.nonceNotFoundError.desc}:  ${missingNonce}`);\n    }\n\n    /**\n     * Throws error when multiple tokens are in cache.\n     */\n    static createMultipleMatchingTokensInCacheError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.multipleMatchingTokens.code,\n            `${ClientAuthErrorMessage.multipleMatchingTokens.desc}.`);\n    }\n\n    /**\n     * Throws error when multiple accounts are in cache for the given params\n     */\n    static createMultipleMatchingAccountsInCacheError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.multipleMatchingAccounts.code,\n            ClientAuthErrorMessage.multipleMatchingAccounts.desc);\n    }\n\n    /**\n     * Throws error when multiple appMetada are in cache for the given clientId.\n     */\n    static createMultipleMatchingAppMetadataInCacheError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.multipleMatchingAppMetadata.code,\n            ClientAuthErrorMessage.multipleMatchingAppMetadata.desc);\n    }\n\n    /**\n     * Throws error when no auth code or refresh token is given to ServerTokenRequestParameters.\n     */\n    static createTokenRequestCannotBeMadeError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.tokenRequestCannotBeMade.code, ClientAuthErrorMessage.tokenRequestCannotBeMade.desc);\n    }\n\n    /**\n     * Throws error when attempting to append a null, undefined or empty scope to a set\n     * @param givenScope\n     */\n    static createAppendEmptyScopeToSetError(givenScope: string): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.appendEmptyScopeError.code, `${ClientAuthErrorMessage.appendEmptyScopeError.desc} Given Scope: ${givenScope}`);\n    }\n\n    /**\n     * Throws error when attempting to append a null, undefined or empty scope to a set\n     * @param givenScope\n     */\n    static createRemoveEmptyScopeFromSetError(givenScope: string): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.removeEmptyScopeError.code, `${ClientAuthErrorMessage.removeEmptyScopeError.desc} Given Scope: ${givenScope}`);\n    }\n\n    /**\n     * Throws error when attempting to append null or empty ScopeSet.\n     * @param appendError\n     */\n    static createAppendScopeSetError(appendError: string): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.appendScopeSetError.code, `${ClientAuthErrorMessage.appendScopeSetError.desc} Detail Error: ${appendError}`);\n    }\n\n    /**\n     * Throws error if ScopeSet is null or undefined.\n     * @param givenScopeSet\n     */\n    static createEmptyInputScopeSetError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.emptyInputScopeSetError.code, `${ClientAuthErrorMessage.emptyInputScopeSetError.desc}`);\n    }\n\n    /**\n     * Throws error if user sets CancellationToken.cancel = true during polling of token endpoint during device code flow\n     */\n    static createDeviceCodeCancelledError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.DeviceCodePollingCancelled.code, `${ClientAuthErrorMessage.DeviceCodePollingCancelled.desc}`);\n    }\n\n    /**\n     * Throws error if device code is expired\n     */\n    static createDeviceCodeExpiredError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.DeviceCodeExpired.code, `${ClientAuthErrorMessage.DeviceCodeExpired.desc}`);\n    }\n\n    /**\n     * Throws error if device code is expired\n     */\n    static createDeviceCodeUnknownError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.DeviceCodeUnknownError.code, `${ClientAuthErrorMessage.DeviceCodeUnknownError.desc}`);\n    }\n\n    /**\n     * Throws error when silent requests are made without an account object\n     */\n    static createNoAccountInSilentRequestError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.NoAccountInSilentRequest.code, `${ClientAuthErrorMessage.NoAccountInSilentRequest.desc}`);\n    }\n\n    /**\n     * Throws error when cache record is null or undefined.\n     */\n    static createNullOrUndefinedCacheRecord(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.invalidCacheRecord.code, ClientAuthErrorMessage.invalidCacheRecord.desc);\n    }\n\n    /**\n     * Throws error when provided environment is not part of the CloudDiscoveryMetadata object\n     */\n    static createInvalidCacheEnvironmentError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.invalidCacheEnvironment.code, ClientAuthErrorMessage.invalidCacheEnvironment.desc);\n    }\n\n    /**\n     * Throws error when account is not found in cache.\n     */\n    static createNoAccountFoundError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.noAccountFound.code, ClientAuthErrorMessage.noAccountFound.desc);\n    }\n\n    /**\n     * Throws error if ICachePlugin not set on CacheManager.\n     */\n    static createCachePluginError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.CachePluginError.code, `${ClientAuthErrorMessage.CachePluginError.desc}`);\n    }\n\n    /**\n     * Throws error if crypto object not found.\n     * @param operationName\n     */\n    static createNoCryptoObjectError(operationName: string): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.noCryptoObj.code, `${ClientAuthErrorMessage.noCryptoObj.desc}${operationName}`);\n    }\n\n    /**\n     * Throws error if cache type is invalid.\n     */\n    static createInvalidCacheTypeError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.invalidCacheType.code, `${ClientAuthErrorMessage.invalidCacheType.desc}`);\n    }\n\n    /**\n     * Throws error if unexpected account type.\n     */\n    static createUnexpectedAccountTypeError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.unexpectedAccountType.code, `${ClientAuthErrorMessage.unexpectedAccountType.desc}`);\n    }\n\n    /**\n     * Throws error if unexpected credential type.\n     */\n    static createUnexpectedCredentialTypeError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.unexpectedCredentialType.code, `${ClientAuthErrorMessage.unexpectedCredentialType.desc}`);\n    }\n\n    /**\n     * Throws error if client assertion is not valid.\n     */\n    static createInvalidAssertionError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.invalidAssertion.code, `${ClientAuthErrorMessage.invalidAssertion.desc}`);\n    }\n\n    /**\n     * Throws error if client assertion is not valid.\n     */\n    static createInvalidCredentialError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.invalidClientCredential.code, `${ClientAuthErrorMessage.invalidClientCredential.desc}`);\n    }\n\n    /**\n     * Throws error if token cannot be retrieved from cache due to refresh being required.\n     */\n    static createRefreshRequiredError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.tokenRefreshRequired.code, ClientAuthErrorMessage.tokenRefreshRequired.desc);\n    }\n\n    /**\n     * Throws error if the user defined timeout is reached.\n     */\n    static createUserTimeoutReachedError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.userTimeoutReached.code, ClientAuthErrorMessage.userTimeoutReached.desc);\n    }\n\n    /*\n     * Throws error if token claims are not populated for a signed jwt generation\n     */\n    static createTokenClaimsRequiredError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.tokenClaimsRequired.code, ClientAuthErrorMessage.tokenClaimsRequired.desc);\n    }\n\n    /**\n     * Throws error when the authorization code is missing from the server response\n     */\n    static createNoAuthCodeInServerResponseError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.noAuthorizationCodeFromServer.code, ClientAuthErrorMessage.noAuthorizationCodeFromServer.desc);\n    }\n\n    static createBindingKeyNotRemovedError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.bindingKeyNotRemovedError.code, ClientAuthErrorMessage.bindingKeyNotRemovedError.desc);\n    }\n\n    /**\n     * Thrown when logout is attempted for an authority that doesnt have an end_session_endpoint\n     */\n    static createLogoutNotSupportedError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.logoutNotSupported.code, ClientAuthErrorMessage.logoutNotSupported.desc);\n    }\n\n    /**\n     * Create an error when kid attribute is missing from a PoP token's cache record\n     */\n    static createKeyIdMissingError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.keyIdMissing.code, ClientAuthErrorMessage.keyIdMissing.desc);\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}