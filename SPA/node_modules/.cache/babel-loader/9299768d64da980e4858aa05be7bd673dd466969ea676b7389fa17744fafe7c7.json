{"ast":null,"code":"/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nimport { LogLevel } from \"@azure/msal-browser\";\n\n/**\r\n * Enter here the user flows and custom policies for your B2C application\r\n * To learn more about user flows, visit: https://docs.microsoft.com/en-us/azure/active-directory-b2c/user-flow-overview\r\n * To learn more about custom policies, visit: https://docs.microsoft.com/en-us/azure/active-directory-b2c/custom-policy-overview\r\n */\nexport const b2cPolicies = {\n  names: {\n    signUpSignIn: 'B2C_1_susi_v2',\n    forgotPassword: 'B2C_1_reset_v3',\n    editProfile: 'B2C_1_edit_profile_v2'\n  },\n  authorities: {\n    signUpSignIn: {\n      authority: 'https://karanorgdatadna.b2clogin.com/karanorgdatadna.onmicrosoft.com/b2c_1_susi_v2'\n    },\n    forgotPassword: {\n      authority: 'https://karanorgdatadna.b2clogin.com/karanorgdatadna.onmicrosoft.com/B2C_1_reset_v3'\n    },\n    editProfile: {\n      authority: 'https://karanorgdatadna.b2clogin.com/karanorgdatadna.onmicrosoft.com/b2c_1_edit_profile_v2'\n    }\n  },\n  authorityDomain: 'karanorgdatadna.b2clogin.com'\n};\n\n/**\r\n * Configuration object to be passed to MSAL instance on creation. \r\n * For a full list of MSAL.js configuration parameters, visit:\r\n * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/configuration.md \r\n */\nexport const msalConfig = {\n  auth: {\n    clientId: '335e13d9-06d3-41cf-826a-080a092fbbbb',\n    // This is the ONLY mandatory field that you need to supply.\n    authority: b2cPolicies.authorities.signUpSignIn.authority,\n    // Choose SUSI as your default authority.\n    knownAuthorities: [b2cPolicies.authorityDomain],\n    // Mark your B2C tenant's domain as trusted.\n    redirectUri: '/',\n    // You must register this URI on Azure Portal/App Registration. Defaults to window.location.origin\n    postLogoutRedirectUri: '/',\n    // Indicates the page to navigate after logout.\n    navigateToLoginRequestUrl: false // If \"true\", will navigate back to the original request location before processing the auth code response.\n  },\n\n  cache: {\n    cacheLocation: 'sessionStorage',\n    // Configures cache location. \"sessionStorage\" is more secure, but \"localStorage\" gives you SSO between tabs.\n    storeAuthStateInCookie: false // Set this to \"true\" if you are having issues on IE11 or Edge\n  },\n\n  system: {\n    loggerOptions: {\n      loggerCallback: (level, message, containsPii) => {\n        if (containsPii) {\n          return;\n        }\n        switch (level) {\n          case LogLevel.Error:\n            console.error(message);\n            return;\n          case LogLevel.Info:\n            console.info(message);\n            return;\n          case LogLevel.Verbose:\n            console.debug(message);\n            return;\n          case LogLevel.Warning:\n            console.warn(message);\n            return;\n          default:\n            return;\n        }\n      }\n    }\n  }\n};\n\n/**\r\n * Add here the endpoints and scopes when obtaining an access token for protected web APIs. For more information, see:\r\n * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/resources-and-scopes.md\r\n */\nexport const protectedResources = {\n  apiTodoList: {\n    endpoint: 'http://localhost:5000/api/todolist',\n    scopes: {\n      read: ['https://karanorgdatadna.onmicrosoft.com/TodoList/ToDoList.Read'],\n      write: ['https://karanorgdatadna.onmicrosoft.com/TodoList/ToDoList.ReadWrite']\n    }\n  }\n};\n\n/**\r\n * Scopes you add here will be prompted for user consent during sign-in.\r\n * By default, MSAL.js will add OIDC scopes (openid, profile, email) to any login request.\r\n * For more information about OIDC scopes, visit: \r\n * https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-permissions-and-consent#openid-connect-scopes\r\n */\nexport const loginRequest = {\n  scopes: [...protectedResources.apiTodoList.scopes.read, ...protectedResources.apiTodoList.scopes.write]\n};","map":{"version":3,"names":["LogLevel","b2cPolicies","names","signUpSignIn","forgotPassword","editProfile","authorities","authority","authorityDomain","msalConfig","auth","clientId","knownAuthorities","redirectUri","postLogoutRedirectUri","navigateToLoginRequestUrl","cache","cacheLocation","storeAuthStateInCookie","system","loggerOptions","loggerCallback","level","message","containsPii","Error","console","error","Info","info","Verbose","debug","Warning","warn","protectedResources","apiTodoList","endpoint","scopes","read","write","loginRequest"],"sources":["C:/Azure/gitauthdemo/ms-identity-javascript-react-tutorial/3-Authorization-II/2-call-api-b2c/SPA/src/authConfig.js"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { LogLevel } from \"@azure/msal-browser\";\r\n\r\n/**\r\n * Enter here the user flows and custom policies for your B2C application\r\n * To learn more about user flows, visit: https://docs.microsoft.com/en-us/azure/active-directory-b2c/user-flow-overview\r\n * To learn more about custom policies, visit: https://docs.microsoft.com/en-us/azure/active-directory-b2c/custom-policy-overview\r\n */\r\nexport const b2cPolicies = {\r\n    names: {\r\n        signUpSignIn: 'B2C_1_susi_v2',\r\n        forgotPassword: 'B2C_1_reset_v3',\r\n        editProfile: 'B2C_1_edit_profile_v2',\r\n    },\r\n    authorities: {\r\n        signUpSignIn: {\r\n            authority: 'https://karanorgdatadna.b2clogin.com/karanorgdatadna.onmicrosoft.com/b2c_1_susi_v2',\r\n        },\r\n        forgotPassword: {\r\n            authority: 'https://karanorgdatadna.b2clogin.com/karanorgdatadna.onmicrosoft.com/B2C_1_reset_v3',\r\n        },\r\n        editProfile: {\r\n            authority: 'https://karanorgdatadna.b2clogin.com/karanorgdatadna.onmicrosoft.com/b2c_1_edit_profile_v2',\r\n        },\r\n    },\r\n    authorityDomain: 'karanorgdatadna.b2clogin.com',\r\n};\r\n\r\n\r\n/**\r\n * Configuration object to be passed to MSAL instance on creation. \r\n * For a full list of MSAL.js configuration parameters, visit:\r\n * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/configuration.md \r\n */\r\nexport const msalConfig = {\r\n    auth: {\r\n        clientId: '335e13d9-06d3-41cf-826a-080a092fbbbb', // This is the ONLY mandatory field that you need to supply.\r\n        authority: b2cPolicies.authorities.signUpSignIn.authority, // Choose SUSI as your default authority.\r\n        knownAuthorities: [b2cPolicies.authorityDomain], // Mark your B2C tenant's domain as trusted.\r\n        redirectUri: '/', // You must register this URI on Azure Portal/App Registration. Defaults to window.location.origin\r\n        postLogoutRedirectUri: '/', // Indicates the page to navigate after logout.\r\n        navigateToLoginRequestUrl: false, // If \"true\", will navigate back to the original request location before processing the auth code response.\r\n    },\r\n    cache: {\r\n        cacheLocation: 'sessionStorage', // Configures cache location. \"sessionStorage\" is more secure, but \"localStorage\" gives you SSO between tabs.\r\n        storeAuthStateInCookie: false, // Set this to \"true\" if you are having issues on IE11 or Edge\r\n    },\r\n    system: {\r\n        loggerOptions: {\r\n            loggerCallback: (level, message, containsPii) => {\r\n                if (containsPii) {\r\n                    return;\r\n                }\r\n                switch (level) {\r\n                    case LogLevel.Error:\r\n                        console.error(message);\r\n                        return;\r\n                    case LogLevel.Info:\r\n                        console.info(message);\r\n                        return;\r\n                    case LogLevel.Verbose:\r\n                        console.debug(message);\r\n                        return;\r\n                    case LogLevel.Warning:\r\n                        console.warn(message);\r\n                        return;\r\n                    default:\r\n                        return;\r\n                }\r\n            },\r\n        },\r\n    },\r\n};\r\n\r\n/**\r\n * Add here the endpoints and scopes when obtaining an access token for protected web APIs. For more information, see:\r\n * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/resources-and-scopes.md\r\n */\r\nexport const protectedResources = {\r\n    apiTodoList: {\r\n        endpoint: 'http://localhost:5000/api/todolist',\r\n        scopes: {\r\n            read: ['https://karanorgdatadna.onmicrosoft.com/TodoList/ToDoList.Read'],\r\n            write: ['https://karanorgdatadna.onmicrosoft.com/TodoList/ToDoList.ReadWrite'],\r\n        },\r\n    },\r\n};\r\n\r\n/**\r\n * Scopes you add here will be prompted for user consent during sign-in.\r\n * By default, MSAL.js will add OIDC scopes (openid, profile, email) to any login request.\r\n * For more information about OIDC scopes, visit: \r\n * https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-permissions-and-consent#openid-connect-scopes\r\n */\r\nexport const loginRequest = {\r\n    scopes: [...protectedResources.apiTodoList.scopes.read, ...protectedResources.apiTodoList.scopes.write],\r\n};\r\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,SAASA,QAAQ,QAAQ,qBAAqB;;AAE9C;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,WAAW,GAAG;EACvBC,KAAK,EAAE;IACHC,YAAY,EAAE,eAAe;IAC7BC,cAAc,EAAE,gBAAgB;IAChCC,WAAW,EAAE;EACjB,CAAC;EACDC,WAAW,EAAE;IACTH,YAAY,EAAE;MACVI,SAAS,EAAE;IACf,CAAC;IACDH,cAAc,EAAE;MACZG,SAAS,EAAE;IACf,CAAC;IACDF,WAAW,EAAE;MACTE,SAAS,EAAE;IACf;EACJ,CAAC;EACDC,eAAe,EAAE;AACrB,CAAC;;AAGD;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,UAAU,GAAG;EACtBC,IAAI,EAAE;IACFC,QAAQ,EAAE,sCAAsC;IAAE;IAClDJ,SAAS,EAAEN,WAAW,CAACK,WAAW,CAACH,YAAY,CAACI,SAAS;IAAE;IAC3DK,gBAAgB,EAAE,CAACX,WAAW,CAACO,eAAe,CAAC;IAAE;IACjDK,WAAW,EAAE,GAAG;IAAE;IAClBC,qBAAqB,EAAE,GAAG;IAAE;IAC5BC,yBAAyB,EAAE,KAAK,CAAE;EACtC,CAAC;;EACDC,KAAK,EAAE;IACHC,aAAa,EAAE,gBAAgB;IAAE;IACjCC,sBAAsB,EAAE,KAAK,CAAE;EACnC,CAAC;;EACDC,MAAM,EAAE;IACJC,aAAa,EAAE;MACXC,cAAc,EAAE,CAACC,KAAK,EAAEC,OAAO,EAAEC,WAAW,KAAK;QAC7C,IAAIA,WAAW,EAAE;UACb;QACJ;QACA,QAAQF,KAAK;UACT,KAAKtB,QAAQ,CAACyB,KAAK;YACfC,OAAO,CAACC,KAAK,CAACJ,OAAO,CAAC;YACtB;UACJ,KAAKvB,QAAQ,CAAC4B,IAAI;YACdF,OAAO,CAACG,IAAI,CAACN,OAAO,CAAC;YACrB;UACJ,KAAKvB,QAAQ,CAAC8B,OAAO;YACjBJ,OAAO,CAACK,KAAK,CAACR,OAAO,CAAC;YACtB;UACJ,KAAKvB,QAAQ,CAACgC,OAAO;YACjBN,OAAO,CAACO,IAAI,CAACV,OAAO,CAAC;YACrB;UACJ;YACI;QAAO;MAEnB;IACJ;EACJ;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMW,kBAAkB,GAAG;EAC9BC,WAAW,EAAE;IACTC,QAAQ,EAAE,oCAAoC;IAC9CC,MAAM,EAAE;MACJC,IAAI,EAAE,CAAC,gEAAgE,CAAC;MACxEC,KAAK,EAAE,CAAC,qEAAqE;IACjF;EACJ;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,YAAY,GAAG;EACxBH,MAAM,EAAE,CAAC,GAAGH,kBAAkB,CAACC,WAAW,CAACE,MAAM,CAACC,IAAI,EAAE,GAAGJ,kBAAkB,CAACC,WAAW,CAACE,MAAM,CAACE,KAAK;AAC1G,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}