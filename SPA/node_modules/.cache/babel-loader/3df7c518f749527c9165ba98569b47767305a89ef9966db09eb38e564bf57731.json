{"ast":null,"code":"/*! @azure/msal-browser v2.31.0 2022-11-07 */\n'use strict';\n\nimport { __extends, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { StringUtils, ClientAuthError, ServerError } from '@azure/msal-common';\nimport { BrowserAuthError, BrowserAuthErrorMessage } from '../error/BrowserAuthError.js';\nimport { TemporaryCacheKeys, ApiId } from '../utils/BrowserConstants.js';\nimport { InteractionHandler } from './InteractionHandler.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nvar RedirectHandler = /** @class */function (_super) {\n  __extends(RedirectHandler, _super);\n  function RedirectHandler(authCodeModule, storageImpl, authCodeRequest, logger, browserCrypto) {\n    var _this = _super.call(this, authCodeModule, storageImpl, authCodeRequest, logger) || this;\n    _this.browserCrypto = browserCrypto;\n    return _this;\n  }\n  /**\r\n   * Redirects window to given URL.\r\n   * @param urlNavigate\r\n   */\n  RedirectHandler.prototype.initiateAuthRequest = function (requestUrl, params) {\n    return __awaiter(this, void 0, void 0, function () {\n      var navigationOptions, navigate;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.logger.verbose(\"RedirectHandler.initiateAuthRequest called\");\n            if (!!StringUtils.isEmpty(requestUrl)) return [3 /*break*/, 7];\n            // Cache start page, returns to this page after redirectUri if navigateToLoginRequestUrl is true\n            if (params.redirectStartPage) {\n              this.logger.verbose(\"RedirectHandler.initiateAuthRequest: redirectStartPage set, caching start page\");\n              this.browserStorage.setTemporaryCache(TemporaryCacheKeys.ORIGIN_URI, params.redirectStartPage, true);\n            }\n            // Set interaction status in the library.\n            this.browserStorage.setTemporaryCache(TemporaryCacheKeys.CORRELATION_ID, this.authCodeRequest.correlationId, true);\n            this.browserStorage.cacheCodeRequest(this.authCodeRequest, this.browserCrypto);\n            this.logger.infoPii(\"RedirectHandler.initiateAuthRequest: Navigate to: \" + requestUrl);\n            navigationOptions = {\n              apiId: ApiId.acquireTokenRedirect,\n              timeout: params.redirectTimeout,\n              noHistory: false\n            };\n            if (!(typeof params.onRedirectNavigate === \"function\")) return [3 /*break*/, 4];\n            this.logger.verbose(\"RedirectHandler.initiateAuthRequest: Invoking onRedirectNavigate callback\");\n            navigate = params.onRedirectNavigate(requestUrl);\n            if (!(navigate !== false)) return [3 /*break*/, 2];\n            this.logger.verbose(\"RedirectHandler.initiateAuthRequest: onRedirectNavigate did not return false, navigating\");\n            return [4 /*yield*/, params.navigationClient.navigateExternal(requestUrl, navigationOptions)];\n          case 1:\n            _a.sent();\n            return [2 /*return*/];\n          case 2:\n            this.logger.verbose(\"RedirectHandler.initiateAuthRequest: onRedirectNavigate returned false, stopping navigation\");\n            return [2 /*return*/];\n          case 3:\n            return [3 /*break*/, 6];\n          case 4:\n            // Navigate window to request URL\n            this.logger.verbose(\"RedirectHandler.initiateAuthRequest: Navigating window to navigate url\");\n            return [4 /*yield*/, params.navigationClient.navigateExternal(requestUrl, navigationOptions)];\n          case 5:\n            _a.sent();\n            return [2 /*return*/];\n          case 6:\n            return [3 /*break*/, 8];\n          case 7:\n            // Throw error if request URL is empty.\n            this.logger.info(\"RedirectHandler.initiateAuthRequest: Navigate url is empty\");\n            throw BrowserAuthError.createEmptyNavigationUriError();\n          case 8:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\r\n   * Handle authorization code response in the window.\r\n   * @param hash\r\n   */\n  RedirectHandler.prototype.handleCodeResponseFromHash = function (locationHash, state, authority, networkModule) {\n    return __awaiter(this, void 0, void 0, function () {\n      var stateKey, requestState, authCodeResponse, nonceKey, cachedNonce, cachedCcsCred, tokenResponse;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.logger.verbose(\"RedirectHandler.handleCodeResponse called\");\n            // Check that location hash isn't empty.\n            if (StringUtils.isEmpty(locationHash)) {\n              throw BrowserAuthError.createEmptyHashError(locationHash);\n            }\n            // Interaction is completed - remove interaction status.\n            this.browserStorage.setInteractionInProgress(false);\n            stateKey = this.browserStorage.generateStateKey(state);\n            requestState = this.browserStorage.getTemporaryCache(stateKey);\n            if (!requestState) {\n              throw ClientAuthError.createStateNotFoundError(\"Cached State\");\n            }\n            try {\n              authCodeResponse = this.authModule.handleFragmentResponse(locationHash, requestState);\n            } catch (e) {\n              if (e instanceof ServerError && e.subError === BrowserAuthErrorMessage.userCancelledError.code) {\n                // Translate server error caused by user closing native prompt to corresponding first class MSAL error\n                throw BrowserAuthError.createUserCancelledError();\n              } else {\n                throw e;\n              }\n            }\n            nonceKey = this.browserStorage.generateNonceKey(requestState);\n            cachedNonce = this.browserStorage.getTemporaryCache(nonceKey);\n            // Assign code to request\n            this.authCodeRequest.code = authCodeResponse.code;\n            if (!authCodeResponse.cloud_instance_host_name) return [3 /*break*/, 2];\n            return [4 /*yield*/, this.updateTokenEndpointAuthority(authCodeResponse.cloud_instance_host_name, authority, networkModule)];\n          case 1:\n            _a.sent();\n            _a.label = 2;\n          case 2:\n            authCodeResponse.nonce = cachedNonce || undefined;\n            authCodeResponse.state = requestState;\n            // Add CCS parameters if available\n            if (authCodeResponse.client_info) {\n              this.authCodeRequest.clientInfo = authCodeResponse.client_info;\n            } else {\n              cachedCcsCred = this.checkCcsCredentials();\n              if (cachedCcsCred) {\n                this.authCodeRequest.ccsCredential = cachedCcsCred;\n              }\n            }\n            return [4 /*yield*/, this.authModule.acquireToken(this.authCodeRequest, authCodeResponse)];\n          case 3:\n            tokenResponse = _a.sent();\n            this.browserStorage.cleanRequestByState(state);\n            return [2 /*return*/, tokenResponse];\n        }\n      });\n    });\n  };\n  return RedirectHandler;\n}(InteractionHandler);\nexport { RedirectHandler };","map":{"version":3,"mappings":"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","names":["__extends","authCodeModule","storageImpl","authCodeRequest","logger","browserCrypto","_super","_this","RedirectHandler","requestUrl","params","verbose","StringUtils","isEmpty","redirectStartPage","browserStorage","setTemporaryCache","TemporaryCacheKeys","ORIGIN_URI","CORRELATION_ID","correlationId","cacheCodeRequest","infoPii","navigationOptions","apiId","ApiId","acquireTokenRedirect","timeout","redirectTimeout","noHistory","onRedirectNavigate","navigate","navigationClient","navigateExternal","_a","info","BrowserAuthError","createEmptyNavigationUriError","locationHash","state","authority","networkModule","createEmptyHashError","setInteractionInProgress","stateKey","generateStateKey","requestState","getTemporaryCache","ClientAuthError","createStateNotFoundError","authCodeResponse","authModule","handleFragmentResponse","e","ServerError","subError","BrowserAuthErrorMessage","userCancelledError","code","createUserCancelledError","nonceKey","generateNonceKey","cachedNonce","cloud_instance_host_name","updateTokenEndpointAuthority","nonce","undefined","client_info","clientInfo","cachedCcsCred","checkCcsCredentials","ccsCredential","acquireToken","tokenResponse","cleanRequestByState","InteractionHandler"],"sources":["C:\\Azure\\gitauthdemo\\ms-identity-javascript-react-tutorial\\3-Authorization-II\\2-call-api-b2c\\SPA\\node_modules\\@azure\\msal-browser\\src\\interaction_handler\\RedirectHandler.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AuthorizationCodeClient, StringUtils, CommonAuthorizationCodeRequest, ICrypto, AuthenticationResult, Authority, INetworkModule, ClientAuthError, Logger, ServerError } from \"@azure/msal-common\";\nimport { BrowserAuthError, BrowserAuthErrorMessage } from \"../error/BrowserAuthError\";\nimport { ApiId, TemporaryCacheKeys } from \"../utils/BrowserConstants\";\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\nimport { InteractionHandler, InteractionParams } from \"./InteractionHandler\";\nimport { INavigationClient } from \"../navigation/INavigationClient\";\nimport { NavigationOptions } from \"../navigation/NavigationOptions\";\n\nexport type RedirectParams = InteractionParams & {\n    navigationClient: INavigationClient;\n    redirectTimeout: number;\n    redirectStartPage: string;\n    onRedirectNavigate?: (url: string) => void | boolean;\n};\n\nexport class RedirectHandler extends InteractionHandler {\n\n    private browserCrypto: ICrypto;\n\n    constructor(authCodeModule: AuthorizationCodeClient, storageImpl: BrowserCacheManager, authCodeRequest: CommonAuthorizationCodeRequest, logger: Logger, browserCrypto: ICrypto) {\n        super(authCodeModule, storageImpl, authCodeRequest, logger);\n        this.browserCrypto = browserCrypto;\n    }\n\n    /**\n     * Redirects window to given URL.\n     * @param urlNavigate\n     */\n    async initiateAuthRequest(requestUrl: string, params: RedirectParams): Promise<void> {\n        this.logger.verbose(\"RedirectHandler.initiateAuthRequest called\");\n        // Navigate if valid URL\n        if (!StringUtils.isEmpty(requestUrl)) {\n            // Cache start page, returns to this page after redirectUri if navigateToLoginRequestUrl is true\n            if (params.redirectStartPage) {\n                this.logger.verbose(\"RedirectHandler.initiateAuthRequest: redirectStartPage set, caching start page\");\n                this.browserStorage.setTemporaryCache(TemporaryCacheKeys.ORIGIN_URI, params.redirectStartPage, true);\n            }\n\n            // Set interaction status in the library.\n            this.browserStorage.setTemporaryCache(TemporaryCacheKeys.CORRELATION_ID, this.authCodeRequest.correlationId, true);\n            this.browserStorage.cacheCodeRequest(this.authCodeRequest, this.browserCrypto);\n            this.logger.infoPii(`RedirectHandler.initiateAuthRequest: Navigate to: ${requestUrl}`);\n            const navigationOptions: NavigationOptions = {\n                apiId: ApiId.acquireTokenRedirect,\n                timeout: params.redirectTimeout,\n                noHistory: false\n            };\n            \n            // If onRedirectNavigate is implemented, invoke it and provide requestUrl\n            if (typeof params.onRedirectNavigate === \"function\") {\n                this.logger.verbose(\"RedirectHandler.initiateAuthRequest: Invoking onRedirectNavigate callback\");\n                const navigate = params.onRedirectNavigate(requestUrl);\n\n                // Returning false from onRedirectNavigate will stop navigation\n                if (navigate !== false) {\n                    this.logger.verbose(\"RedirectHandler.initiateAuthRequest: onRedirectNavigate did not return false, navigating\");\n                    await params.navigationClient.navigateExternal(requestUrl, navigationOptions);\n                    return;\n                } else {\n                    this.logger.verbose(\"RedirectHandler.initiateAuthRequest: onRedirectNavigate returned false, stopping navigation\");\n                    return;\n                }\n            } else {\n                // Navigate window to request URL\n                this.logger.verbose(\"RedirectHandler.initiateAuthRequest: Navigating window to navigate url\");\n                await params.navigationClient.navigateExternal(requestUrl, navigationOptions);\n                return;\n            }\n        } else {\n            // Throw error if request URL is empty.\n            this.logger.info(\"RedirectHandler.initiateAuthRequest: Navigate url is empty\");\n            throw BrowserAuthError.createEmptyNavigationUriError();\n        }\n    }\n\n    /**\n     * Handle authorization code response in the window.\n     * @param hash\n     */\n    async handleCodeResponseFromHash(locationHash: string, state: string, authority: Authority, networkModule: INetworkModule): Promise<AuthenticationResult> {\n        this.logger.verbose(\"RedirectHandler.handleCodeResponse called\");\n\n        // Check that location hash isn't empty.\n        if (StringUtils.isEmpty(locationHash)) {\n            throw BrowserAuthError.createEmptyHashError(locationHash);\n        }\n\n        // Interaction is completed - remove interaction status.\n        this.browserStorage.setInteractionInProgress(false);\n\n        // Handle code response.\n        const stateKey = this.browserStorage.generateStateKey(state);\n        const requestState = this.browserStorage.getTemporaryCache(stateKey);\n        if (!requestState) {\n            throw ClientAuthError.createStateNotFoundError(\"Cached State\");\n        }\n\n        let authCodeResponse;\n        try {\n            authCodeResponse = this.authModule.handleFragmentResponse(locationHash, requestState);\n        } catch (e) {\n            if (e instanceof ServerError && e.subError === BrowserAuthErrorMessage.userCancelledError.code) {\n                // Translate server error caused by user closing native prompt to corresponding first class MSAL error\n                throw BrowserAuthError.createUserCancelledError();\n            } else {\n                throw e;\n            }\n        }\n\n        // Get cached items\n        const nonceKey = this.browserStorage.generateNonceKey(requestState);\n        const cachedNonce = this.browserStorage.getTemporaryCache(nonceKey);\n\n        // Assign code to request\n        this.authCodeRequest.code = authCodeResponse.code;\n\n        // Check for new cloud instance\n        if (authCodeResponse.cloud_instance_host_name) {\n            await this.updateTokenEndpointAuthority(authCodeResponse.cloud_instance_host_name, authority, networkModule);\n        }\n\n        authCodeResponse.nonce = cachedNonce || undefined;\n        authCodeResponse.state = requestState;\n\n        // Add CCS parameters if available\n        if (authCodeResponse.client_info) {\n            this.authCodeRequest.clientInfo = authCodeResponse.client_info;\n        } else {\n            const cachedCcsCred = this.checkCcsCredentials();\n            if (cachedCcsCred) {\n                this.authCodeRequest.ccsCredential = cachedCcsCred;\n            }\n        }\n\n        // Acquire token with retrieved code.\n        const tokenResponse = await this.authModule.acquireToken(this.authCodeRequest, authCodeResponse);\n\n        this.browserStorage.cleanRequestByState(state);\n        return tokenResponse;\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}