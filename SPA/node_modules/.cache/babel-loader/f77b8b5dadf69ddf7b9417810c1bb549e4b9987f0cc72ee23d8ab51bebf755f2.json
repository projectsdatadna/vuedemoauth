{"ast":null,"code":"/*! @azure/msal-common v8.0.0 2022-11-07 */\n'use strict';\n\nimport { __spreadArrays } from '../_virtual/_tslib.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nvar Constants = {\n  LIBRARY_NAME: \"MSAL.JS\",\n  SKU: \"msal.js.common\",\n  // Prefix for all library cache entries\n  CACHE_PREFIX: \"msal\",\n  // default authority\n  DEFAULT_AUTHORITY: \"https://login.microsoftonline.com/common/\",\n  DEFAULT_AUTHORITY_HOST: \"login.microsoftonline.com\",\n  DEFAULT_COMMON_TENANT: \"common\",\n  // ADFS String\n  ADFS: \"adfs\",\n  DSTS: \"dstsv2\",\n  // Default AAD Instance Discovery Endpoint\n  AAD_INSTANCE_DISCOVERY_ENDPT: \"https://login.microsoftonline.com/common/discovery/instance?api-version=1.1&authorization_endpoint=\",\n  // Resource delimiter - used for certain cache entries\n  RESOURCE_DELIM: \"|\",\n  // Placeholder for non-existent account ids/objects\n  NO_ACCOUNT: \"NO_ACCOUNT\",\n  // Claims\n  CLAIMS: \"claims\",\n  // Consumer UTID\n  CONSUMER_UTID: \"9188040d-6c67-4c5b-b112-36a304b66dad\",\n  // Default scopes\n  OPENID_SCOPE: \"openid\",\n  PROFILE_SCOPE: \"profile\",\n  OFFLINE_ACCESS_SCOPE: \"offline_access\",\n  EMAIL_SCOPE: \"email\",\n  // Default response type for authorization code flow\n  CODE_RESPONSE_TYPE: \"code\",\n  CODE_GRANT_TYPE: \"authorization_code\",\n  RT_GRANT_TYPE: \"refresh_token\",\n  FRAGMENT_RESPONSE_MODE: \"fragment\",\n  S256_CODE_CHALLENGE_METHOD: \"S256\",\n  URL_FORM_CONTENT_TYPE: \"application/x-www-form-urlencoded;charset=utf-8\",\n  AUTHORIZATION_PENDING: \"authorization_pending\",\n  NOT_DEFINED: \"not_defined\",\n  EMPTY_STRING: \"\",\n  FORWARD_SLASH: \"/\",\n  IMDS_ENDPOINT: \"http://169.254.169.254/metadata/instance/compute/location\",\n  IMDS_VERSION: \"2020-06-01\",\n  IMDS_TIMEOUT: 2000,\n  AZURE_REGION_AUTO_DISCOVER_FLAG: \"TryAutoDetect\",\n  REGIONAL_AUTH_PUBLIC_CLOUD_SUFFIX: \"login.microsoft.com\",\n  REGIONAL_AUTH_NON_MSI_QUERY_STRING: \"allowestsrnonmsi=true\",\n  KNOWN_PUBLIC_CLOUDS: [\"login.microsoftonline.com\", \"login.windows.net\", \"login.microsoft.com\", \"sts.windows.net\"],\n  TOKEN_RESPONSE_TYPE: \"token\",\n  ID_TOKEN_RESPONSE_TYPE: \"id_token\",\n  SHR_NONCE_VALIDITY: 240\n};\nvar OIDC_DEFAULT_SCOPES = [Constants.OPENID_SCOPE, Constants.PROFILE_SCOPE, Constants.OFFLINE_ACCESS_SCOPE];\nvar OIDC_SCOPES = __spreadArrays(OIDC_DEFAULT_SCOPES, [Constants.EMAIL_SCOPE]);\n/**\r\n * Request header names\r\n */\nvar HeaderNames;\n(function (HeaderNames) {\n  HeaderNames[\"CONTENT_TYPE\"] = \"Content-Type\";\n  HeaderNames[\"RETRY_AFTER\"] = \"Retry-After\";\n  HeaderNames[\"CCS_HEADER\"] = \"X-AnchorMailbox\";\n  HeaderNames[\"WWWAuthenticate\"] = \"WWW-Authenticate\";\n  HeaderNames[\"AuthenticationInfo\"] = \"Authentication-Info\";\n  HeaderNames[\"X_MS_REQUEST_ID\"] = \"x-ms-request-id\";\n})(HeaderNames || (HeaderNames = {}));\n/**\r\n * Persistent cache keys MSAL which stay while user is logged in.\r\n */\nvar PersistentCacheKeys;\n(function (PersistentCacheKeys) {\n  PersistentCacheKeys[\"ID_TOKEN\"] = \"idtoken\";\n  PersistentCacheKeys[\"CLIENT_INFO\"] = \"client.info\";\n  PersistentCacheKeys[\"ADAL_ID_TOKEN\"] = \"adal.idtoken\";\n  PersistentCacheKeys[\"ERROR\"] = \"error\";\n  PersistentCacheKeys[\"ERROR_DESC\"] = \"error.description\";\n  PersistentCacheKeys[\"ACTIVE_ACCOUNT\"] = \"active-account\";\n  PersistentCacheKeys[\"ACTIVE_ACCOUNT_FILTERS\"] = \"active-account-filters\"; // new cache entry for active_account for a more robust version for browser\n})(PersistentCacheKeys || (PersistentCacheKeys = {}));\n/**\r\n * String constants related to AAD Authority\r\n */\nvar AADAuthorityConstants;\n(function (AADAuthorityConstants) {\n  AADAuthorityConstants[\"COMMON\"] = \"common\";\n  AADAuthorityConstants[\"ORGANIZATIONS\"] = \"organizations\";\n  AADAuthorityConstants[\"CONSUMERS\"] = \"consumers\";\n})(AADAuthorityConstants || (AADAuthorityConstants = {}));\n/**\r\n * Keys in the hashParams sent by AAD Server\r\n */\nvar AADServerParamKeys;\n(function (AADServerParamKeys) {\n  AADServerParamKeys[\"CLIENT_ID\"] = \"client_id\";\n  AADServerParamKeys[\"REDIRECT_URI\"] = \"redirect_uri\";\n  AADServerParamKeys[\"RESPONSE_TYPE\"] = \"response_type\";\n  AADServerParamKeys[\"RESPONSE_MODE\"] = \"response_mode\";\n  AADServerParamKeys[\"GRANT_TYPE\"] = \"grant_type\";\n  AADServerParamKeys[\"CLAIMS\"] = \"claims\";\n  AADServerParamKeys[\"SCOPE\"] = \"scope\";\n  AADServerParamKeys[\"ERROR\"] = \"error\";\n  AADServerParamKeys[\"ERROR_DESCRIPTION\"] = \"error_description\";\n  AADServerParamKeys[\"ACCESS_TOKEN\"] = \"access_token\";\n  AADServerParamKeys[\"ID_TOKEN\"] = \"id_token\";\n  AADServerParamKeys[\"REFRESH_TOKEN\"] = \"refresh_token\";\n  AADServerParamKeys[\"EXPIRES_IN\"] = \"expires_in\";\n  AADServerParamKeys[\"STATE\"] = \"state\";\n  AADServerParamKeys[\"NONCE\"] = \"nonce\";\n  AADServerParamKeys[\"PROMPT\"] = \"prompt\";\n  AADServerParamKeys[\"SESSION_STATE\"] = \"session_state\";\n  AADServerParamKeys[\"CLIENT_INFO\"] = \"client_info\";\n  AADServerParamKeys[\"CODE\"] = \"code\";\n  AADServerParamKeys[\"CODE_CHALLENGE\"] = \"code_challenge\";\n  AADServerParamKeys[\"CODE_CHALLENGE_METHOD\"] = \"code_challenge_method\";\n  AADServerParamKeys[\"CODE_VERIFIER\"] = \"code_verifier\";\n  AADServerParamKeys[\"CLIENT_REQUEST_ID\"] = \"client-request-id\";\n  AADServerParamKeys[\"X_CLIENT_SKU\"] = \"x-client-SKU\";\n  AADServerParamKeys[\"X_CLIENT_VER\"] = \"x-client-VER\";\n  AADServerParamKeys[\"X_CLIENT_OS\"] = \"x-client-OS\";\n  AADServerParamKeys[\"X_CLIENT_CPU\"] = \"x-client-CPU\";\n  AADServerParamKeys[\"X_CLIENT_CURR_TELEM\"] = \"x-client-current-telemetry\";\n  AADServerParamKeys[\"X_CLIENT_LAST_TELEM\"] = \"x-client-last-telemetry\";\n  AADServerParamKeys[\"X_MS_LIB_CAPABILITY\"] = \"x-ms-lib-capability\";\n  AADServerParamKeys[\"X_APP_NAME\"] = \"x-app-name\";\n  AADServerParamKeys[\"X_APP_VER\"] = \"x-app-ver\";\n  AADServerParamKeys[\"POST_LOGOUT_URI\"] = \"post_logout_redirect_uri\";\n  AADServerParamKeys[\"ID_TOKEN_HINT\"] = \"id_token_hint\";\n  AADServerParamKeys[\"DEVICE_CODE\"] = \"device_code\";\n  AADServerParamKeys[\"CLIENT_SECRET\"] = \"client_secret\";\n  AADServerParamKeys[\"CLIENT_ASSERTION\"] = \"client_assertion\";\n  AADServerParamKeys[\"CLIENT_ASSERTION_TYPE\"] = \"client_assertion_type\";\n  AADServerParamKeys[\"TOKEN_TYPE\"] = \"token_type\";\n  AADServerParamKeys[\"REQ_CNF\"] = \"req_cnf\";\n  AADServerParamKeys[\"OBO_ASSERTION\"] = \"assertion\";\n  AADServerParamKeys[\"REQUESTED_TOKEN_USE\"] = \"requested_token_use\";\n  AADServerParamKeys[\"ON_BEHALF_OF\"] = \"on_behalf_of\";\n  AADServerParamKeys[\"FOCI\"] = \"foci\";\n  AADServerParamKeys[\"CCS_HEADER\"] = \"X-AnchorMailbox\";\n  AADServerParamKeys[\"RETURN_SPA_CODE\"] = \"return_spa_code\";\n  AADServerParamKeys[\"NATIVE_BROKER\"] = \"nativebroker\";\n  AADServerParamKeys[\"LOGOUT_HINT\"] = \"logout_hint\";\n})(AADServerParamKeys || (AADServerParamKeys = {}));\n/**\r\n * Claims request keys\r\n */\nvar ClaimsRequestKeys;\n(function (ClaimsRequestKeys) {\n  ClaimsRequestKeys[\"ACCESS_TOKEN\"] = \"access_token\";\n  ClaimsRequestKeys[\"XMS_CC\"] = \"xms_cc\";\n})(ClaimsRequestKeys || (ClaimsRequestKeys = {}));\n/**\r\n * we considered making this \"enum\" in the request instead of string, however it looks like the allowed list of\r\n * prompt values kept changing over past couple of years. There are some undocumented prompt values for some\r\n * internal partners too, hence the choice of generic \"string\" type instead of the \"enum\"\r\n */\nvar PromptValue = {\n  LOGIN: \"login\",\n  SELECT_ACCOUNT: \"select_account\",\n  CONSENT: \"consent\",\n  NONE: \"none\",\n  CREATE: \"create\",\n  NO_SESSION: \"no_session\"\n};\n/**\r\n * SSO Types - generated to populate hints\r\n */\nvar SSOTypes;\n(function (SSOTypes) {\n  SSOTypes[\"ACCOUNT\"] = \"account\";\n  SSOTypes[\"SID\"] = \"sid\";\n  SSOTypes[\"LOGIN_HINT\"] = \"login_hint\";\n  SSOTypes[\"ID_TOKEN\"] = \"id_token\";\n  SSOTypes[\"DOMAIN_HINT\"] = \"domain_hint\";\n  SSOTypes[\"ORGANIZATIONS\"] = \"organizations\";\n  SSOTypes[\"CONSUMERS\"] = \"consumers\";\n  SSOTypes[\"ACCOUNT_ID\"] = \"accountIdentifier\";\n  SSOTypes[\"HOMEACCOUNT_ID\"] = \"homeAccountIdentifier\";\n})(SSOTypes || (SSOTypes = {}));\n/**\r\n * allowed values for codeVerifier\r\n */\nvar CodeChallengeMethodValues = {\n  PLAIN: \"plain\",\n  S256: \"S256\"\n};\n/**\r\n * allowed values for response_mode\r\n */\nvar ResponseMode;\n(function (ResponseMode) {\n  ResponseMode[\"QUERY\"] = \"query\";\n  ResponseMode[\"FRAGMENT\"] = \"fragment\";\n  ResponseMode[\"FORM_POST\"] = \"form_post\";\n})(ResponseMode || (ResponseMode = {}));\n/**\r\n * allowed grant_type\r\n */\nvar GrantType;\n(function (GrantType) {\n  GrantType[\"IMPLICIT_GRANT\"] = \"implicit\";\n  GrantType[\"AUTHORIZATION_CODE_GRANT\"] = \"authorization_code\";\n  GrantType[\"CLIENT_CREDENTIALS_GRANT\"] = \"client_credentials\";\n  GrantType[\"RESOURCE_OWNER_PASSWORD_GRANT\"] = \"password\";\n  GrantType[\"REFRESH_TOKEN_GRANT\"] = \"refresh_token\";\n  GrantType[\"DEVICE_CODE_GRANT\"] = \"device_code\";\n  GrantType[\"JWT_BEARER\"] = \"urn:ietf:params:oauth:grant-type:jwt-bearer\";\n})(GrantType || (GrantType = {}));\n/**\r\n * Account types in Cache\r\n */\nvar CacheAccountType;\n(function (CacheAccountType) {\n  CacheAccountType[\"MSSTS_ACCOUNT_TYPE\"] = \"MSSTS\";\n  CacheAccountType[\"ADFS_ACCOUNT_TYPE\"] = \"ADFS\";\n  CacheAccountType[\"MSAV1_ACCOUNT_TYPE\"] = \"MSA\";\n  CacheAccountType[\"GENERIC_ACCOUNT_TYPE\"] = \"Generic\"; // NTLM, Kerberos, FBA, Basic etc\n})(CacheAccountType || (CacheAccountType = {}));\n/**\r\n * Separators used in cache\r\n */\nvar Separators;\n(function (Separators) {\n  Separators[\"CACHE_KEY_SEPARATOR\"] = \"-\";\n  Separators[\"CLIENT_INFO_SEPARATOR\"] = \".\";\n})(Separators || (Separators = {}));\n/**\r\n * Credential Type stored in the cache\r\n */\nvar CredentialType;\n(function (CredentialType) {\n  CredentialType[\"ID_TOKEN\"] = \"IdToken\";\n  CredentialType[\"ACCESS_TOKEN\"] = \"AccessToken\";\n  CredentialType[\"ACCESS_TOKEN_WITH_AUTH_SCHEME\"] = \"AccessToken_With_AuthScheme\";\n  CredentialType[\"REFRESH_TOKEN\"] = \"RefreshToken\";\n})(CredentialType || (CredentialType = {}));\n/**\r\n * Credential Type stored in the cache\r\n */\nvar CacheSchemaType;\n(function (CacheSchemaType) {\n  CacheSchemaType[\"ACCOUNT\"] = \"Account\";\n  CacheSchemaType[\"CREDENTIAL\"] = \"Credential\";\n  CacheSchemaType[\"ID_TOKEN\"] = \"IdToken\";\n  CacheSchemaType[\"ACCESS_TOKEN\"] = \"AccessToken\";\n  CacheSchemaType[\"REFRESH_TOKEN\"] = \"RefreshToken\";\n  CacheSchemaType[\"APP_METADATA\"] = \"AppMetadata\";\n  CacheSchemaType[\"TEMPORARY\"] = \"TempCache\";\n  CacheSchemaType[\"TELEMETRY\"] = \"Telemetry\";\n  CacheSchemaType[\"UNDEFINED\"] = \"Undefined\";\n  CacheSchemaType[\"THROTTLING\"] = \"Throttling\";\n})(CacheSchemaType || (CacheSchemaType = {}));\n/**\r\n * Combine all cache types\r\n */\nvar CacheType;\n(function (CacheType) {\n  CacheType[CacheType[\"ADFS\"] = 1001] = \"ADFS\";\n  CacheType[CacheType[\"MSA\"] = 1002] = \"MSA\";\n  CacheType[CacheType[\"MSSTS\"] = 1003] = \"MSSTS\";\n  CacheType[CacheType[\"GENERIC\"] = 1004] = \"GENERIC\";\n  CacheType[CacheType[\"ACCESS_TOKEN\"] = 2001] = \"ACCESS_TOKEN\";\n  CacheType[CacheType[\"REFRESH_TOKEN\"] = 2002] = \"REFRESH_TOKEN\";\n  CacheType[CacheType[\"ID_TOKEN\"] = 2003] = \"ID_TOKEN\";\n  CacheType[CacheType[\"APP_METADATA\"] = 3001] = \"APP_METADATA\";\n  CacheType[CacheType[\"UNDEFINED\"] = 9999] = \"UNDEFINED\";\n})(CacheType || (CacheType = {}));\n/**\r\n * More Cache related constants\r\n */\nvar APP_METADATA = \"appmetadata\";\nvar CLIENT_INFO = \"client_info\";\nvar THE_FAMILY_ID = \"1\";\nvar AUTHORITY_METADATA_CONSTANTS = {\n  CACHE_KEY: \"authority-metadata\",\n  REFRESH_TIME_SECONDS: 3600 * 24 // 24 Hours\n};\n\nvar AuthorityMetadataSource;\n(function (AuthorityMetadataSource) {\n  AuthorityMetadataSource[\"CONFIG\"] = \"config\";\n  AuthorityMetadataSource[\"CACHE\"] = \"cache\";\n  AuthorityMetadataSource[\"NETWORK\"] = \"network\";\n  AuthorityMetadataSource[\"HARDCODED_VALUES\"] = \"hardcoded_values\";\n})(AuthorityMetadataSource || (AuthorityMetadataSource = {}));\nvar SERVER_TELEM_CONSTANTS = {\n  SCHEMA_VERSION: 5,\n  MAX_CUR_HEADER_BYTES: 80,\n  MAX_LAST_HEADER_BYTES: 330,\n  MAX_CACHED_ERRORS: 50,\n  CACHE_KEY: \"server-telemetry\",\n  CATEGORY_SEPARATOR: \"|\",\n  VALUE_SEPARATOR: \",\",\n  OVERFLOW_TRUE: \"1\",\n  OVERFLOW_FALSE: \"0\",\n  UNKNOWN_ERROR: \"unknown_error\"\n};\n/**\r\n * Type of the authentication request\r\n */\nvar AuthenticationScheme;\n(function (AuthenticationScheme) {\n  AuthenticationScheme[\"BEARER\"] = \"Bearer\";\n  AuthenticationScheme[\"POP\"] = \"pop\";\n  AuthenticationScheme[\"SSH\"] = \"ssh-cert\";\n})(AuthenticationScheme || (AuthenticationScheme = {}));\n/**\r\n * Constants related to throttling\r\n */\nvar ThrottlingConstants = {\n  // Default time to throttle RequestThumbprint in seconds\n  DEFAULT_THROTTLE_TIME_SECONDS: 60,\n  // Default maximum time to throttle in seconds, overrides what the server sends back\n  DEFAULT_MAX_THROTTLE_TIME_SECONDS: 3600,\n  // Prefix for storing throttling entries\n  THROTTLING_PREFIX: \"throttling\",\n  // Value assigned to the x-ms-lib-capability header to indicate to the server the library supports throttling\n  X_MS_LIB_CAPABILITY_VALUE: \"retry-after, h429\"\n};\nvar Errors = {\n  INVALID_GRANT_ERROR: \"invalid_grant\",\n  CLIENT_MISMATCH_ERROR: \"client_mismatch\"\n};\n/**\r\n * Password grant parameters\r\n */\nvar PasswordGrantConstants;\n(function (PasswordGrantConstants) {\n  PasswordGrantConstants[\"username\"] = \"username\";\n  PasswordGrantConstants[\"password\"] = \"password\";\n})(PasswordGrantConstants || (PasswordGrantConstants = {}));\n/**\r\n * Response codes\r\n */\nvar ResponseCodes;\n(function (ResponseCodes) {\n  ResponseCodes[ResponseCodes[\"httpSuccess\"] = 200] = \"httpSuccess\";\n  ResponseCodes[ResponseCodes[\"httpBadRequest\"] = 400] = \"httpBadRequest\";\n})(ResponseCodes || (ResponseCodes = {}));\n/**\r\n * Region Discovery Sources\r\n */\nvar RegionDiscoverySources;\n(function (RegionDiscoverySources) {\n  RegionDiscoverySources[\"FAILED_AUTO_DETECTION\"] = \"1\";\n  RegionDiscoverySources[\"INTERNAL_CACHE\"] = \"2\";\n  RegionDiscoverySources[\"ENVIRONMENT_VARIABLE\"] = \"3\";\n  RegionDiscoverySources[\"IMDS\"] = \"4\";\n})(RegionDiscoverySources || (RegionDiscoverySources = {}));\n/**\r\n * Region Discovery Outcomes\r\n */\nvar RegionDiscoveryOutcomes;\n(function (RegionDiscoveryOutcomes) {\n  RegionDiscoveryOutcomes[\"CONFIGURED_MATCHES_DETECTED\"] = \"1\";\n  RegionDiscoveryOutcomes[\"CONFIGURED_NO_AUTO_DETECTION\"] = \"2\";\n  RegionDiscoveryOutcomes[\"CONFIGURED_NOT_DETECTED\"] = \"3\";\n  RegionDiscoveryOutcomes[\"AUTO_DETECTION_REQUESTED_SUCCESSFUL\"] = \"4\";\n  RegionDiscoveryOutcomes[\"AUTO_DETECTION_REQUESTED_FAILED\"] = \"5\";\n})(RegionDiscoveryOutcomes || (RegionDiscoveryOutcomes = {}));\nvar CacheOutcome;\n(function (CacheOutcome) {\n  CacheOutcome[\"NO_CACHE_HIT\"] = \"0\";\n  CacheOutcome[\"FORCE_REFRESH\"] = \"1\";\n  CacheOutcome[\"NO_CACHED_ACCESS_TOKEN\"] = \"2\";\n  CacheOutcome[\"CACHED_ACCESS_TOKEN_EXPIRED\"] = \"3\";\n  CacheOutcome[\"REFRESH_CACHED_ACCESS_TOKEN\"] = \"4\";\n})(CacheOutcome || (CacheOutcome = {}));\nvar JsonTypes;\n(function (JsonTypes) {\n  JsonTypes[\"Jwt\"] = \"JWT\";\n  JsonTypes[\"Jwk\"] = \"JWK\";\n})(JsonTypes || (JsonTypes = {}));\nvar ONE_DAY_IN_MS = 86400000;\nexport { AADAuthorityConstants, AADServerParamKeys, APP_METADATA, AUTHORITY_METADATA_CONSTANTS, AuthenticationScheme, AuthorityMetadataSource, CLIENT_INFO, CacheAccountType, CacheOutcome, CacheSchemaType, CacheType, ClaimsRequestKeys, CodeChallengeMethodValues, Constants, CredentialType, Errors, GrantType, HeaderNames, JsonTypes, OIDC_DEFAULT_SCOPES, OIDC_SCOPES, ONE_DAY_IN_MS, PasswordGrantConstants, PersistentCacheKeys, PromptValue, RegionDiscoveryOutcomes, RegionDiscoverySources, ResponseCodes, ResponseMode, SERVER_TELEM_CONSTANTS, SSOTypes, Separators, THE_FAMILY_ID, ThrottlingConstants };","map":{"version":3,"mappings":"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","names":["LIBRARY_NAME","SKU","CACHE_PREFIX","DEFAULT_AUTHORITY","DEFAULT_AUTHORITY_HOST","DEFAULT_COMMON_TENANT","ADFS","DSTS","AAD_INSTANCE_DISCOVERY_ENDPT","RESOURCE_DELIM","NO_ACCOUNT","CLAIMS","CONSUMER_UTID","OPENID_SCOPE","PROFILE_SCOPE","OFFLINE_ACCESS_SCOPE","EMAIL_SCOPE","CODE_RESPONSE_TYPE","CODE_GRANT_TYPE","RT_GRANT_TYPE","FRAGMENT_RESPONSE_MODE","S256_CODE_CHALLENGE_METHOD","URL_FORM_CONTENT_TYPE","AUTHORIZATION_PENDING","NOT_DEFINED","EMPTY_STRING","FORWARD_SLASH","IMDS_ENDPOINT","IMDS_VERSION","IMDS_TIMEOUT","AZURE_REGION_AUTO_DISCOVER_FLAG","REGIONAL_AUTH_PUBLIC_CLOUD_SUFFIX","REGIONAL_AUTH_NON_MSI_QUERY_STRING","KNOWN_PUBLIC_CLOUDS","TOKEN_RESPONSE_TYPE","ID_TOKEN_RESPONSE_TYPE","SHR_NONCE_VALIDITY","Constants","OIDC_SCOPES","OIDC_DEFAULT_SCOPES","HeaderNames","PersistentCacheKeys","AADAuthorityConstants","AADServerParamKeys","ClaimsRequestKeys","LOGIN","SELECT_ACCOUNT","CONSENT","NONE","CREATE","NO_SESSION","SSOTypes","PLAIN","S256","ResponseMode","GrantType","CacheAccountType","Separators","CredentialType","CacheSchemaType","CacheType","APP_METADATA","CLIENT_INFO","THE_FAMILY_ID","CACHE_KEY","REFRESH_TIME_SECONDS","AuthorityMetadataSource","SCHEMA_VERSION","MAX_CUR_HEADER_BYTES","MAX_LAST_HEADER_BYTES","MAX_CACHED_ERRORS","CATEGORY_SEPARATOR","VALUE_SEPARATOR","OVERFLOW_TRUE","OVERFLOW_FALSE","UNKNOWN_ERROR","AuthenticationScheme","DEFAULT_THROTTLE_TIME_SECONDS","DEFAULT_MAX_THROTTLE_TIME_SECONDS","THROTTLING_PREFIX","X_MS_LIB_CAPABILITY_VALUE","INVALID_GRANT_ERROR","CLIENT_MISMATCH_ERROR","PasswordGrantConstants","ResponseCodes","RegionDiscoverySources","RegionDiscoveryOutcomes","CacheOutcome","JsonTypes","ONE_DAY_IN_MS"],"sources":["C:\\Azure\\gitauthdemo\\ms-identity-javascript-react-tutorial\\3-Authorization-II\\2-call-api-b2c\\SPA\\node_modules\\@azure\\msal-common\\src\\utils\\Constants.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nexport const Constants = {\n    LIBRARY_NAME: \"MSAL.JS\",\n    SKU: \"msal.js.common\",\n    // Prefix for all library cache entries\n    CACHE_PREFIX: \"msal\",\n    // default authority\n    DEFAULT_AUTHORITY: \"https://login.microsoftonline.com/common/\",\n    DEFAULT_AUTHORITY_HOST: \"login.microsoftonline.com\",\n    DEFAULT_COMMON_TENANT: \"common\",\n    // ADFS String\n    ADFS: \"adfs\",\n    DSTS: \"dstsv2\",\n    // Default AAD Instance Discovery Endpoint\n    AAD_INSTANCE_DISCOVERY_ENDPT: \"https://login.microsoftonline.com/common/discovery/instance?api-version=1.1&authorization_endpoint=\",\n    // Resource delimiter - used for certain cache entries\n    RESOURCE_DELIM: \"|\",\n    // Placeholder for non-existent account ids/objects\n    NO_ACCOUNT: \"NO_ACCOUNT\",\n    // Claims\n    CLAIMS: \"claims\",\n    // Consumer UTID\n    CONSUMER_UTID: \"9188040d-6c67-4c5b-b112-36a304b66dad\",\n    // Default scopes\n    OPENID_SCOPE: \"openid\",\n    PROFILE_SCOPE: \"profile\",\n    OFFLINE_ACCESS_SCOPE: \"offline_access\",\n    EMAIL_SCOPE: \"email\",\n    // Default response type for authorization code flow\n    CODE_RESPONSE_TYPE: \"code\",\n    CODE_GRANT_TYPE: \"authorization_code\",\n    RT_GRANT_TYPE: \"refresh_token\",\n    FRAGMENT_RESPONSE_MODE: \"fragment\",\n    S256_CODE_CHALLENGE_METHOD: \"S256\",\n    URL_FORM_CONTENT_TYPE: \"application/x-www-form-urlencoded;charset=utf-8\",\n    AUTHORIZATION_PENDING: \"authorization_pending\",\n    NOT_DEFINED: \"not_defined\",\n    EMPTY_STRING: \"\",\n    FORWARD_SLASH: \"/\",\n    IMDS_ENDPOINT: \"http://169.254.169.254/metadata/instance/compute/location\",\n    IMDS_VERSION: \"2020-06-01\",\n    IMDS_TIMEOUT: 2000,\n    AZURE_REGION_AUTO_DISCOVER_FLAG: \"TryAutoDetect\",\n    REGIONAL_AUTH_PUBLIC_CLOUD_SUFFIX: \"login.microsoft.com\",\n    REGIONAL_AUTH_NON_MSI_QUERY_STRING: \"allowestsrnonmsi=true\",\n    KNOWN_PUBLIC_CLOUDS: [\"login.microsoftonline.com\", \"login.windows.net\", \"login.microsoft.com\", \"sts.windows.net\"],\n    TOKEN_RESPONSE_TYPE: \"token\",\n    ID_TOKEN_RESPONSE_TYPE: \"id_token\",\n    SHR_NONCE_VALIDITY: 240\n};\n\nexport const OIDC_DEFAULT_SCOPES = [\n    Constants.OPENID_SCOPE,\n    Constants.PROFILE_SCOPE,\n    Constants.OFFLINE_ACCESS_SCOPE\n];\n\nexport const OIDC_SCOPES = [\n    ...OIDC_DEFAULT_SCOPES,\n    Constants.EMAIL_SCOPE\n];\n\n/**\n * Request header names\n */\nexport enum HeaderNames {\n    CONTENT_TYPE = \"Content-Type\",\n    RETRY_AFTER = \"Retry-After\",\n    CCS_HEADER = \"X-AnchorMailbox\",\n    WWWAuthenticate = \"WWW-Authenticate\",\n    AuthenticationInfo = \"Authentication-Info\",\n    X_MS_REQUEST_ID = \"x-ms-request-id\"\n}\n\n/**\n * Persistent cache keys MSAL which stay while user is logged in.\n */\nexport enum PersistentCacheKeys {\n    ID_TOKEN = \"idtoken\",\n    CLIENT_INFO = \"client.info\",\n    ADAL_ID_TOKEN = \"adal.idtoken\",\n    ERROR = \"error\",\n    ERROR_DESC = \"error.description\",\n    ACTIVE_ACCOUNT = \"active-account\", // Legacy active-account cache key, use new key instead\n    ACTIVE_ACCOUNT_FILTERS = \"active-account-filters\" // new cache entry for active_account for a more robust version for browser\n}\n\n/**\n * String constants related to AAD Authority\n */\nexport enum AADAuthorityConstants {\n    COMMON = \"common\",\n    ORGANIZATIONS = \"organizations\",\n    CONSUMERS = \"consumers\"\n}\n\n/**\n * Keys in the hashParams sent by AAD Server\n */\nexport enum AADServerParamKeys {\n    CLIENT_ID = \"client_id\",\n    REDIRECT_URI = \"redirect_uri\",\n    RESPONSE_TYPE = \"response_type\",\n    RESPONSE_MODE = \"response_mode\",\n    GRANT_TYPE = \"grant_type\",\n    CLAIMS = \"claims\",\n    SCOPE = \"scope\",\n    ERROR = \"error\",\n    ERROR_DESCRIPTION = \"error_description\",\n    ACCESS_TOKEN = \"access_token\",\n    ID_TOKEN = \"id_token\",\n    REFRESH_TOKEN = \"refresh_token\",\n    EXPIRES_IN = \"expires_in\",\n    STATE = \"state\",\n    NONCE = \"nonce\",\n    PROMPT = \"prompt\",\n    SESSION_STATE = \"session_state\",\n    CLIENT_INFO = \"client_info\",\n    CODE = \"code\",\n    CODE_CHALLENGE = \"code_challenge\",\n    CODE_CHALLENGE_METHOD = \"code_challenge_method\",\n    CODE_VERIFIER = \"code_verifier\",\n    CLIENT_REQUEST_ID = \"client-request-id\",\n    X_CLIENT_SKU = \"x-client-SKU\",\n    X_CLIENT_VER = \"x-client-VER\",\n    X_CLIENT_OS = \"x-client-OS\",\n    X_CLIENT_CPU = \"x-client-CPU\",\n    X_CLIENT_CURR_TELEM = \"x-client-current-telemetry\",\n    X_CLIENT_LAST_TELEM = \"x-client-last-telemetry\",\n    X_MS_LIB_CAPABILITY = \"x-ms-lib-capability\",\n    X_APP_NAME = \"x-app-name\",\n    X_APP_VER = \"x-app-ver\",\n    POST_LOGOUT_URI = \"post_logout_redirect_uri\",\n    ID_TOKEN_HINT = \"id_token_hint\",\n    DEVICE_CODE = \"device_code\",\n    CLIENT_SECRET = \"client_secret\",\n    CLIENT_ASSERTION = \"client_assertion\",\n    CLIENT_ASSERTION_TYPE = \"client_assertion_type\",\n    TOKEN_TYPE = \"token_type\",\n    REQ_CNF = \"req_cnf\",\n    OBO_ASSERTION = \"assertion\",\n    REQUESTED_TOKEN_USE = \"requested_token_use\",\n    ON_BEHALF_OF = \"on_behalf_of\",\n    FOCI = \"foci\",\n    CCS_HEADER = \"X-AnchorMailbox\",\n    RETURN_SPA_CODE = \"return_spa_code\",\n    NATIVE_BROKER = \"nativebroker\",\n    LOGOUT_HINT = \"logout_hint\"\n}\n\n/**\n * Claims request keys\n */\nexport enum ClaimsRequestKeys {\n    ACCESS_TOKEN = \"access_token\",\n    XMS_CC = \"xms_cc\"\n}\n\n/**\n * we considered making this \"enum\" in the request instead of string, however it looks like the allowed list of\n * prompt values kept changing over past couple of years. There are some undocumented prompt values for some\n * internal partners too, hence the choice of generic \"string\" type instead of the \"enum\"\n */\nexport const PromptValue = {\n    LOGIN: \"login\",\n    SELECT_ACCOUNT: \"select_account\",\n    CONSENT: \"consent\",\n    NONE: \"none\",\n    CREATE: \"create\",\n    NO_SESSION: \"no_session\"\n};\n\n/**\n * SSO Types - generated to populate hints\n */\nexport enum SSOTypes {\n    ACCOUNT = \"account\",\n    SID = \"sid\",\n    LOGIN_HINT = \"login_hint\",\n    ID_TOKEN = \"id_token\",\n    DOMAIN_HINT = \"domain_hint\",\n    ORGANIZATIONS = \"organizations\",\n    CONSUMERS = \"consumers\",\n    ACCOUNT_ID = \"accountIdentifier\",\n    HOMEACCOUNT_ID = \"homeAccountIdentifier\"\n}\n\n/**\n * Disallowed extra query parameters.\n */\nexport const BlacklistedEQParams = [\n    SSOTypes.SID,\n    SSOTypes.LOGIN_HINT\n];\n\n/**\n * allowed values for codeVerifier\n */\nexport const CodeChallengeMethodValues = {\n    PLAIN: \"plain\",\n    S256: \"S256\"\n};\n\n/**\n * The method used to encode the code verifier for the code challenge parameter. can be one\n * of plain or s256. if excluded, code challenge is assumed to be plaintext. for more\n * information, see the pkce rcf: https://tools.ietf.org/html/rfc7636\n */\nexport const CodeChallengeMethodValuesArray: string[] = [\n    CodeChallengeMethodValues.PLAIN,\n    CodeChallengeMethodValues.S256\n];\n\n/**\n * allowed values for response_mode\n */\nexport enum ResponseMode {\n    QUERY = \"query\",\n    FRAGMENT = \"fragment\",\n    FORM_POST = \"form_post\"\n}\n\n/**\n * allowed grant_type\n */\nexport enum GrantType {\n    IMPLICIT_GRANT = \"implicit\",\n    AUTHORIZATION_CODE_GRANT = \"authorization_code\",\n    CLIENT_CREDENTIALS_GRANT = \"client_credentials\",\n    RESOURCE_OWNER_PASSWORD_GRANT = \"password\",\n    REFRESH_TOKEN_GRANT = \"refresh_token\",\n    DEVICE_CODE_GRANT = \"device_code\",\n    JWT_BEARER = \"urn:ietf:params:oauth:grant-type:jwt-bearer\"\n}\n\n/**\n * Account types in Cache\n */\nexport enum CacheAccountType {\n    MSSTS_ACCOUNT_TYPE = \"MSSTS\",\n    ADFS_ACCOUNT_TYPE = \"ADFS\",\n    MSAV1_ACCOUNT_TYPE = \"MSA\",\n    GENERIC_ACCOUNT_TYPE = \"Generic\" // NTLM, Kerberos, FBA, Basic etc\n}\n\n/**\n * Separators used in cache\n */\nexport enum Separators {\n    CACHE_KEY_SEPARATOR = \"-\",\n    CLIENT_INFO_SEPARATOR = \".\"\n}\n\n/**\n * Credential Type stored in the cache\n */\nexport enum CredentialType {\n    ID_TOKEN = \"IdToken\",\n    ACCESS_TOKEN = \"AccessToken\",\n    ACCESS_TOKEN_WITH_AUTH_SCHEME = \"AccessToken_With_AuthScheme\",\n    REFRESH_TOKEN = \"RefreshToken\",\n}\n\n/**\n * Credential Type stored in the cache\n */\nexport enum CacheSchemaType {\n    ACCOUNT = \"Account\",\n    CREDENTIAL = \"Credential\",\n    ID_TOKEN = \"IdToken\",\n    ACCESS_TOKEN = \"AccessToken\",\n    REFRESH_TOKEN = \"RefreshToken\",\n    APP_METADATA = \"AppMetadata\",\n    TEMPORARY = \"TempCache\",\n    TELEMETRY = \"Telemetry\",\n    UNDEFINED = \"Undefined\",\n    THROTTLING = \"Throttling\"\n}\n\n/**\n * Combine all cache types\n */\nexport enum CacheType {\n    ADFS = 1001,\n    MSA = 1002,\n    MSSTS = 1003,\n    GENERIC = 1004,\n    ACCESS_TOKEN = 2001,\n    REFRESH_TOKEN = 2002,\n    ID_TOKEN = 2003,\n    APP_METADATA = 3001,\n    UNDEFINED = 9999\n}\n\n/**\n * More Cache related constants\n */\nexport const APP_METADATA = \"appmetadata\";\nexport const CLIENT_INFO = \"client_info\";\nexport const THE_FAMILY_ID = \"1\";\n\nexport const AUTHORITY_METADATA_CONSTANTS = {\n    CACHE_KEY: \"authority-metadata\",\n    REFRESH_TIME_SECONDS: 3600 * 24 // 24 Hours\n};\n\nexport enum AuthorityMetadataSource {\n    CONFIG = \"config\",\n    CACHE = \"cache\",\n    NETWORK = \"network\",\n    HARDCODED_VALUES= \"hardcoded_values\",\n}\n\nexport const SERVER_TELEM_CONSTANTS = {\n    SCHEMA_VERSION: 5,\n    MAX_CUR_HEADER_BYTES: 80, // ESTS limit is 100B, set to 80 to provide a 20B buffer\n    MAX_LAST_HEADER_BYTES: 330, // ESTS limit is 350B, set to 330 to provide a 20B buffer,\n    MAX_CACHED_ERRORS: 50, // Limit the number of errors that can be stored to prevent uncontrolled size gains\n    CACHE_KEY: \"server-telemetry\",\n    CATEGORY_SEPARATOR: \"|\",\n    VALUE_SEPARATOR: \",\",\n    OVERFLOW_TRUE: \"1\",\n    OVERFLOW_FALSE: \"0\",\n    UNKNOWN_ERROR: \"unknown_error\"\n};\n\n/**\n * Type of the authentication request\n */\nexport enum AuthenticationScheme {\n    BEARER = \"Bearer\",\n    POP = \"pop\",\n    SSH = \"ssh-cert\"\n}\n\n/**\n * Constants related to throttling\n */\nexport const ThrottlingConstants = {\n    // Default time to throttle RequestThumbprint in seconds\n    DEFAULT_THROTTLE_TIME_SECONDS: 60,\n    // Default maximum time to throttle in seconds, overrides what the server sends back\n    DEFAULT_MAX_THROTTLE_TIME_SECONDS: 3600,\n    // Prefix for storing throttling entries\n    THROTTLING_PREFIX: \"throttling\",\n    // Value assigned to the x-ms-lib-capability header to indicate to the server the library supports throttling\n    X_MS_LIB_CAPABILITY_VALUE: \"retry-after, h429\"\n};\n\nexport const Errors = {\n    INVALID_GRANT_ERROR: \"invalid_grant\",\n    CLIENT_MISMATCH_ERROR: \"client_mismatch\",\n};\n\n/**\n * Password grant parameters\n */\nexport enum PasswordGrantConstants {\n    username = \"username\",\n    password = \"password\"\n}\n\n/**\n * Response codes\n */\nexport enum  ResponseCodes {\n    httpSuccess = 200,\n    httpBadRequest = 400\n}\n\n/**\n * Region Discovery Sources\n */\nexport enum RegionDiscoverySources {\n    FAILED_AUTO_DETECTION = \"1\",\n    INTERNAL_CACHE = \"2\",\n    ENVIRONMENT_VARIABLE = \"3\",\n    IMDS = \"4\",\n}\n\n/**\n * Region Discovery Outcomes\n */\nexport enum RegionDiscoveryOutcomes {\n    CONFIGURED_MATCHES_DETECTED = \"1\",\n    CONFIGURED_NO_AUTO_DETECTION = \"2\",\n    CONFIGURED_NOT_DETECTED = \"3\",\n    AUTO_DETECTION_REQUESTED_SUCCESSFUL = \"4\",\n    AUTO_DETECTION_REQUESTED_FAILED = \"5\"\n}\n\nexport enum CacheOutcome {\n    NO_CACHE_HIT = \"0\",\n    FORCE_REFRESH = \"1\",\n    NO_CACHED_ACCESS_TOKEN = \"2\",\n    CACHED_ACCESS_TOKEN_EXPIRED = \"3\",\n    REFRESH_CACHED_ACCESS_TOKEN = \"4\"\n}\n\nexport enum JsonTypes {\n    Jwt = \"JWT\",\n    Jwk = \"JWK\"\n}\n\nexport const ONE_DAY_IN_MS = 86400000;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}