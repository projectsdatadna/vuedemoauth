{"ast":null,"code":"/*! @azure/msal-browser v2.31.0 2022-11-07 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { PerformanceEvents, JoseHeader } from '@azure/msal-common';\nimport { GuidGenerator } from './GuidGenerator.js';\nimport { Base64Encode } from '../encode/Base64Encode.js';\nimport { Base64Decode } from '../encode/Base64Decode.js';\nimport { PkceGenerator } from './PkceGenerator.js';\nimport { BrowserCrypto } from './BrowserCrypto.js';\nimport { BrowserStringUtils } from '../utils/BrowserStringUtils.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { CryptoKeyStore } from '../cache/CryptoKeyStore.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * This class implements MSAL's crypto interface, which allows it to perform base64 encoding and decoding, generating cryptographically random GUIDs and\r\n * implementing Proof Key for Code Exchange specs for the OAuth Authorization Code Flow using PKCE (rfc here: https://tools.ietf.org/html/rfc7636).\r\n */\nvar CryptoOps = /** @class */function () {\n  function CryptoOps(logger, performanceClient, cryptoConfig) {\n    this.logger = logger;\n    // Browser crypto needs to be validated first before any other classes can be set.\n    this.browserCrypto = new BrowserCrypto(this.logger, cryptoConfig);\n    this.b64Encode = new Base64Encode();\n    this.b64Decode = new Base64Decode();\n    this.guidGenerator = new GuidGenerator(this.browserCrypto);\n    this.pkceGenerator = new PkceGenerator(this.browserCrypto);\n    this.cache = new CryptoKeyStore(this.logger);\n    this.performanceClient = performanceClient;\n  }\n  /**\r\n   * Creates a new random GUID - used to populate state and nonce.\r\n   * @returns string (GUID)\r\n   */\n  CryptoOps.prototype.createNewGuid = function () {\n    return this.guidGenerator.generateGuid();\n  };\n  /**\r\n   * Encodes input string to base64.\r\n   * @param input\r\n   */\n  CryptoOps.prototype.base64Encode = function (input) {\n    return this.b64Encode.encode(input);\n  };\n  /**\r\n   * Decodes input string from base64.\r\n   * @param input\r\n   */\n  CryptoOps.prototype.base64Decode = function (input) {\n    return this.b64Decode.decode(input);\n  };\n  /**\r\n   * Generates PKCE codes used in Authorization Code Flow.\r\n   */\n  CryptoOps.prototype.generatePkceCodes = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, this.pkceGenerator.generateCodes()];\n      });\n    });\n  };\n  /**\r\n   * Generates a keypair, stores it and returns a thumbprint\r\n   * @param request\r\n   */\n  CryptoOps.prototype.getPublicKeyThumbprint = function (request) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function () {\n      var publicKeyThumbMeasurement, keyPair, publicKeyJwk, pubKeyThumprintObj, publicJwkString, publicJwkHash, privateKeyJwk, unextractablePrivateKey;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            publicKeyThumbMeasurement = (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.startMeasurement(PerformanceEvents.CryptoOptsGetPublicKeyThumbprint, request.correlationId);\n            return [4 /*yield*/, this.browserCrypto.generateKeyPair(CryptoOps.EXTRACTABLE, CryptoOps.POP_KEY_USAGES)];\n          case 1:\n            keyPair = _b.sent();\n            return [4 /*yield*/, this.browserCrypto.exportJwk(keyPair.publicKey)];\n          case 2:\n            publicKeyJwk = _b.sent();\n            pubKeyThumprintObj = {\n              e: publicKeyJwk.e,\n              kty: publicKeyJwk.kty,\n              n: publicKeyJwk.n\n            };\n            publicJwkString = BrowserStringUtils.getSortedObjectString(pubKeyThumprintObj);\n            return [4 /*yield*/, this.hashString(publicJwkString)];\n          case 3:\n            publicJwkHash = _b.sent();\n            return [4 /*yield*/, this.browserCrypto.exportJwk(keyPair.privateKey)];\n          case 4:\n            privateKeyJwk = _b.sent();\n            return [4 /*yield*/, this.browserCrypto.importJwk(privateKeyJwk, false, [\"sign\"])];\n          case 5:\n            unextractablePrivateKey = _b.sent();\n            // Store Keypair data in keystore\n            return [4 /*yield*/, this.cache.asymmetricKeys.setItem(publicJwkHash, {\n              privateKey: unextractablePrivateKey,\n              publicKey: keyPair.publicKey,\n              requestMethod: request.resourceRequestMethod,\n              requestUri: request.resourceRequestUri\n            })];\n          case 6:\n            // Store Keypair data in keystore\n            _b.sent();\n            if (publicKeyThumbMeasurement) {\n              publicKeyThumbMeasurement.endMeasurement({\n                success: true\n              });\n            }\n            return [2 /*return*/, publicJwkHash];\n        }\n      });\n    });\n  };\n  /**\r\n   * Removes cryptographic keypair from key store matching the keyId passed in\r\n   * @param kid\r\n   */\n  CryptoOps.prototype.removeTokenBindingKey = function (kid) {\n    return __awaiter(this, void 0, void 0, function () {\n      var keyFound;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.cache.asymmetricKeys.removeItem(kid)];\n          case 1:\n            _a.sent();\n            return [4 /*yield*/, this.cache.asymmetricKeys.containsKey(kid)];\n          case 2:\n            keyFound = _a.sent();\n            return [2 /*return*/, !keyFound];\n        }\n      });\n    });\n  };\n  /**\r\n   * Removes all cryptographic keys from IndexedDB storage\r\n   */\n  CryptoOps.prototype.clearKeystore = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.cache.clear()];\n          case 1:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  /**\r\n   * Signs the given object as a jwt payload with private key retrieved by given kid.\r\n   * @param payload\r\n   * @param kid\r\n   */\n  CryptoOps.prototype.signJwt = function (payload, kid, correlationId) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function () {\n      var signJwtMeasurement, cachedKeyPair, publicKeyJwk, publicKeyJwkString, encodedKeyIdThumbprint, shrHeader, encodedShrHeader, encodedPayload, tokenString, tokenBuffer, signatureBuffer, encodedSignature, signedJwt;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            signJwtMeasurement = (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.startMeasurement(PerformanceEvents.CryptoOptsSignJwt, correlationId);\n            return [4 /*yield*/, this.cache.asymmetricKeys.getItem(kid)];\n          case 1:\n            cachedKeyPair = _b.sent();\n            if (!cachedKeyPair) {\n              throw BrowserAuthError.createSigningKeyNotFoundInStorageError(kid);\n            }\n            return [4 /*yield*/, this.browserCrypto.exportJwk(cachedKeyPair.publicKey)];\n          case 2:\n            publicKeyJwk = _b.sent();\n            publicKeyJwkString = BrowserStringUtils.getSortedObjectString(publicKeyJwk);\n            encodedKeyIdThumbprint = this.b64Encode.urlEncode(JSON.stringify({\n              kid: kid\n            }));\n            shrHeader = JoseHeader.getShrHeaderString({\n              kid: encodedKeyIdThumbprint,\n              alg: publicKeyJwk.alg\n            });\n            encodedShrHeader = this.b64Encode.urlEncode(shrHeader);\n            // Generate payload\n            payload.cnf = {\n              jwk: JSON.parse(publicKeyJwkString)\n            };\n            encodedPayload = this.b64Encode.urlEncode(JSON.stringify(payload));\n            tokenString = encodedShrHeader + \".\" + encodedPayload;\n            tokenBuffer = BrowserStringUtils.stringToArrayBuffer(tokenString);\n            return [4 /*yield*/, this.browserCrypto.sign(cachedKeyPair.privateKey, tokenBuffer)];\n          case 3:\n            signatureBuffer = _b.sent();\n            encodedSignature = this.b64Encode.urlEncodeArr(new Uint8Array(signatureBuffer));\n            signedJwt = tokenString + \".\" + encodedSignature;\n            if (signJwtMeasurement) {\n              signJwtMeasurement.endMeasurement({\n                success: true\n              });\n            }\n            return [2 /*return*/, signedJwt];\n        }\n      });\n    });\n  };\n  /**\r\n   * Returns the SHA-256 hash of an input string\r\n   * @param plainText\r\n   */\n  CryptoOps.prototype.hashString = function (plainText) {\n    return __awaiter(this, void 0, void 0, function () {\n      var hashBuffer, hashBytes;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.browserCrypto.sha256Digest(plainText)];\n          case 1:\n            hashBuffer = _a.sent();\n            hashBytes = new Uint8Array(hashBuffer);\n            return [2 /*return*/, this.b64Encode.urlEncodeArr(hashBytes)];\n        }\n      });\n    });\n  };\n  CryptoOps.POP_KEY_USAGES = [\"sign\", \"verify\"];\n  CryptoOps.EXTRACTABLE = true;\n  return CryptoOps;\n}();\nexport { CryptoOps };","map":{"version":3,"mappings":"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","names":["logger","performanceClient","cryptoConfig","browserCrypto","BrowserCrypto","b64Encode","Base64Encode","b64Decode","Base64Decode","guidGenerator","GuidGenerator","pkceGenerator","PkceGenerator","cache","CryptoKeyStore","CryptoOps","generateGuid","input","encode","decode","generateCodes","request","publicKeyThumbMeasurement","startMeasurement","PerformanceEvents","CryptoOptsGetPublicKeyThumbprint","correlationId","generateKeyPair","EXTRACTABLE","POP_KEY_USAGES","keyPair","_b","exportJwk","publicKey","publicKeyJwk","pubKeyThumprintObj","e","kty","n","publicJwkString","BrowserStringUtils","getSortedObjectString","hashString","publicJwkHash","privateKey","privateKeyJwk","importJwk","unextractablePrivateKey","asymmetricKeys","setItem","requestMethod","resourceRequestMethod","requestUri","resourceRequestUri","endMeasurement","success","kid","removeItem","_a","containsKey","keyFound","clear","payload","signJwtMeasurement","CryptoOptsSignJwt","getItem","cachedKeyPair","BrowserAuthError","createSigningKeyNotFoundInStorageError","publicKeyJwkString","encodedKeyIdThumbprint","urlEncode","JSON","stringify","shrHeader","JoseHeader","getShrHeaderString","alg","encodedShrHeader","cnf","jwk","parse","encodedPayload","tokenString","tokenBuffer","stringToArrayBuffer","sign","signatureBuffer","encodedSignature","urlEncodeArr","Uint8Array","signedJwt","plainText","sha256Digest","hashBuffer","hashBytes"],"sources":["C:\\Azure\\gitauthdemo\\ms-identity-javascript-react-tutorial\\3-Authorization-II\\2-call-api-b2c\\SPA\\node_modules\\@azure\\msal-browser\\src\\crypto\\CryptoOps.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ICrypto, IPerformanceClient, JoseHeader, Logger, PerformanceEvents, PkceCodes, SignedHttpRequest, SignedHttpRequestParameters } from \"@azure/msal-common\";\nimport { GuidGenerator } from \"./GuidGenerator\";\nimport { Base64Encode } from \"../encode/Base64Encode\";\nimport { Base64Decode } from \"../encode/Base64Decode\";\nimport { PkceGenerator } from \"./PkceGenerator\";\nimport { BrowserCrypto } from \"./BrowserCrypto\";\nimport { BrowserStringUtils } from \"../utils/BrowserStringUtils\";\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\nimport { CryptoKeyStore } from \"../cache/CryptoKeyStore\";\nimport { CryptoOptions } from \"../config/Configuration\";\n\nexport type CachedKeyPair = {\n    publicKey: CryptoKey,\n    privateKey: CryptoKey,\n    requestMethod?: string,\n    requestUri?: string\n};\n\n/**\n * This class implements MSAL's crypto interface, which allows it to perform base64 encoding and decoding, generating cryptographically random GUIDs and \n * implementing Proof Key for Code Exchange specs for the OAuth Authorization Code Flow using PKCE (rfc here: https://tools.ietf.org/html/rfc7636).\n */\nexport class CryptoOps implements ICrypto {\n\n    private browserCrypto: BrowserCrypto;\n    private guidGenerator: GuidGenerator;\n    private b64Encode: Base64Encode;\n    private b64Decode: Base64Decode;\n    private pkceGenerator: PkceGenerator;\n    private logger: Logger;\n\n    /**\n     * CryptoOps can be used in contexts outside a PCA instance,\n     * meaning there won't be a performance manager available.\n     */\n    private performanceClient: IPerformanceClient | undefined;\n\n    private static POP_KEY_USAGES: Array<KeyUsage> = [\"sign\", \"verify\"];\n    private static EXTRACTABLE: boolean = true;\n    private cache: CryptoKeyStore;\n\n    constructor(logger: Logger, performanceClient?: IPerformanceClient, cryptoConfig?: CryptoOptions) {\n        this.logger = logger;\n        // Browser crypto needs to be validated first before any other classes can be set.\n        this.browserCrypto = new BrowserCrypto(this.logger, cryptoConfig);\n        this.b64Encode = new Base64Encode();\n        this.b64Decode = new Base64Decode();\n        this.guidGenerator = new GuidGenerator(this.browserCrypto);\n        this.pkceGenerator = new PkceGenerator(this.browserCrypto);\n        this.cache = new CryptoKeyStore(this.logger);\n        this.performanceClient = performanceClient;\n    }\n\n    /**\n     * Creates a new random GUID - used to populate state and nonce.\n     * @returns string (GUID)\n     */\n    createNewGuid(): string {\n        return this.guidGenerator.generateGuid();\n    }\n\n    /**\n     * Encodes input string to base64.\n     * @param input \n     */\n    base64Encode(input: string): string {\n        return this.b64Encode.encode(input);\n    }    \n    \n    /**\n     * Decodes input string from base64.\n     * @param input \n     */\n    base64Decode(input: string): string {\n        return this.b64Decode.decode(input);\n    }\n\n    /**\n     * Generates PKCE codes used in Authorization Code Flow.\n     */\n    async generatePkceCodes(): Promise<PkceCodes> {\n        return this.pkceGenerator.generateCodes();\n    }\n\n    /**\n     * Generates a keypair, stores it and returns a thumbprint\n     * @param request\n     */\n    async getPublicKeyThumbprint(request: SignedHttpRequestParameters): Promise<string> {\n        const publicKeyThumbMeasurement = this.performanceClient?.startMeasurement(PerformanceEvents.CryptoOptsGetPublicKeyThumbprint, request.correlationId);\n\n        // Generate Keypair\n        const keyPair: CryptoKeyPair = await this.browserCrypto.generateKeyPair(CryptoOps.EXTRACTABLE, CryptoOps.POP_KEY_USAGES);\n\n        // Generate Thumbprint for Public Key\n        const publicKeyJwk: JsonWebKey = await this.browserCrypto.exportJwk(keyPair.publicKey);\n        \n        const pubKeyThumprintObj: JsonWebKey = {\n            e: publicKeyJwk.e,\n            kty: publicKeyJwk.kty,\n            n: publicKeyJwk.n\n        };\n        \n        const publicJwkString: string = BrowserStringUtils.getSortedObjectString(pubKeyThumprintObj);\n        const publicJwkHash = await this.hashString(publicJwkString);\n\n        // Generate Thumbprint for Private Key\n        const privateKeyJwk: JsonWebKey = await this.browserCrypto.exportJwk(keyPair.privateKey);\n        // Re-import private key to make it unextractable\n        const unextractablePrivateKey: CryptoKey = await this.browserCrypto.importJwk(privateKeyJwk, false, [\"sign\"]);\n\n        // Store Keypair data in keystore\n        await this.cache.asymmetricKeys.setItem(\n            publicJwkHash, \n            {\n                privateKey: unextractablePrivateKey,\n                publicKey: keyPair.publicKey,\n                requestMethod: request.resourceRequestMethod,\n                requestUri: request.resourceRequestUri\n            }\n        );\n\n        if (publicKeyThumbMeasurement) {\n            publicKeyThumbMeasurement.endMeasurement({\n                success: true\n            });\n        }\n\n        return publicJwkHash;\n    }\n\n    /**\n     * Removes cryptographic keypair from key store matching the keyId passed in\n     * @param kid \n     */\n    async removeTokenBindingKey(kid: string): Promise<boolean> {\n        await this.cache.asymmetricKeys.removeItem(kid);\n        const keyFound = await this.cache.asymmetricKeys.containsKey(kid);\n        return !keyFound;\n    }\n\n    /**\n     * Removes all cryptographic keys from IndexedDB storage\n     */\n    async clearKeystore(): Promise<boolean> {\n        return await this.cache.clear();\n    }\n\n    /**\n     * Signs the given object as a jwt payload with private key retrieved by given kid.\n     * @param payload \n     * @param kid \n     */\n    async signJwt(payload: SignedHttpRequest, kid: string, correlationId?: string): Promise<string> {\n        const signJwtMeasurement = this.performanceClient?.startMeasurement(PerformanceEvents.CryptoOptsSignJwt, correlationId);\n        const cachedKeyPair = await this.cache.asymmetricKeys.getItem(kid);\n        \n        if (!cachedKeyPair) {\n            throw BrowserAuthError.createSigningKeyNotFoundInStorageError(kid);\n        }\n\n        // Get public key as JWK\n        const publicKeyJwk = await this.browserCrypto.exportJwk(cachedKeyPair.publicKey);\n        const publicKeyJwkString = BrowserStringUtils.getSortedObjectString(publicKeyJwk);\n\n        // Base64URL encode public key thumbprint with keyId only: BASE64URL({ kid: \"FULL_PUBLIC_KEY_HASH\" })\n        const encodedKeyIdThumbprint = this.b64Encode.urlEncode(JSON.stringify({ kid: kid }));\n        \n        // Generate header\n        const shrHeader = JoseHeader.getShrHeaderString({ kid: encodedKeyIdThumbprint, alg: publicKeyJwk.alg });\n        const encodedShrHeader = this.b64Encode.urlEncode(shrHeader);\n\n        // Generate payload\n        payload.cnf = {\n            jwk: JSON.parse(publicKeyJwkString)\n        };\n        const encodedPayload = this.b64Encode.urlEncode(JSON.stringify(payload));\n\n        // Form token string\n        const tokenString = `${encodedShrHeader}.${encodedPayload}`;\n\n        // Sign token\n        const tokenBuffer = BrowserStringUtils.stringToArrayBuffer(tokenString);\n        const signatureBuffer = await this.browserCrypto.sign(cachedKeyPair.privateKey, tokenBuffer);\n        const encodedSignature = this.b64Encode.urlEncodeArr(new Uint8Array(signatureBuffer));\n\n        const signedJwt = `${tokenString}.${encodedSignature}`;\n\n        if (signJwtMeasurement) {\n            signJwtMeasurement.endMeasurement({\n                success: true\n            });\n        }\n\n        return signedJwt;\n    }\n\n    /**\n     * Returns the SHA-256 hash of an input string\n     * @param plainText\n     */\n    async hashString(plainText: string): Promise<string> {\n        const hashBuffer: ArrayBuffer = await this.browserCrypto.sha256Digest(plainText);\n        const hashBytes = new Uint8Array(hashBuffer);\n        return this.b64Encode.urlEncodeArr(hashBytes);\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}