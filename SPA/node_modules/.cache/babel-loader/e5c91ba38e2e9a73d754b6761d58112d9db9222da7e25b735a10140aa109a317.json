{"ast":null,"code":"/*! @azure/msal-common v8.0.0 2022-11-07 */\n'use strict';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Utility class which exposes functions for managing date and time operations.\r\n */\nvar TimeUtils = /** @class */function () {\n  function TimeUtils() {}\n  /**\r\n   * return the current time in Unix time (seconds).\r\n   */\n  TimeUtils.nowSeconds = function () {\n    // Date.getTime() returns in milliseconds.\n    return Math.round(new Date().getTime() / 1000.0);\n  };\n  /**\r\n   * check if a token is expired based on given UTC time in seconds.\r\n   * @param expiresOn\r\n   */\n  TimeUtils.isTokenExpired = function (expiresOn, offset) {\n    // check for access token expiry\n    var expirationSec = Number(expiresOn) || 0;\n    var offsetCurrentTimeSec = TimeUtils.nowSeconds() + offset;\n    // If current time + offset is greater than token expiration time, then token is expired.\n    return offsetCurrentTimeSec > expirationSec;\n  };\n  /**\r\n   * If the current time is earlier than the time that a token was cached at, we must discard the token\r\n   * i.e. The system clock was turned back after acquiring the cached token\r\n   * @param cachedAt\r\n   * @param offset\r\n   */\n  TimeUtils.wasClockTurnedBack = function (cachedAt) {\n    var cachedAtSec = Number(cachedAt);\n    return cachedAtSec > TimeUtils.nowSeconds();\n  };\n  /**\r\n   * Waits for t number of milliseconds\r\n   * @param t number\r\n   * @param value T\r\n   */\n  TimeUtils.delay = function (t, value) {\n    return new Promise(function (resolve) {\n      return setTimeout(function () {\n        return resolve(value);\n      }, t);\n    });\n  };\n  return TimeUtils;\n}();\nexport { TimeUtils };","map":{"version":3,"mappings":";;;AAAA;;;AAGG;AAEH;;AAEG;AACH;EAAA;EAEI;;AAEG;EACIA,oBAAU,GAAjB;;IAEI,OAAOC,IAAI,CAACC,KAAK,CAAC,IAAIC,IAAI,EAAE,CAACC,OAAO,EAAE,GAAG,MAAM,CAAC;GACnD;EAED;;;AAGG;EACIJ,wBAAc,GAArB,UAAsBK,SAAiB,EAAEC,MAAc;;IAEnD,IAAMC,aAAa,GAAGC,MAAM,CAACH,SAAS,CAAC,IAAI,CAAC;IAC5C,IAAMI,oBAAoB,GAAGT,SAAS,CAACU,UAAU,EAAE,GAAGJ,MAAM;;IAG5D,OAAQG,oBAAoB,GAAGF,aAAa;GAC/C;EAED;;;;;AAKG;EACIP,SAAkB,sBAAzB,UAA0BW,QAAgB;IACtC,IAAMC,WAAW,GAAGJ,MAAM,CAACG,QAAQ,CAAC;IAEpC,OAAOC,WAAW,GAAGZ,SAAS,CAACU,UAAU,EAAE;GAC9C;EAED;;;;AAIG;EACIV,eAAK,GAAZ,UAAgBa,CAAS,EAAEC,KAAS;IAChC,OAAO,IAAIC,OAAO,CAAC,UAACC,OAAO,EAAK;MAAA,iBAAU,CAAC,YAAM;QAAA,cAAO,CAACF,KAAK,CAAC;MAAA,GAAED,CAAC,CAAC;IAAA,EAAC;GACvE;EACL,OAACb;AAAD,CAAC","names":["TimeUtils","Math","round","Date","getTime","expiresOn","offset","expirationSec","Number","offsetCurrentTimeSec","nowSeconds","cachedAt","cachedAtSec","t","value","Promise","resolve"],"sources":["C:\\Azure\\gitauthdemo\\ms-identity-javascript-react-tutorial\\3-Authorization-II\\2-call-api-b2c\\SPA\\node_modules\\@azure\\msal-common\\src\\utils\\TimeUtils.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\n/**\n * Utility class which exposes functions for managing date and time operations.\n */\nexport class TimeUtils {\n\n    /**\n     * return the current time in Unix time (seconds).\n     */\n    static nowSeconds(): number {\n        // Date.getTime() returns in milliseconds.\n        return Math.round(new Date().getTime() / 1000.0);\n    }\n    \n    /**\n     * check if a token is expired based on given UTC time in seconds.\n     * @param expiresOn\n     */\n    static isTokenExpired(expiresOn: string, offset: number): boolean {\n        // check for access token expiry\n        const expirationSec = Number(expiresOn) || 0;\n        const offsetCurrentTimeSec = TimeUtils.nowSeconds() + offset;\n\n        // If current time + offset is greater than token expiration time, then token is expired.\n        return (offsetCurrentTimeSec > expirationSec);\n    }\n\n    /**\n     * If the current time is earlier than the time that a token was cached at, we must discard the token\n     * i.e. The system clock was turned back after acquiring the cached token\n     * @param cachedAt \n     * @param offset \n     */\n    static wasClockTurnedBack(cachedAt: string): boolean {\n        const cachedAtSec = Number(cachedAt);\n\n        return cachedAtSec > TimeUtils.nowSeconds();\n    }\n\n    /**\n     * Waits for t number of milliseconds\n     * @param t number\n     * @param value T\n     */\n    static delay<T>(t: number, value?: T): Promise<T | void> {\n        return new Promise((resolve) => setTimeout(() => resolve(value), t));\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}