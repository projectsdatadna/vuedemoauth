{"ast":null,"code":"var _jsxFileName = \"C:\\\\Azure\\\\gitauthdemo\\\\ms-identity-javascript-react-tutorial\\\\3-Authorization-II\\\\2-call-api-b2c\\\\SPA\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect } from 'react';\nimport { Routes, Route } from \"react-router-dom\";\nimport { MsalProvider, useMsal } from '@azure/msal-react';\nimport { EventType } from '@azure/msal-browser';\nimport { PageLayout } from './components/PageLayout';\nimport { TodoList } from './pages/TodoList';\nimport { Home } from './pages/Home';\nimport { b2cPolicies, protectedResources } from './authConfig';\nimport { compareIssuingPolicy } from './utils/claimUtils';\nimport './styles/App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Pages = () => {\n  _s();\n  /**\r\n   * useMsal is hook that returns the PublicClientApplication instance,\r\n   * an array of all accounts currently signed in and an inProgress value\r\n   * that tells you what msal is currently doing. For more, visit:\r\n   * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/hooks.md\r\n   */\n  const {\n    instance\n  } = useMsal();\n  useEffect(() => {\n    const callbackId = instance.addEventCallback(event => {\n      if ((event.eventType === EventType.LOGIN_SUCCESS || event.eventType === EventType.ACQUIRE_TOKEN_SUCCESS) && event.payload.account) {\n        /**\r\n         * For the purpose of setting an active account for UI update, we want to consider only the auth\r\n         * response resulting from SUSI flow. \"tfp\" claim in the id token tells us the policy (NOTE: legacy\r\n         * policies may use \"acr\" instead of \"tfp\"). To learn more about B2C tokens, visit:\r\n         * https://docs.microsoft.com/en-us/azure/active-directory-b2c/tokens-overview\r\n         */\n        if (compareIssuingPolicy(event.payload.idTokenClaims, b2cPolicies.names.editProfile)) {\n          // retrieve the account from initial sing-in to the app\n          const originalSignInAccount = instance.getAllAccounts().find(account => account.idTokenClaims.oid === event.payload.idTokenClaims.oid && account.idTokenClaims.sub === event.payload.idTokenClaims.sub && compareIssuingPolicy(account.idTokenClaims, b2cPolicies.names.signUpSignIn));\n          let signUpSignInFlowRequest = {\n            authority: b2cPolicies.authorities.signUpSignIn.authority,\n            account: originalSignInAccount\n          };\n\n          // silently login again with the signUpSignIn policy\n          instance.ssoSilent(signUpSignInFlowRequest);\n        }\n\n        /**\r\n         * Below we are checking if the user is returning from the reset password flow.\r\n         * If so, we will ask the user to reauthenticate with their new password.\r\n         * If you do not want this behavior and prefer your users to stay signed in instead,\r\n         * you can replace the code below with the same pattern used for handling the return from\r\n         * profile edit flow\r\n         */\n        if (compareIssuingPolicy(event.payload.idTokenClaims, b2cPolicies.names.forgotPassword)) {\n          let signUpSignInFlowRequest = {\n            authority: b2cPolicies.authorities.signUpSignIn.authority,\n            scopes: [...protectedResources.apiTodoList.scopes.read, ...protectedResources.apiTodoList.scopes.write]\n          };\n          instance.loginRedirect(signUpSignInFlowRequest);\n        }\n      }\n      if (event.eventType === EventType.LOGIN_FAILURE) {\n        // Check for forgot password error\n        // Learn more about AAD error codes at https://docs.microsoft.com/en-us/azure/active-directory/develop/reference-aadsts-error-codes\n        if (event.error && event.error.errorMessage.includes('AADB2C90118')) {\n          const resetPasswordRequest = {\n            authority: b2cPolicies.authorities.forgotPassword.authority,\n            scopes: []\n          };\n          instance.loginRedirect(resetPasswordRequest);\n        }\n      }\n    });\n    return () => {\n      if (callbackId) {\n        instance.removeEventCallback(callbackId);\n      }\n    };\n    // eslint-disable-next-line\n  }, [instance]);\n  return /*#__PURE__*/_jsxDEV(Routes, {\n    children: [/*#__PURE__*/_jsxDEV(Route, {\n      path: \"/todolist\",\n      element: /*#__PURE__*/_jsxDEV(TodoList, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 46\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/\",\n      element: /*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 38\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 9\n  }, this);\n};\n\n/**\r\n * msal-react is built on the React context API and all parts of your app that require authentication must be\r\n * wrapped in the MsalProvider component. You will first need to initialize an instance of PublicClientApplication\r\n * then pass this to MsalProvider as a prop. All components underneath MsalProvider will have access to the\r\n * PublicClientApplication instance via context as well as all hooks and components provided by msal-react. For more, visit:\r\n * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/getting-started.md\r\n */\n_s(Pages, \"CyAOT5TCyJmKIwhVlXYy8fh+2P8=\", false, function () {\n  return [useMsal];\n});\n_c = Pages;\nconst App = _ref => {\n  let {\n    instance\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(MsalProvider, {\n    instance: instance,\n    children: /*#__PURE__*/_jsxDEV(PageLayout, {\n      children: /*#__PURE__*/_jsxDEV(Pages, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 9\n  }, this);\n};\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"Pages\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["useEffect","Routes","Route","MsalProvider","useMsal","EventType","PageLayout","TodoList","Home","b2cPolicies","protectedResources","compareIssuingPolicy","Pages","instance","callbackId","addEventCallback","event","eventType","LOGIN_SUCCESS","ACQUIRE_TOKEN_SUCCESS","payload","account","idTokenClaims","names","editProfile","originalSignInAccount","getAllAccounts","find","oid","sub","signUpSignIn","signUpSignInFlowRequest","authority","authorities","ssoSilent","forgotPassword","scopes","apiTodoList","read","write","loginRedirect","LOGIN_FAILURE","error","errorMessage","includes","resetPasswordRequest","removeEventCallback","App"],"sources":["C:/Azure/gitauthdemo/ms-identity-javascript-react-tutorial/3-Authorization-II/2-call-api-b2c/SPA/src/App.jsx"],"sourcesContent":["import { useEffect } from 'react';\r\nimport { Routes, Route } from \"react-router-dom\";\r\nimport { MsalProvider, useMsal } from '@azure/msal-react';\r\nimport { EventType } from '@azure/msal-browser';\r\n\r\nimport { PageLayout } from './components/PageLayout';\r\nimport { TodoList } from './pages/TodoList';\r\nimport { Home } from './pages/Home';\r\nimport { b2cPolicies, protectedResources } from './authConfig';\r\nimport { compareIssuingPolicy } from './utils/claimUtils';\r\n\r\nimport './styles/App.css';\r\n\r\nconst Pages = () => {\r\n    /**\r\n     * useMsal is hook that returns the PublicClientApplication instance,\r\n     * an array of all accounts currently signed in and an inProgress value\r\n     * that tells you what msal is currently doing. For more, visit:\r\n     * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/hooks.md\r\n     */\r\n    const { instance } = useMsal();\r\n    useEffect(() => {\r\n        const callbackId = instance.addEventCallback((event) => {\r\n            if (\r\n                (event.eventType === EventType.LOGIN_SUCCESS || event.eventType === EventType.ACQUIRE_TOKEN_SUCCESS) &&\r\n                event.payload.account\r\n            ) {\r\n                /**\r\n                 * For the purpose of setting an active account for UI update, we want to consider only the auth\r\n                 * response resulting from SUSI flow. \"tfp\" claim in the id token tells us the policy (NOTE: legacy\r\n                 * policies may use \"acr\" instead of \"tfp\"). To learn more about B2C tokens, visit:\r\n                 * https://docs.microsoft.com/en-us/azure/active-directory-b2c/tokens-overview\r\n                 */\r\n                if (compareIssuingPolicy(event.payload.idTokenClaims, b2cPolicies.names.editProfile)) {\r\n                    // retrieve the account from initial sing-in to the app\r\n                    const originalSignInAccount = instance\r\n                        .getAllAccounts()\r\n                        .find(\r\n                            (account) =>\r\n                                account.idTokenClaims.oid === event.payload.idTokenClaims.oid &&\r\n                                account.idTokenClaims.sub === event.payload.idTokenClaims.sub && \r\n                                compareIssuingPolicy(account.idTokenClaims, b2cPolicies.names.signUpSignIn)        \r\n                        );\r\n\r\n                    let signUpSignInFlowRequest = {\r\n                        authority: b2cPolicies.authorities.signUpSignIn.authority,\r\n                        account: originalSignInAccount,\r\n                    };\r\n\r\n                    // silently login again with the signUpSignIn policy\r\n                    instance.ssoSilent(signUpSignInFlowRequest);\r\n                }\r\n\r\n                /**\r\n                 * Below we are checking if the user is returning from the reset password flow.\r\n                 * If so, we will ask the user to reauthenticate with their new password.\r\n                 * If you do not want this behavior and prefer your users to stay signed in instead,\r\n                 * you can replace the code below with the same pattern used for handling the return from\r\n                 * profile edit flow\r\n                 */\r\n                if (compareIssuingPolicy(event.payload.idTokenClaims, b2cPolicies.names.forgotPassword)) {\r\n                    let signUpSignInFlowRequest = {\r\n                        authority: b2cPolicies.authorities.signUpSignIn.authority,\r\n                        scopes: [\r\n                            ...protectedResources.apiTodoList.scopes.read,\r\n                            ...protectedResources.apiTodoList.scopes.write,\r\n                        ],\r\n                    };\r\n                    instance.loginRedirect(signUpSignInFlowRequest);\r\n                }\r\n            }\r\n\r\n            if (event.eventType === EventType.LOGIN_FAILURE) {\r\n                // Check for forgot password error\r\n                // Learn more about AAD error codes at https://docs.microsoft.com/en-us/azure/active-directory/develop/reference-aadsts-error-codes\r\n                if (event.error && event.error.errorMessage.includes('AADB2C90118')) {\r\n                    const resetPasswordRequest = {\r\n                        authority: b2cPolicies.authorities.forgotPassword.authority,\r\n                        scopes: [],\r\n                    };\r\n                    instance.loginRedirect(resetPasswordRequest);\r\n                }\r\n            }\r\n        });\r\n\r\n        return () => {\r\n            if (callbackId) {\r\n                instance.removeEventCallback(callbackId);\r\n            }\r\n        };\r\n        // eslint-disable-next-line\r\n    }, [instance]);\r\n\r\n    return (\r\n        <Routes>\r\n            <Route path=\"/todolist\" element={<TodoList />} />\r\n            <Route path=\"/\" element={<Home />} />\r\n        </Routes>\r\n    );\r\n};\r\n\r\n/**\r\n * msal-react is built on the React context API and all parts of your app that require authentication must be\r\n * wrapped in the MsalProvider component. You will first need to initialize an instance of PublicClientApplication\r\n * then pass this to MsalProvider as a prop. All components underneath MsalProvider will have access to the\r\n * PublicClientApplication instance via context as well as all hooks and components provided by msal-react. For more, visit:\r\n * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/getting-started.md\r\n */\r\nconst App = ({ instance }) => {\r\n    return (\r\n        <MsalProvider instance={instance}>\r\n            <PageLayout>\r\n                <Pages />\r\n            </PageLayout>\r\n        </MsalProvider>\r\n    );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}